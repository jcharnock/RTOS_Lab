
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006320  08006320  00007320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063f4  080063f4  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080063f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  20000060  08006458  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08006458  000082b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ba7  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a4  00000000  00000000  0001fc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00022ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa5  00000000  00000000  000242f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fa  00000000  00000000  0002529d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017578  00000000  00000000  0004d597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faed4  00000000  00000000  00064b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f9e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056fc  00000000  00000000  0015fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00165124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006308 	.word	0x08006308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006308 	.word	0x08006308

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b098      	sub	sp, #96	@ 0x60
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbd7 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f86d 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8ed 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8bb 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  buffer [write_size -2] = '\r';
 800050a:	233c      	movs	r3, #60	@ 0x3c
 800050c:	3b02      	subs	r3, #2
 800050e:	4a29      	ldr	r2, [pc, #164]	@ (80005b4 <main+0xc0>)
 8000510:	210d      	movs	r1, #13
 8000512:	54d1      	strb	r1, [r2, r3]
  buffer [write_size -1] = '\n';
 8000514:	233c      	movs	r3, #60	@ 0x3c
 8000516:	3b01      	subs	r3, #1
 8000518:	4a26      	ldr	r2, [pc, #152]	@ (80005b4 <main+0xc0>)
 800051a:	210a      	movs	r1, #10
 800051c:	54d1      	strb	r1, [r2, r3]
  uart_ptr = &huart2;
 800051e:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <main+0xc4>)
 8000520:	4a26      	ldr	r2, [pc, #152]	@ (80005bc <main+0xc8>)
 8000522:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000524:	2300      	movs	r3, #0
 8000526:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000528:	2300      	movs	r3, #0
 800052a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800052c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000530:	4618      	mov	r0, r3
 8000532:	f003 fa69 	bl	8003a08 <osMutexCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a21      	ldr	r2, [pc, #132]	@ (80005c0 <main+0xcc>)
 800053a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <main+0xd0>)
 800053e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000550:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f9f6 	bl	8003948 <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a1a      	ldr	r2, [pc, #104]	@ (80005c8 <main+0xd4>)
 8000560:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <main+0xd8>)
 8000564:	f107 0420 	add.w	r4, r7, #32
 8000568:	461d      	mov	r5, r3
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f9e3 	bl	8003948 <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <main+0xdc>)
 8000586:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <main+0xe0>)
 800058a:	1d3c      	adds	r4, r7, #4
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f9d2 	bl	8003948 <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <main+0xe4>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f003 f9c6 	bl	800393a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0xba>
 80005b2:	bf00      	nop
 80005b4:	200003b4 	.word	0x200003b4
 80005b8:	20000418 	.word	0x20000418
 80005bc:	2000031c 	.word	0x2000031c
 80005c0:	200003b0 	.word	0x200003b0
 80005c4:	0800632c 	.word	0x0800632c
 80005c8:	200003a4 	.word	0x200003a4
 80005cc:	08006354 	.word	0x08006354
 80005d0:	200003a8 	.word	0x200003a8
 80005d4:	0800637c 	.word	0x0800637c
 80005d8:	200003ac 	.word	0x200003ac

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fda4 	bl	8006138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f000 fe45 	bl	8001290 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f9f4 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fe7c 	bl	800133c <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f9d5 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fa44 	bl	8001af4 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f9c1 	bl	80009f8 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	@ 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f002 fbee 	bl	8002ea4 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f993 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000031c 	.word	0x2000031c
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a18      	ldr	r2, [pc, #96]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f000 fd71 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000768:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0xc8>)
 800077a:	f000 fbb9 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000798:	f000 fbaa 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000800 	.word	0x48000800

080007ac <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osMutexWait(myMutex01Handle, osWaitForever);
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <StartTask01+0xac>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f93b 	bl	8003a38 <osMutexWait>
    for (int i = 0; i< write_size -2; i++){
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e007      	b.n	80007d8 <StartTask01+0x2c>
    	buffer[i] = '1';
 80007c8:	4a24      	ldr	r2, [pc, #144]	@ (800085c <StartTask01+0xb0>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	2231      	movs	r2, #49	@ 0x31
 80007d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i< write_size -2; i++){
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	233c      	movs	r3, #60	@ 0x3c
 80007da:	3b02      	subs	r3, #2
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbf2      	blt.n	80007c8 <StartTask01+0x1c>
    }
    int j = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
    while (j < write_size){
 80007e6:	e029      	b.n	800083c <StartTask01+0x90>
    	if(uart_ptr->gState == HAL_UART_STATE_READY){
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <StartTask01+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80007ee:	2b20      	cmp	r3, #32
 80007f0:	d124      	bne.n	800083c <StartTask01+0x90>
    		uart_ptr->ErrorCode = HAL_UART_ERROR_NONE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <StartTask01+0xb4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    		uart_ptr->gState = HAL_UART_STATE_BUSY_TX;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <StartTask01+0xb4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2221      	movs	r2, #33	@ 0x21
 8000802:	67da      	str	r2, [r3, #124]	@ 0x7c
    		uart_ptr->TxXferSize = 1;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <StartTask01+0xb4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2201      	movs	r2, #1
 800080a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    		uart_ptr->TxXferCount = 1;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <StartTask01+0xb4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2201      	movs	r2, #1
 8000814:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    		uart_ptr->Instance->TDR = (uint16_t)(buffer[j]);
 8000818:	4a10      	ldr	r2, [pc, #64]	@ (800085c <StartTask01+0xb0>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <StartTask01+0xb4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	851a      	strh	r2, [r3, #40]	@ 0x28
    		osDelay(2);
 8000828:	2002      	movs	r0, #2
 800082a:	f003 f8d9 	bl	80039e0 <osDelay>
    		uart_ptr->gState=HAL_UART_STATE_READY;
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <StartTask01+0xb4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2220      	movs	r2, #32
 8000834:	67da      	str	r2, [r3, #124]	@ 0x7c
    		j++;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
    while (j < write_size){
 800083c:	223c      	movs	r2, #60	@ 0x3c
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	4293      	cmp	r3, r2
 8000842:	dbd1      	blt.n	80007e8 <StartTask01+0x3c>
    	}
    }
    osMutexRelease(myMutex01Handle);
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <StartTask01+0xac>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f003 f943 	bl	8003ad4 <osMutexRelease>
    osDelay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000852:	f003 f8c5 	bl	80039e0 <osDelay>
  {
 8000856:	e7ad      	b.n	80007b4 <StartTask01+0x8>
 8000858:	200003b0 	.word	0x200003b0
 800085c:	200003b4 	.word	0x200003b4
 8000860:	20000418 	.word	0x20000418

08000864 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  for(;;)
  {
	  osMutexWait(myMutex01Handle, osWaitForever);
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <StartTask02+0xac>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	4618      	mov	r0, r3
 8000876:	f003 f8df 	bl	8003a38 <osMutexWait>
	  for (int i = 0; i< write_size -2; i++){
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e007      	b.n	8000890 <StartTask02+0x2c>
	      	buffer[i] = '2';
 8000880:	4a24      	ldr	r2, [pc, #144]	@ (8000914 <StartTask02+0xb0>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	2232      	movs	r2, #50	@ 0x32
 8000888:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i< write_size -2; i++){
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	233c      	movs	r3, #60	@ 0x3c
 8000892:	3b02      	subs	r3, #2
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbf2      	blt.n	8000880 <StartTask02+0x1c>
	      }
	      int j = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
	      while (j < write_size){
 800089e:	e029      	b.n	80008f4 <StartTask02+0x90>
	      	if(uart_ptr->gState == HAL_UART_STATE_READY){
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <StartTask02+0xb4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80008a6:	2b20      	cmp	r3, #32
 80008a8:	d124      	bne.n	80008f4 <StartTask02+0x90>
	      		uart_ptr->ErrorCode = HAL_UART_ERROR_NONE;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <StartTask02+0xb4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      		uart_ptr->gState = HAL_UART_STATE_BUSY_TX;
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <StartTask02+0xb4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2221      	movs	r2, #33	@ 0x21
 80008ba:	67da      	str	r2, [r3, #124]	@ 0x7c
	      		uart_ptr->TxXferSize = 1;
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <StartTask02+0xb4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2201      	movs	r2, #1
 80008c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	      		uart_ptr->TxXferCount = 1;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <StartTask02+0xb4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	      		uart_ptr->Instance->TDR = (uint16_t)(buffer[j]);
 80008d0:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <StartTask02+0xb0>)
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <StartTask02+0xb4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	851a      	strh	r2, [r3, #40]	@ 0x28
	      		osDelay(2);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f003 f87d 	bl	80039e0 <osDelay>
	      		uart_ptr->gState=HAL_UART_STATE_READY;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <StartTask02+0xb4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2220      	movs	r2, #32
 80008ec:	67da      	str	r2, [r3, #124]	@ 0x7c
	      		j++;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
	      while (j < write_size){
 80008f4:	223c      	movs	r2, #60	@ 0x3c
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	dbd1      	blt.n	80008a0 <StartTask02+0x3c>
	      	}
	      }
	      osMutexRelease(myMutex01Handle);
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <StartTask02+0xac>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f8e7 	bl	8003ad4 <osMutexRelease>
	      osDelay(100);
 8000906:	2064      	movs	r0, #100	@ 0x64
 8000908:	f003 f86a 	bl	80039e0 <osDelay>
  {
 800090c:	e7ae      	b.n	800086c <StartTask02+0x8>
 800090e:	bf00      	nop
 8000910:	200003b0 	.word	0x200003b0
 8000914:	200003b4 	.word	0x200003b4
 8000918:	20000418 	.word	0x20000418

0800091c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */

  for(;;)
  {
	  osMutexWait(myMutex01Handle, osWaitForever);
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <StartTask03+0xac>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f883 	bl	8003a38 <osMutexWait>
	  for (int i = 0; i< write_size -2; i++){
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e007      	b.n	8000948 <StartTask03+0x2c>
	      	buffer[i] = '3';
 8000938:	4a24      	ldr	r2, [pc, #144]	@ (80009cc <StartTask03+0xb0>)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	2233      	movs	r2, #51	@ 0x33
 8000940:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i< write_size -2; i++){
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	233c      	movs	r3, #60	@ 0x3c
 800094a:	3b02      	subs	r3, #2
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	429a      	cmp	r2, r3
 8000950:	dbf2      	blt.n	8000938 <StartTask03+0x1c>
	      }
	      int j = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
	      while (j < write_size){
 8000956:	e029      	b.n	80009ac <StartTask03+0x90>
	      	if(uart_ptr->gState == HAL_UART_STATE_READY){
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <StartTask03+0xb4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800095e:	2b20      	cmp	r3, #32
 8000960:	d124      	bne.n	80009ac <StartTask03+0x90>
	      		uart_ptr->ErrorCode = HAL_UART_ERROR_NONE;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <StartTask03+0xb4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      		uart_ptr->gState = HAL_UART_STATE_BUSY_TX;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <StartTask03+0xb4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2221      	movs	r2, #33	@ 0x21
 8000972:	67da      	str	r2, [r3, #124]	@ 0x7c
	      		uart_ptr->TxXferSize = 1;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <StartTask03+0xb4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	      		uart_ptr->TxXferCount = 1;
 800097e:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <StartTask03+0xb4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	      		uart_ptr->Instance->TDR = (uint16_t)(buffer[j]);
 8000988:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <StartTask03+0xb0>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4413      	add	r3, r2
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <StartTask03+0xb4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	851a      	strh	r2, [r3, #40]	@ 0x28
	      		osDelay(2);
 8000998:	2002      	movs	r0, #2
 800099a:	f003 f821 	bl	80039e0 <osDelay>
	      		uart_ptr->gState=HAL_UART_STATE_READY;
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <StartTask03+0xb4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2220      	movs	r2, #32
 80009a4:	67da      	str	r2, [r3, #124]	@ 0x7c
	      		j++;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
	      while (j < write_size){
 80009ac:	223c      	movs	r2, #60	@ 0x3c
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4293      	cmp	r3, r2
 80009b2:	dbd1      	blt.n	8000958 <StartTask03+0x3c>
	      	}
	      }
	      osMutexRelease(myMutex01Handle);
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <StartTask03+0xac>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f88b 	bl	8003ad4 <osMutexRelease>
	      osDelay(200);
 80009be:	20c8      	movs	r0, #200	@ 0xc8
 80009c0:	f003 f80e 	bl	80039e0 <osDelay>
  {
 80009c4:	e7ae      	b.n	8000924 <StartTask03+0x8>
 80009c6:	bf00      	nop
 80009c8:	200003b0 	.word	0x200003b0
 80009cc:	200003b4 	.word	0x200003b4
 80009d0:	20000418 	.word	0x20000418

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f981 	bl	8000cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012c00 	.word	0x40012c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fa2b 	bl	8000e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ac      	sub	sp, #176	@ 0xb0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2288      	movs	r2, #136	@ 0x88
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 fb5f 	bl	8006138 <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <HAL_UART_MspInit+0xb0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13b      	bne.n	8000afc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fa85 	bl	8001fa0 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ffac 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa4:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f000 f9fa 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	37b0      	adds	r7, #176	@ 0xb0
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <HAL_InitTick+0xc8>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd4 <HAL_InitTick+0xc8>)
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b26:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <HAL_InitTick+0xc8>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f99d 	bl	8001e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b42:	f001 f985 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8000b46:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <HAL_InitTick+0xcc>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3b01      	subs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <HAL_InitTick+0xd4>)
 8000b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b7c:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b7e:	f001 fecb 	bl	8002918 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11b      	bne.n	8000bc8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b90:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b92:	f001 ff23 	bl	80029dc <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d111      	bne.n	8000bc8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ba4:	2019      	movs	r0, #25
 8000ba6:	f000 f995 	bl	8000ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d808      	bhi.n	8000bc2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2019      	movs	r0, #25
 8000bb6:	f000 f971 	bl	8000e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e002      	b.n	8000bc8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3730      	adds	r7, #48	@ 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	2000041c 	.word	0x2000041c
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	20000004 	.word	0x20000004

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c26:	f001 ff49 	bl	8002abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000041c 	.word	0x2000041c

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f005 fab5 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc33 	bl	80004f4 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c9c:	080063f8 	.word	0x080063f8
  ldr r2, =_sbss
 8000ca0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ca4:	200012b8 	.word	0x200012b8

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f8df 	bl	8000e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f7ff ff1f 	bl	8000b0c <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fe93 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000468 	.word	0x20000468

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000468 	.word	0x20000468

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff61 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ffb1 	bl	8000e20 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff54 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e17f      	b.n	8001200 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8171 	beq.w	80011fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d005      	beq.n	8000f30 <HAL_GPIO_Init+0x40>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d130      	bne.n	8000f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 0201 	and.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d118      	bne.n	8000fd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	6939      	ldr	r1, [r7, #16]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80ac 	beq.w	80011fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001220 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001220 <HAL_GPIO_Init+0x330>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001220 <HAL_GPIO_Init+0x330>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <HAL_GPIO_Init+0x334>)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x242>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001228 <HAL_GPIO_Init+0x338>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x23e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	@ (800122c <HAL_GPIO_Init+0x33c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x23a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x340>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x236>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <HAL_GPIO_Init+0x344>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x232>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4b      	ldr	r2, [pc, #300]	@ (8001238 <HAL_GPIO_Init+0x348>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x22e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4a      	ldr	r2, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x34c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x22a>
 8001116:	2306      	movs	r3, #6
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x244>
 800111a:	2307      	movs	r3, #7
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x244>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x244>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x244>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x244>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x244>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x244>
 8001132:	2300      	movs	r3, #0
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001144:	4937      	ldr	r1, [pc, #220]	@ (8001224 <HAL_GPIO_Init+0x334>)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <HAL_GPIO_Init+0x350>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001176:	4a32      	ldr	r2, [pc, #200]	@ (8001240 <HAL_GPIO_Init+0x350>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117c:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <HAL_GPIO_Init+0x350>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <HAL_GPIO_Init+0x350>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_GPIO_Init+0x350>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_GPIO_Init+0x350>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <HAL_GPIO_Init+0x350>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <HAL_GPIO_Init+0x350>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f ae78 	bne.w	8000f00 <HAL_GPIO_Init+0x10>
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	48000400 	.word	0x48000400
 800122c:	48000800 	.word	0x48000800
 8001230:	48000c00 	.word	0x48000c00
 8001234:	48001000 	.word	0x48001000
 8001238:	48001400 	.word	0x48001400
 800123c:	48001800 	.word	0x48001800
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001260:	e002      	b.n	8001268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_PWREx_GetVoltageRange+0x18>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000

08001290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800129e:	d130      	bne.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ac:	d038      	beq.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2232      	movs	r2, #50	@ 0x32
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0c9b      	lsrs	r3, r3, #18
 80012d0:	3301      	adds	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d4:	e002      	b.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e8:	d102      	bne.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f2      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fc:	d110      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e00f      	b.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800130a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130e:	d007      	beq.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001318:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40007000 	.word	0x40007000
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83

0800133c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3ca      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b97      	ldr	r3, [pc, #604]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001358:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80e4 	beq.w	8001538 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_RCC_OscConfig+0x4a>
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	f040 808b 	bne.w	8001494 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 8087 	bne.w	8001494 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001386:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x62>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e3a2      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	4b82      	ldr	r3, [pc, #520]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_RCC_OscConfig+0x7c>
 80013ae:	4b7f      	ldr	r3, [pc, #508]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b6:	e005      	b.n	80013c4 <HAL_RCC_OscConfig+0x88>
 80013b8:	4b7c      	ldr	r3, [pc, #496]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d223      	bcs.n	8001410 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fd87 	bl	8001ee0 <RCC_SetFlashLatencyFromMSIRange>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e383      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	4b73      	ldr	r3, [pc, #460]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a72      	ldr	r2, [pc, #456]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	496d      	ldr	r1, [pc, #436]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fa:	4b6c      	ldr	r3, [pc, #432]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4968      	ldr	r1, [pc, #416]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
 800140e:	e025      	b.n	800145c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001410:	4b66      	ldr	r3, [pc, #408]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a65      	ldr	r2, [pc, #404]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b63      	ldr	r3, [pc, #396]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4960      	ldr	r1, [pc, #384]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142e:	4b5f      	ldr	r3, [pc, #380]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	495b      	ldr	r1, [pc, #364]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fd47 	bl	8001ee0 <RCC_SetFlashLatencyFromMSIRange>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e343      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800145c:	f000 fc4a 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b52      	ldr	r3, [pc, #328]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	4950      	ldr	r1, [pc, #320]	@ (80015b0 <HAL_RCC_OscConfig+0x274>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	4a4e      	ldr	r2, [pc, #312]	@ (80015b4 <HAL_RCC_OscConfig+0x278>)
 800147a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800147c:	4b4e      	ldr	r3, [pc, #312]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fb43 	bl	8000b0c <HAL_InitTick>
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d052      	beq.n	8001536 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	e327      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d032      	beq.n	8001502 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800149c:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a42      	ldr	r2, [pc, #264]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc34 	bl	8000d14 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc30 	bl	8000d14 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e310      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c2:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a36      	ldr	r2, [pc, #216]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4931      	ldr	r1, [pc, #196]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	492c      	ldr	r1, [pc, #176]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e01a      	b.n	8001538 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a29      	ldr	r2, [pc, #164]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800150e:	f7ff fc01 	bl	8000d14 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001516:	f7ff fbfd 	bl	8000d14 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e2dd      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x1da>
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001536:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d074      	beq.n	800162e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b08      	cmp	r3, #8
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x21a>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d10e      	bne.n	800156e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d10b      	bne.n	800156e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d064      	beq.n	800162c <HAL_RCC_OscConfig+0x2f0>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d160      	bne.n	800162c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e2ba      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x24a>
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800157e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	e026      	b.n	80015d4 <HAL_RCC_OscConfig+0x298>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800158e:	d115      	bne.n	80015bc <HAL_RCC_OscConfig+0x280>
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 8001596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a02      	ldr	r2, [pc, #8]	@ (80015ac <HAL_RCC_OscConfig+0x270>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x298>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	080063a0 	.word	0x080063a0
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004
 80015bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb9a 	bl	8000d14 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb96 	bl	8000d14 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	@ 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e276      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f6:	4b92      	ldr	r3, [pc, #584]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2a8>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb86 	bl	8000d14 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb82 	bl	8000d14 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	@ 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e262      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161e:	4b88      	ldr	r3, [pc, #544]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x2d0>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d060      	beq.n	80016fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x310>
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d119      	bne.n	800167a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d116      	bne.n	800167a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	4b7c      	ldr	r3, [pc, #496]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x328>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e23f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b76      	ldr	r3, [pc, #472]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4973      	ldr	r1, [pc, #460]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	e040      	b.n	80016fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d023      	beq.n	80016ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001682:	4b6f      	ldr	r3, [pc, #444]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6e      	ldr	r2, [pc, #440]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fb41 	bl	8000d14 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fb3d 	bl	8000d14 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e21d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b62      	ldr	r3, [pc, #392]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	495f      	ldr	r1, [pc, #380]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e018      	b.n	80016fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb1d 	bl	8000d14 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fb19 	bl	8000d14 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1f9      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d03c      	beq.n	8001782 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01c      	beq.n	800174a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001710:	4b4b      	ldr	r3, [pc, #300]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001716:	4a4a      	ldr	r2, [pc, #296]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff faf8 	bl	8000d14 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff faf4 	bl	8000d14 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1d4      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0ef      	beq.n	8001728 <HAL_RCC_OscConfig+0x3ec>
 8001748:	e01b      	b.n	8001782 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001750:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fadb 	bl	8000d14 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fad7 	bl	8000d14 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1b7      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80a6 	beq.w	80018dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10d      	bne.n	80017bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	4a26      	ldr	r2, [pc, #152]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b8:	2301      	movs	r3, #1
 80017ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <HAL_RCC_OscConfig+0x508>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d118      	bne.n	80017fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <HAL_RCC_OscConfig+0x508>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <HAL_RCC_OscConfig+0x508>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa9e 	bl	8000d14 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017dc:	f7ff fa9a 	bl	8000d14 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e17a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_RCC_OscConfig+0x508>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001812:	e029      	b.n	8001868 <HAL_RCC_OscConfig+0x52c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d115      	bne.n	8001848 <HAL_RCC_OscConfig+0x50c>
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001832:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <HAL_RCC_OscConfig+0x504>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x52c>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	40007000 	.word	0x40007000
 8001848:	4b9c      	ldr	r3, [pc, #624]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	4a9b      	ldr	r2, [pc, #620]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001858:	4b98      	ldr	r3, [pc, #608]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	4a97      	ldr	r2, [pc, #604]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d016      	beq.n	800189e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fa50 	bl	8000d14 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fa4c 	bl	8000d14 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e12a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188e:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ed      	beq.n	8001878 <HAL_RCC_OscConfig+0x53c>
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fa39 	bl	8000d14 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fa35 	bl	8000d14 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e113      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018bc:	4b7f      	ldr	r3, [pc, #508]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ed      	bne.n	80018a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b7a      	ldr	r3, [pc, #488]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	4a79      	ldr	r2, [pc, #484]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80fe 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	f040 80d0 	bne.w	8001a90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018f0:	4b72      	ldr	r3, [pc, #456]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	429a      	cmp	r2, r3
 8001902:	d130      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	3b01      	subs	r3, #1
 8001910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d127      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11f      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001930:	2a07      	cmp	r2, #7
 8001932:	bf14      	ite	ne
 8001934:	2201      	movne	r2, #1
 8001936:	2200      	moveq	r2, #0
 8001938:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	4293      	cmp	r3, r2
 800193c:	d113      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d109      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d06e      	beq.n	8001a44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d069      	beq.n	8001a40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001978:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0ad      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001988:	4b4c      	ldr	r3, [pc, #304]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4b      	ldr	r2, [pc, #300]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f9be 	bl	8000d14 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f9ba 	bl	8000d14 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e09a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ae:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ba:	4b40      	ldr	r3, [pc, #256]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b40      	ldr	r3, [pc, #256]	@ (8001ac0 <HAL_RCC_OscConfig+0x784>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019ca:	3a01      	subs	r2, #1
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019dc:	0852      	lsrs	r2, r2, #1
 80019de:	3a01      	subs	r2, #1
 80019e0:	0552      	lsls	r2, r2, #21
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019e8:	0852      	lsrs	r2, r2, #1
 80019ea:	3a01      	subs	r2, #1
 80019ec:	0652      	lsls	r2, r2, #25
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019f4:	0912      	lsrs	r2, r2, #4
 80019f6:	0452      	lsls	r2, r2, #17
 80019f8:	430a      	orrs	r2, r1
 80019fa:	4930      	ldr	r1, [pc, #192]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a00:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2d      	ldr	r2, [pc, #180]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a2a      	ldr	r2, [pc, #168]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a18:	f7ff f97c 	bl	8000d14 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f978 	bl	8000d14 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e058      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3e:	e050      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e04f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d148      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a5c:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a68:	f7ff f954 	bl	8000d14 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f950 	bl	8000d14 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e030      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x734>
 8001a8e:	e028      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d023      	beq.n	8001ade <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_RCC_OscConfig+0x780>)
 8001a9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f937 	bl	8000d14 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	e00c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f933 	bl	8000d14 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d905      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e013      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_OscConfig+0x7b0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ec      	bne.n	8001aaa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_RCC_OscConfig+0x7b0>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4905      	ldr	r1, [pc, #20]	@ (8001aec <HAL_RCC_OscConfig+0x7b0>)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_RCC_OscConfig+0x7b4>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
 8001adc:	e001      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	feeefffc 	.word	0xfeeefffc

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0e7      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b75      	ldr	r3, [pc, #468]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b72      	ldr	r3, [pc, #456]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4970      	ldr	r1, [pc, #448]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0cf      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b66      	ldr	r3, [pc, #408]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d908      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4960      	ldr	r1, [pc, #384]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d04c      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d121      	bne.n	8001bca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0a6      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d115      	bne.n	8001bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e09a      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001baa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e08e      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e086      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4943      	ldr	r1, [pc, #268]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f89a 	bl	8000d14 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff f896 	bl	8000d14 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e06e      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d010      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d208      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	492b      	ldr	r1, [pc, #172]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d210      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c48:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0207 	bic.w	r2, r3, #7
 8001c50:	4923      	ldr	r1, [pc, #140]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c58:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e036      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4918      	ldr	r1, [pc, #96]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d009      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4910      	ldr	r1, [pc, #64]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca8:	f000 f824 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	490b      	ldr	r1, [pc, #44]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ff1d 	bl	8000b0c <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	080063a0 	.word	0x080063a0
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x34>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d121      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d11e      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d34:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e005      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d50:	4a2b      	ldr	r2, [pc, #172]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e004      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d134      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d003      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0xac>
 8001d98:	e005      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d9c:	617b      	str	r3, [r7, #20]
      break;
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001da2:	617b      	str	r3, [r7, #20]
      break;
 8001da4:	e002      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	617b      	str	r3, [r7, #20]
      break;
 8001daa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	3301      	adds	r3, #1
 8001db8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	fb03 f202 	mul.w	r2, r3, r2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	0e5b      	lsrs	r3, r3, #25
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dec:	69bb      	ldr	r3, [r7, #24]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	080063b8 	.word	0x080063b8
 8001e04:	00f42400 	.word	0x00f42400
 8001e08:	007a1200 	.word	0x007a1200

08001e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e28:	f7ff fff0 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4904      	ldr	r1, [pc, #16]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080063b0 	.word	0x080063b0

08001e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e54:	f7ff ffda 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0adb      	lsrs	r3, r3, #11
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4904      	ldr	r1, [pc, #16]	@ (8001e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	080063b0 	.word	0x080063b0

08001e7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	220f      	movs	r2, #15
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_RCC_GetClockConfig+0x60>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0207 	and.w	r2, r3, #7
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40022000 	.word	0x40022000

08001ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eec:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ef8:	f7ff f9bc 	bl	8001274 <HAL_PWREx_GetVoltageRange>
 8001efc:	6178      	str	r0, [r7, #20]
 8001efe:	e014      	b.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	4a24      	ldr	r2, [pc, #144]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f18:	f7ff f9ac 	bl	8001274 <HAL_PWREx_GetVoltageRange>
 8001f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f30:	d10b      	bne.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	@ 0x80
 8001f36:	d919      	bls.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f3c:	d902      	bls.n	8001f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f3e:	2302      	movs	r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e013      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e010      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b80      	cmp	r3, #128	@ 0x80
 8001f4e:	d902      	bls.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f50:	2303      	movs	r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e00a      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	@ 0x80
 8001f5a:	d102      	bne.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e004      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b70      	cmp	r3, #112	@ 0x70
 8001f66:	d101      	bne.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	4909      	ldr	r1, [pc, #36]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d041      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fc4:	d02a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fca:	d824      	bhi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fd0:	d008      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fd6:	d81e      	bhi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fe0:	d010      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fe2:	e018      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe4:	4b86      	ldr	r3, [pc, #536]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a85      	ldr	r2, [pc, #532]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff0:	e015      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fabb 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002002:	e00c      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3320      	adds	r3, #32
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fba6 	bl	800275c <RCCEx_PLLSAI2_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002014:	e003      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	74fb      	strb	r3, [r7, #19]
      break;
 800201a:	e000      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800201c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002024:	4b76      	ldr	r3, [pc, #472]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002032:	4973      	ldr	r1, [pc, #460]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800203a:	e001      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d041      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002050:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002054:	d02a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800205a:	d824      	bhi.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800205c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002060:	d008      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002066:	d81e      	bhi.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d010      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002072:	e018      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002074:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a61      	ldr	r2, [pc, #388]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002080:	e015      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fa73 	bl	8002574 <RCCEx_PLLSAI1_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002092:	e00c      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3320      	adds	r3, #32
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fb5e 	bl	800275c <RCCEx_PLLSAI2_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a4:	e003      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	74fb      	strb	r3, [r7, #19]
      break;
 80020aa:	e000      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10b      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020b4:	4b52      	ldr	r3, [pc, #328]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c2:	494f      	ldr	r1, [pc, #316]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020ca:	e001      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a0 	beq.w	800221e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e2:	4b47      	ldr	r3, [pc, #284]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020f2:	2300      	movs	r3, #0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b41      	ldr	r3, [pc, #260]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	@ 0x58
 8002104:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002110:	2301      	movs	r3, #1
 8002112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002120:	f7fe fdf8 	bl	8000d14 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fdf4 	bl	8000d14 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d902      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	74fb      	strb	r3, [r7, #19]
        break;
 800213a:	e005      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213c:	4b31      	ldr	r3, [pc, #196]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ef      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d15c      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214e:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d019      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216c:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002178:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fdb3 	bl	8000d14 <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	e00b      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fdaf 	bl	8000d14 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d902      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	74fb      	strb	r3, [r7, #19]
            break;
 80021c8:	e006      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ec      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ee:	4904      	ldr	r1, [pc, #16]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021f6:	e009      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	74bb      	strb	r3, [r7, #18]
 80021fc:	e006      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220c:	7c7b      	ldrb	r3, [r7, #17]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b9e      	ldr	r3, [pc, #632]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	4a9d      	ldr	r2, [pc, #628]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222a:	4b98      	ldr	r3, [pc, #608]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f023 0203 	bic.w	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	4994      	ldr	r1, [pc, #592]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800224c:	4b8f      	ldr	r3, [pc, #572]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f023 020c 	bic.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	498c      	ldr	r1, [pc, #560]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800226e:	4b87      	ldr	r3, [pc, #540]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	4983      	ldr	r1, [pc, #524]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002290:	4b7e      	ldr	r3, [pc, #504]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	497b      	ldr	r1, [pc, #492]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022b2:	4b76      	ldr	r3, [pc, #472]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c0:	4972      	ldr	r1, [pc, #456]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d4:	4b6d      	ldr	r3, [pc, #436]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	496a      	ldr	r1, [pc, #424]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f6:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	4961      	ldr	r1, [pc, #388]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002318:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	4959      	ldr	r1, [pc, #356]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233a:	4b54      	ldr	r3, [pc, #336]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002340:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002348:	4950      	ldr	r1, [pc, #320]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	4948      	ldr	r1, [pc, #288]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800237e:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	493f      	ldr	r1, [pc, #252]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d028      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a0:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ae:	4937      	ldr	r1, [pc, #220]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023be:	d106      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ca:	60d3      	str	r3, [r2, #12]
 80023cc:	e011      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	2101      	movs	r1, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f8c8 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d028      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023fe:	4b23      	ldr	r3, [pc, #140]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	491f      	ldr	r1, [pc, #124]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800241c:	d106      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241e:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a1a      	ldr	r2, [pc, #104]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002428:	60d3      	str	r3, [r2, #12]
 800242a:	e011      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f899 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02b      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246a:	4908      	ldr	r1, [pc, #32]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800247a:	d109      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a02      	ldr	r2, [pc, #8]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002486:	60d3      	str	r3, [r2, #12]
 8002488:	e014      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f867 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02f      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024ce:	4928      	ldr	r1, [pc, #160]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024de:	d10d      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2102      	movs	r1, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f844 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d014      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
 80024fa:	e011      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3320      	adds	r3, #32
 800250a:	2102      	movs	r1, #2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f925 	bl	800275c <RCCEx_PLLSAI2_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255e:	4904      	ldr	r1, [pc, #16]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002566:	7cbb      	ldrb	r3, [r7, #18]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002582:	4b75      	ldr	r3, [pc, #468]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d018      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800258e:	4b72      	ldr	r3, [pc, #456]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d10d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
       ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
       ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d047      	beq.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e044      	b.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d018      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x86>
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d825      	bhi.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x62>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d009      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x74>
 80025d4:	e020      	b.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025d6:	4b60      	ldr	r3, [pc, #384]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e01a      	b.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d116      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e013      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fa:	4b57      	ldr	r3, [pc, #348]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002606:	4b54      	ldr	r3, [pc, #336]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002616:	e006      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e004      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261e:	bf00      	nop
 8002620:	e002      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
    }

    if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800262e:	4b4a      	ldr	r3, [pc, #296]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	430b      	orrs	r3, r1
 8002644:	4944      	ldr	r1, [pc, #272]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d17d      	bne.n	800274c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fb5a 	bl	8000d14 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe fb56 	bl	8000d14 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
        break;
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002678:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ef      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d160      	bne.n	800274c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	0912      	lsrs	r2, r2, #4
 80026a8:	0452      	lsls	r2, r2, #17
 80026aa:	430a      	orrs	r2, r1
 80026ac:	492a      	ldr	r1, [pc, #168]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	610b      	str	r3, [r1, #16]
 80026b2:	e027      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d112      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6892      	ldr	r2, [r2, #8]
 80026ca:	0211      	lsls	r1, r2, #8
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6912      	ldr	r2, [r2, #16]
 80026d0:	0852      	lsrs	r2, r2, #1
 80026d2:	3a01      	subs	r2, #1
 80026d4:	0552      	lsls	r2, r2, #21
 80026d6:	430a      	orrs	r2, r1
 80026d8:	491f      	ldr	r1, [pc, #124]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
 80026de:	e011      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	0211      	lsls	r1, r2, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6952      	ldr	r2, [r2, #20]
 80026f6:	0852      	lsrs	r2, r2, #1
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0652      	lsls	r2, r2, #25
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4916      	ldr	r1, [pc, #88]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800270e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fb00 	bl	8000d14 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002716:	e009      	b.n	800272c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002718:	f7fe fafc 	bl	8000d14 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	73fb      	strb	r3, [r7, #15]
          break;
 800272a:	e005      	b.n	8002738 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4904      	ldr	r1, [pc, #16]	@ (8002758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276a:	4b6a      	ldr	r3, [pc, #424]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002776:	4b67      	ldr	r3, [pc, #412]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0203 	and.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d10d      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
       ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800278e:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
       ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d047      	beq.n	8002832 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e044      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d018      	beq.n	80027e2 <RCCEx_PLLSAI2_Config+0x86>
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d825      	bhi.n	8002800 <RCCEx_PLLSAI2_Config+0xa4>
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <RCCEx_PLLSAI2_Config+0x62>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d009      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x74>
 80027bc:	e020      	b.n	8002800 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027be:	4b55      	ldr	r3, [pc, #340]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11d      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e01a      	b.n	8002806 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d0:	4b50      	ldr	r3, [pc, #320]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d116      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e013      	b.n	800280a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ee:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027fe:	e006      	b.n	800280e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e004      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002816:	4b3f      	ldr	r3, [pc, #252]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	430b      	orrs	r3, r1
 800282c:	4939      	ldr	r1, [pc, #228]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d167      	bne.n	8002908 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002838:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a35      	ldr	r2, [pc, #212]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fe fa66 	bl	8000d14 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800284a:	e009      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800284c:	f7fe fa62 	bl	8000d14 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	73fb      	strb	r3, [r7, #15]
        break;
 800285e:	e005      	b.n	800286c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002860:	4b2c      	ldr	r3, [pc, #176]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ef      	bne.n	800284c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d14a      	bne.n	8002908 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002878:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6892      	ldr	r2, [r2, #8]
 8002888:	0211      	lsls	r1, r2, #8
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68d2      	ldr	r2, [r2, #12]
 800288e:	0912      	lsrs	r2, r2, #4
 8002890:	0452      	lsls	r2, r2, #17
 8002892:	430a      	orrs	r2, r1
 8002894:	491f      	ldr	r1, [pc, #124]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	614b      	str	r3, [r1, #20]
 800289a:	e011      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	0211      	lsls	r1, r2, #8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6912      	ldr	r2, [r2, #16]
 80028b2:	0852      	lsrs	r2, r2, #1
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0652      	lsls	r2, r2, #25
 80028b8:	430a      	orrs	r2, r1
 80028ba:	4916      	ldr	r1, [pc, #88]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fa22 	bl	8000d14 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d2:	e009      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d4:	f7fe fa1e 	bl	8000d14 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	73fb      	strb	r3, [r7, #15]
          break;
 80028e6:	e005      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ef      	beq.n	80028d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4904      	ldr	r1, [pc, #16]	@ (8002914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e049      	b.n	80029be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f841 	bl	80029c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 f9e0 	bl	8002d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e04f      	b.n	8002a94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a23      	ldr	r2, [pc, #140]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01d      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1e:	d018      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <HAL_TIM_Base_Start_IT+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_Base_Start_IT+0x76>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	@ (8002ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d115      	bne.n	8002a7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d015      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0xb4>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6a:	d011      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7c:	e008      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e000      	b.n	8002a92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40013400 	.word	0x40013400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	00010007 	.word	0x00010007

08002abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0202 	mvn.w	r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8e9 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8db 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8ec 	bl	8002cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0204 	mvn.w	r2, #4
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8c3 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8b5 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8c6 	bl	8002cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0208 	mvn.w	r2, #8
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f89d 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f88f 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8a0 	bl	8002cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f877 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f869 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f87a 	bl	8002cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fed6 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00c      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f913 	bl	8002e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f90b 	bl	8002e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00c      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f834 	bl	8002d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0220 	mvn.w	r2, #32
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8d3 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a46      	ldr	r2, [pc, #280]	@ (8002e48 <TIM_Base_SetConfig+0x12c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3a:	d00f      	beq.n	8002d5c <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a43      	ldr	r2, [pc, #268]	@ (8002e4c <TIM_Base_SetConfig+0x130>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a42      	ldr	r2, [pc, #264]	@ (8002e50 <TIM_Base_SetConfig+0x134>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a41      	ldr	r2, [pc, #260]	@ (8002e54 <TIM_Base_SetConfig+0x138>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	@ (8002e58 <TIM_Base_SetConfig+0x13c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a35      	ldr	r2, [pc, #212]	@ (8002e48 <TIM_Base_SetConfig+0x12c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7c:	d01b      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a32      	ldr	r2, [pc, #200]	@ (8002e4c <TIM_Base_SetConfig+0x130>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d017      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a31      	ldr	r2, [pc, #196]	@ (8002e50 <TIM_Base_SetConfig+0x134>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a30      	ldr	r2, [pc, #192]	@ (8002e54 <TIM_Base_SetConfig+0x138>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2f      	ldr	r2, [pc, #188]	@ (8002e58 <TIM_Base_SetConfig+0x13c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e5c <TIM_Base_SetConfig+0x140>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e60 <TIM_Base_SetConfig+0x144>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e64 <TIM_Base_SetConfig+0x148>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <TIM_Base_SetConfig+0x12c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <TIM_Base_SetConfig+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <TIM_Base_SetConfig+0x140>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a16      	ldr	r2, [pc, #88]	@ (8002e60 <TIM_Base_SetConfig+0x144>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <TIM_Base_SetConfig+0x148>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d103      	bne.n	8002e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f023 0201 	bic.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e040      	b.n	8002f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fdc4 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fae0 	bl	80034b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f825 	bl	8002f40 <UART_SetConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e01b      	b.n	8002f38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fb5f 	bl	80035f4 <UART_CheckIdleState>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b08a      	sub	sp, #40	@ 0x28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4ba4      	ldr	r3, [pc, #656]	@ (8003200 <UART_SetConfig+0x2c0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a99      	ldr	r2, [pc, #612]	@ (8003204 <UART_SetConfig+0x2c4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a90      	ldr	r2, [pc, #576]	@ (8003208 <UART_SetConfig+0x2c8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d126      	bne.n	8003018 <UART_SetConfig+0xd8>
 8002fca:	4b90      	ldr	r3, [pc, #576]	@ (800320c <UART_SetConfig+0x2cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d81b      	bhi.n	8003010 <UART_SetConfig+0xd0>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <UART_SetConfig+0xa0>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003009 	.word	0x08003009
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff6:	e116      	b.n	8003226 <UART_SetConfig+0x2e6>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e112      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e10e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e10a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e106      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7c      	ldr	r2, [pc, #496]	@ (8003210 <UART_SetConfig+0x2d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d138      	bne.n	8003094 <UART_SetConfig+0x154>
 8003022:	4b7a      	ldr	r3, [pc, #488]	@ (800320c <UART_SetConfig+0x2cc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d82d      	bhi.n	800308c <UART_SetConfig+0x14c>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <UART_SetConfig+0xf8>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800306d 	.word	0x0800306d
 800303c:	0800308d 	.word	0x0800308d
 8003040:	0800308d 	.word	0x0800308d
 8003044:	0800308d 	.word	0x0800308d
 8003048:	0800307d 	.word	0x0800307d
 800304c:	0800308d 	.word	0x0800308d
 8003050:	0800308d 	.word	0x0800308d
 8003054:	0800308d 	.word	0x0800308d
 8003058:	08003075 	.word	0x08003075
 800305c:	0800308d 	.word	0x0800308d
 8003060:	0800308d 	.word	0x0800308d
 8003064:	0800308d 	.word	0x0800308d
 8003068:	08003085 	.word	0x08003085
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e0d8      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e0d4      	b.n	8003226 <UART_SetConfig+0x2e6>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003082:	e0d0      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308a:	e0cc      	b.n	8003226 <UART_SetConfig+0x2e6>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003092:	e0c8      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <UART_SetConfig+0x2d4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d125      	bne.n	80030ea <UART_SetConfig+0x1aa>
 800309e:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <UART_SetConfig+0x2cc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030a8:	2b30      	cmp	r3, #48	@ 0x30
 80030aa:	d016      	beq.n	80030da <UART_SetConfig+0x19a>
 80030ac:	2b30      	cmp	r3, #48	@ 0x30
 80030ae:	d818      	bhi.n	80030e2 <UART_SetConfig+0x1a2>
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d00a      	beq.n	80030ca <UART_SetConfig+0x18a>
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d814      	bhi.n	80030e2 <UART_SetConfig+0x1a2>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <UART_SetConfig+0x182>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d008      	beq.n	80030d2 <UART_SetConfig+0x192>
 80030c0:	e00f      	b.n	80030e2 <UART_SetConfig+0x1a2>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c8:	e0ad      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030ca:	2302      	movs	r3, #2
 80030cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d0:	e0a9      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030d2:	2304      	movs	r3, #4
 80030d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d8:	e0a5      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030da:	2308      	movs	r3, #8
 80030dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e0:	e0a1      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030e2:	2310      	movs	r3, #16
 80030e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e8:	e09d      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003218 <UART_SetConfig+0x2d8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d125      	bne.n	8003140 <UART_SetConfig+0x200>
 80030f4:	4b45      	ldr	r3, [pc, #276]	@ (800320c <UART_SetConfig+0x2cc>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003100:	d016      	beq.n	8003130 <UART_SetConfig+0x1f0>
 8003102:	2bc0      	cmp	r3, #192	@ 0xc0
 8003104:	d818      	bhi.n	8003138 <UART_SetConfig+0x1f8>
 8003106:	2b80      	cmp	r3, #128	@ 0x80
 8003108:	d00a      	beq.n	8003120 <UART_SetConfig+0x1e0>
 800310a:	2b80      	cmp	r3, #128	@ 0x80
 800310c:	d814      	bhi.n	8003138 <UART_SetConfig+0x1f8>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0x1d8>
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d008      	beq.n	8003128 <UART_SetConfig+0x1e8>
 8003116:	e00f      	b.n	8003138 <UART_SetConfig+0x1f8>
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e082      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003120:	2302      	movs	r3, #2
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e07e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003128:	2304      	movs	r3, #4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e07a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003136:	e076      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313e:	e072      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a35      	ldr	r2, [pc, #212]	@ (800321c <UART_SetConfig+0x2dc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12a      	bne.n	80031a0 <UART_SetConfig+0x260>
 800314a:	4b30      	ldr	r3, [pc, #192]	@ (800320c <UART_SetConfig+0x2cc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003158:	d01a      	beq.n	8003190 <UART_SetConfig+0x250>
 800315a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800315e:	d81b      	bhi.n	8003198 <UART_SetConfig+0x258>
 8003160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003164:	d00c      	beq.n	8003180 <UART_SetConfig+0x240>
 8003166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316a:	d815      	bhi.n	8003198 <UART_SetConfig+0x258>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <UART_SetConfig+0x238>
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d008      	beq.n	8003188 <UART_SetConfig+0x248>
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x258>
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e052      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e04e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e04a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003196:	e046      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e042      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <UART_SetConfig+0x2c4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d13a      	bne.n	8003220 <UART_SetConfig+0x2e0>
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <UART_SetConfig+0x2cc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031b8:	d01a      	beq.n	80031f0 <UART_SetConfig+0x2b0>
 80031ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031be:	d81b      	bhi.n	80031f8 <UART_SetConfig+0x2b8>
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c4:	d00c      	beq.n	80031e0 <UART_SetConfig+0x2a0>
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ca:	d815      	bhi.n	80031f8 <UART_SetConfig+0x2b8>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <UART_SetConfig+0x298>
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	d008      	beq.n	80031e8 <UART_SetConfig+0x2a8>
 80031d6:	e00f      	b.n	80031f8 <UART_SetConfig+0x2b8>
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e022      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e6:	e01e      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ee:	e01a      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e016      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e012      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003200:	efff69f3 	.word	0xefff69f3
 8003204:	40008000 	.word	0x40008000
 8003208:	40013800 	.word	0x40013800
 800320c:	40021000 	.word	0x40021000
 8003210:	40004400 	.word	0x40004400
 8003214:	40004800 	.word	0x40004800
 8003218:	40004c00 	.word	0x40004c00
 800321c:	40005000 	.word	0x40005000
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a9f      	ldr	r2, [pc, #636]	@ (80034a8 <UART_SetConfig+0x568>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d17a      	bne.n	8003326 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003234:	2b08      	cmp	r3, #8
 8003236:	d824      	bhi.n	8003282 <UART_SetConfig+0x342>
 8003238:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <UART_SetConfig+0x300>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003265 	.word	0x08003265
 8003244:	08003283 	.word	0x08003283
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003283 	.word	0x08003283
 8003250:	08003273 	.word	0x08003273
 8003254:	08003283 	.word	0x08003283
 8003258:	08003283 	.word	0x08003283
 800325c:	08003283 	.word	0x08003283
 8003260:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe fdde 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e010      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b8f      	ldr	r3, [pc, #572]	@ (80034ac <UART_SetConfig+0x56c>)
 800326e:	61fb      	str	r3, [r7, #28]
        break;
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7fe fd3f 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8003276:	61f8      	str	r0, [r7, #28]
        break;
 8003278:	e009      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e005      	b.n	800328e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800328c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80fb 	beq.w	800348c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d305      	bcc.n	80032b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d903      	bls.n	80032ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032b8:	e0e8      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2200      	movs	r2, #0
 80032be:	461c      	mov	r4, r3
 80032c0:	4615      	mov	r5, r2
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	022b      	lsls	r3, r5, #8
 80032cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032d0:	0222      	lsls	r2, r4, #8
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	6849      	ldr	r1, [r1, #4]
 80032d6:	0849      	lsrs	r1, r1, #1
 80032d8:	2000      	movs	r0, #0
 80032da:	4688      	mov	r8, r1
 80032dc:	4681      	mov	r9, r0
 80032de:	eb12 0a08 	adds.w	sl, r2, r8
 80032e2:	eb43 0b09 	adc.w	fp, r3, r9
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032f4:	4650      	mov	r0, sl
 80032f6:	4659      	mov	r1, fp
 80032f8:	f7fc ff6a 	bl	80001d0 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800330a:	d308      	bcc.n	800331e <UART_SetConfig+0x3de>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003312:	d204      	bcs.n	800331e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	e0b6      	b.n	800348c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003324:	e0b2      	b.n	800348c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332e:	d15e      	bne.n	80033ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003330:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x44a>
 8003338:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <UART_SetConfig+0x400>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fd5e 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e014      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fd70 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b4d      	ldr	r3, [pc, #308]	@ (80034ac <UART_SetConfig+0x56c>)
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e00d      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fcbb 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 800337e:	61f8      	str	r0, [r7, #28]
        break;
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d077      	beq.n	800348c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005a      	lsls	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d916      	bls.n	80033e6 <UART_SetConfig+0x4a6>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033be:	d212      	bcs.n	80033e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	4313      	orrs	r3, r2
 80033da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	8afa      	ldrh	r2, [r7, #22]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e052      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033ec:	e04e      	b.n	800348c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d827      	bhi.n	8003446 <UART_SetConfig+0x506>
 80033f6:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <UART_SetConfig+0x4bc>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003421 	.word	0x08003421
 8003400:	08003429 	.word	0x08003429
 8003404:	08003431 	.word	0x08003431
 8003408:	08003447 	.word	0x08003447
 800340c:	08003437 	.word	0x08003437
 8003410:	08003447 	.word	0x08003447
 8003414:	08003447 	.word	0x08003447
 8003418:	08003447 	.word	0x08003447
 800341c:	0800343f 	.word	0x0800343f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fd00 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e014      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003428:	f7fe fd12 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 800342c:	61f8      	str	r0, [r7, #28]
        break;
 800342e:	e010      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <UART_SetConfig+0x56c>)
 8003432:	61fb      	str	r3, [r7, #28]
        break;
 8003434:	e00d      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003436:	f7fe fc5d 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 800343a:	61f8      	str	r0, [r7, #28]
        break;
 800343c:	e009      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003442:	61fb      	str	r3, [r7, #28]
        break;
 8003444:	e005      	b.n	8003452 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003450:	bf00      	nop
    }

    if (pclk != 0U)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085a      	lsrs	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d909      	bls.n	8003486 <UART_SetConfig+0x546>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e002      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003498:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40008000 	.word	0x40008000
 80034ac:	00f42400 	.word	0x00f42400

080034b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ae:	d10a      	bne.n	80035c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b098      	sub	sp, #96	@ 0x60
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003604:	f7fd fb86 	bl	8000d14 <HAL_GetTick>
 8003608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d12e      	bne.n	8003676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f88c 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d021      	beq.n	8003676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003646:	653b      	str	r3, [r7, #80]	@ 0x50
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003650:	647b      	str	r3, [r7, #68]	@ 0x44
 8003652:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800365e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e062      	b.n	800373c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d149      	bne.n	8003718 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003684:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f856 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	623b      	str	r3, [r7, #32]
   return(result);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	617b      	str	r3, [r7, #20]
   return(result);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e011      	b.n	800373c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3758      	adds	r7, #88	@ 0x58
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003754:	e04f      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d04b      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd fad9 	bl	8000d14 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <UART_WaitOnFlagUntilTimeout+0x30>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e04e      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d037      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b80      	cmp	r3, #128	@ 0x80
 800378a:	d034      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d031      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d110      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2208      	movs	r2, #8
 80037a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f838 	bl	800381e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2208      	movs	r2, #8
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e029      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d111      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f81e 	bl	800381e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0a0      	beq.n	8003756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381e:	b480      	push	{r7}
 8003820:	b095      	sub	sp, #84	@ 0x54
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003844:	643b      	str	r3, [r7, #64]	@ 0x40
 8003846:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800384a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	61fb      	str	r3, [r7, #28]
   return(result);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	2b01      	cmp	r3, #1
 8003892:	d118      	bne.n	80038c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e6      	bne.n	8003894 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038da:	bf00      	nop
 80038dc:	3754      	adds	r7, #84	@ 0x54
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f8:	2b84      	cmp	r3, #132	@ 0x84
 80038fa:	d005      	beq.n	8003908 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	3303      	adds	r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003908:	68fb      	ldr	r3, [r7, #12]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800391c:	f3ef 8305 	mrs	r3, IPSR
 8003920:	607b      	str	r3, [r7, #4]
  return(result);
 8003922:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800393e:	f001 f973 	bl	8004c28 <vTaskStartScheduler>
  
  return osOK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}

08003948 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b089      	sub	sp, #36	@ 0x24
 800394c:	af04      	add	r7, sp, #16
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d020      	beq.n	800399c <osThreadCreate+0x54>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01c      	beq.n	800399c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685c      	ldr	r4, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691e      	ldr	r6, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ffb6 	bl	80038e6 <makeFreeRtosPriority>
 800397a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	9100      	str	r1, [sp, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	4632      	mov	r2, r6
 800398e:	4629      	mov	r1, r5
 8003990:	4620      	mov	r0, r4
 8003992:	f000 ff63 	bl	800485c <xTaskCreateStatic>
 8003996:	4603      	mov	r3, r0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e01c      	b.n	80039d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685c      	ldr	r4, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff98 	bl	80038e6 <makeFreeRtosPriority>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	9200      	str	r2, [sp, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4632      	mov	r2, r6
 80039c4:	4629      	mov	r1, r5
 80039c6:	4620      	mov	r0, r4
 80039c8:	f000 ffa8 	bl	800491c <xTaskCreate>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d001      	beq.n	80039d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <osDelay+0x16>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e000      	b.n	80039f8 <osDelay+0x18>
 80039f6:	2301      	movs	r3, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f8df 	bl	8004bbc <vTaskDelay>
  
  return osOK;
 80039fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f000 fab5 	bl	8003f8e <xQueueCreateMutexStatic>
 8003a24:	4603      	mov	r3, r0
 8003a26:	e003      	b.n	8003a30 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f000 fa98 	bl	8003f5e <xQueueCreateMutex>
 8003a2e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <osMutexWait+0x18>
    return osErrorParameter;
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	e03a      	b.n	8003ac6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d103      	bne.n	8003a64 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e009      	b.n	8003a78 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <osMutexWait+0x40>
      ticks = 1;
 8003a74:	2301      	movs	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a78:	f7ff ff4d 	bl	8003916 <inHandlerMode>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d017      	beq.n	8003ab2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	461a      	mov	r2, r3
 8003a88:	2100      	movs	r1, #0
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fd3c 	bl	8004508 <xQueueReceiveFromISR>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <osMutexWait+0x62>
      return osErrorOS;
 8003a96:	23ff      	movs	r3, #255	@ 0xff
 8003a98:	e015      	b.n	8003ac6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d011      	beq.n	8003ac4 <osMutexWait+0x8c>
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <osMutexWait+0x98>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	e008      	b.n	8003ac4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003ab2:	68f9      	ldr	r1, [r7, #12]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fc17 	bl	80042e8 <xQueueSemaphoreTake>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <osMutexWait+0x8c>
    return osErrorOS;
 8003ac0:	23ff      	movs	r3, #255	@ 0xff
 8003ac2:	e000      	b.n	8003ac6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003ae4:	f7ff ff17 	bl	8003916 <inHandlerMode>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb67 	bl	80041c8 <xQueueGiveFromISR>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <osMutexRelease+0x30>
      return osErrorOS;
 8003b00:	23ff      	movs	r3, #255	@ 0xff
 8003b02:	e017      	b.n	8003b34 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <osMutexRelease+0x5e>
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <osMutexRelease+0x68>)
 8003b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	e00a      	b.n	8003b32 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2100      	movs	r1, #0
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa4e 	bl	8003fc4 <xQueueGenericSend>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003b2e:	23ff      	movs	r3, #255	@ 0xff
 8003b30:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f103 0208 	add.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295
 8003b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0208 	add.w	r2, r3, #8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f103 0208 	add.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d103      	bne.n	8003c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e00c      	b.n	8003c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3308      	adds	r3, #8
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e002      	b.n	8003c10 <vListInsert+0x2e>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d2f6      	bcs.n	8003c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6852      	ldr	r2, [r2, #4]
 8003c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d103      	bne.n	8003c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1e5a      	subs	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cd4:	f001 ff20 	bl	8005b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	3b01      	subs	r3, #1
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	441a      	add	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	22ff      	movs	r2, #255	@ 0xff
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	22ff      	movs	r2, #255	@ 0xff
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d114      	bne.n	8003d54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01a      	beq.n	8003d68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3310      	adds	r3, #16
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f9d0 	bl	80050dc <xTaskRemoveFromEventList>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <xQueueGenericReset+0xd0>)
 8003d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	e009      	b.n	8003d68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3310      	adds	r3, #16
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fef1 	bl	8003b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3324      	adds	r3, #36	@ 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff feec 	bl	8003b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d68:	f001 ff08 	bl	8005b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d6c:	2301      	movs	r3, #1
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	@ 0x38
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <xQueueGenericCreateStatic+0x56>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <xQueueGenericCreateStatic+0x5a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericCreateStatic+0x5c>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	623b      	str	r3, [r7, #32]
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <xQueueGenericCreateStatic+0x84>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <xQueueGenericCreateStatic+0x88>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <xQueueGenericCreateStatic+0x8a>
 8003e04:	2300      	movs	r3, #0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61fb      	str	r3, [r7, #28]
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e22:	2348      	movs	r3, #72	@ 0x48
 8003e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b48      	cmp	r3, #72	@ 0x48
 8003e2a:	d00b      	beq.n	8003e44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61bb      	str	r3, [r7, #24]
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f840 	bl	8003eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3730      	adds	r7, #48	@ 0x30
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08a      	sub	sp, #40	@ 0x28
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	613b      	str	r3, [r7, #16]
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	e7fd      	b.n	8003e9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3348      	adds	r3, #72	@ 0x48
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 ff53 	bl	8005d5c <pvPortMalloc>
 8003eb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d011      	beq.n	8003ee2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3348      	adds	r3, #72	@ 0x48
 8003ec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ed0:	79fa      	ldrb	r2, [r7, #7]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f805 	bl	8003eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e002      	b.n	8003f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	69b8      	ldr	r0, [r7, #24]
 8003f1e:	f7ff fec3 	bl	8003ca8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f837 	bl	8003fc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6939      	ldr	r1, [r7, #16]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff7d 	bl	8003e76 <xQueueGenericCreate>
 8003f7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff ffd3 	bl	8003f2a <prvInitialiseMutex>

		return xNewQueue;
 8003f84:	68fb      	ldr	r3, [r7, #12]
	}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	4603      	mov	r3, r0
 8003f96:	6039      	str	r1, [r7, #0]
 8003f98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	6939      	ldr	r1, [r7, #16]
 8003fac:	6978      	ldr	r0, [r7, #20]
 8003fae:	f7ff fee5 	bl	8003d7c <xQueueGenericCreateStatic>
 8003fb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ffb8 	bl	8003f2a <prvInitialiseMutex>

		return xNewQueue;
 8003fba:	68fb      	ldr	r3, [r7, #12]
	}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08e      	sub	sp, #56	@ 0x38
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <xQueueGenericSend+0x34>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <xQueueGenericSend+0x42>
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <xQueueGenericSend+0x46>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueGenericSend+0x48>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueGenericSend+0x64>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d103      	bne.n	8004036 <xQueueGenericSend+0x72>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <xQueueGenericSend+0x76>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSend+0x78>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericSend+0x94>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	623b      	str	r3, [r7, #32]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004058:	f001 fa06 	bl	8005468 <xTaskGetSchedulerState>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <xQueueGenericSend+0xa4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSend+0xa8>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSend+0xaa>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <xQueueGenericSend+0xc6>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61fb      	str	r3, [r7, #28]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800408a:	f001 fd45 	bl	8005b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <xQueueGenericSend+0xdc>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d129      	bne.n	80040f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a6:	f000 fac9 	bl	800463c <prvCopyDataToQueue>
 80040aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	3324      	adds	r3, #36	@ 0x24
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f80f 	bl	80050dc <xTaskRemoveFromEventList>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040c4:	4b3f      	ldr	r3, [pc, #252]	@ (80041c4 <xQueueGenericSend+0x200>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	e00a      	b.n	80040ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040dc:	4b39      	ldr	r3, [pc, #228]	@ (80041c4 <xQueueGenericSend+0x200>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040ec:	f001 fd46 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e063      	b.n	80041bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040fa:	f001 fd3f 	bl	8005b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	e05c      	b.n	80041bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f849 	bl	80051a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004116:	f001 fd31 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800411a:	f000 fdef 	bl	8004cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800411e:	f001 fcfb 	bl	8005b18 <vPortEnterCritical>
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004128:	b25b      	sxtb	r3, r3
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d103      	bne.n	8004138 <xQueueGenericSend+0x174>
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800413e:	b25b      	sxtb	r3, r3
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d103      	bne.n	800414e <xQueueGenericSend+0x18a>
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800414e:	f001 fd15 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004152:	1d3a      	adds	r2, r7, #4
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f838 	bl	80051d0 <xTaskCheckForTimeOut>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d124      	bne.n	80041b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004168:	f000 fb60 	bl	800482c <prvIsQueueFull>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	3310      	adds	r3, #16
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 ff88 	bl	8005090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004182:	f000 faeb 	bl	800475c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004186:	f000 fdc7 	bl	8004d18 <xTaskResumeAll>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f af7c 	bne.w	800408a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <xQueueGenericSend+0x200>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	e772      	b.n	800408a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041a6:	f000 fad9 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041aa:	f000 fdb5 	bl	8004d18 <xTaskResumeAll>
 80041ae:	e76c      	b.n	800408a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041b2:	f000 fad3 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041b6:	f000 fdaf 	bl	8004d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3738      	adds	r7, #56	@ 0x38
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	@ 0x38
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	623b      	str	r3, [r7, #32]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	61fb      	str	r3, [r7, #28]
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <xQueueGiveFromISR+0x5c>
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <xQueueGiveFromISR+0x60>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <xQueueGiveFromISR+0x62>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	61bb      	str	r3, [r7, #24]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004246:	f001 fd47 	bl	8005cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800424a:	f3ef 8211 	mrs	r2, BASEPRI
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617a      	str	r2, [r7, #20]
 8004260:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004262:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004272:	429a      	cmp	r2, r3
 8004274:	d22b      	bcs.n	80042ce <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004288:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d112      	bne.n	80042b8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	3324      	adds	r3, #36	@ 0x24
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 ff1c 	bl	80050dc <xTaskRemoveFromEventList>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00e      	beq.n	80042c8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e007      	b.n	80042c8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042bc:	3301      	adds	r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	b25a      	sxtb	r2, r3
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042c8:	2301      	movs	r3, #1
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	e001      	b.n	80042d2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3738      	adds	r7, #56	@ 0x38
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	@ 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fb      	str	r3, [r7, #28]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800433c:	f001 f894 	bl	8005468 <xTaskGetSchedulerState>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <xQueueSemaphoreTake+0x64>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueSemaphoreTake+0x68>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueSemaphoreTake+0x6a>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61bb      	str	r3, [r7, #24]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800436e:	f001 fbd3 	bl	8005b18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	1e5a      	subs	r2, r3, #1
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800438e:	f001 fa17 	bl	80057c0 <pvTaskIncrementMutexHeldCount>
 8004392:	4602      	mov	r2, r0
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fe99 	bl	80050dc <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043b0:	4b54      	ldr	r3, [pc, #336]	@ (8004504 <xQueueSemaphoreTake+0x21c>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043c0:	f001 fbdc 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e098      	b.n	80044fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d112      	bne.n	80043f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	617b      	str	r3, [r7, #20]
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043ec:	f001 fbc6 	bl	8005b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e082      	b.n	80044fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fed0 	bl	80051a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004408:	f001 fbb8 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800440c:	f000 fc76 	bl	8004cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004410:	f001 fb82 	bl	8005b18 <vPortEnterCritical>
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800441a:	b25b      	sxtb	r3, r3
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <xQueueSemaphoreTake+0x142>
 8004422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004430:	b25b      	sxtb	r3, r3
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d103      	bne.n	8004440 <xQueueSemaphoreTake+0x158>
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004440:	f001 fb9c 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004444:	463a      	mov	r2, r7
 8004446:	f107 030c 	add.w	r3, r7, #12
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f000 febf 	bl	80051d0 <xTaskCheckForTimeOut>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d132      	bne.n	80044be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800445a:	f000 f9d1 	bl	8004800 <prvIsQueueEmpty>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d026      	beq.n	80044b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800446c:	f001 fb54 	bl	8005b18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4618      	mov	r0, r3
 8004476:	f001 f815 	bl	80054a4 <xTaskPriorityInherit>
 800447a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800447c:	f001 fb7e 	bl	8005b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004482:	3324      	adds	r3, #36	@ 0x24
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fe01 	bl	8005090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800448e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004490:	f000 f964 	bl	800475c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004494:	f000 fc40 	bl	8004d18 <xTaskResumeAll>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f47f af67 	bne.w	800436e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80044a0:	4b18      	ldr	r3, [pc, #96]	@ (8004504 <xQueueSemaphoreTake+0x21c>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	e75d      	b.n	800436e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044b4:	f000 f952 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b8:	f000 fc2e 	bl	8004d18 <xTaskResumeAll>
 80044bc:	e757      	b.n	800436e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044c0:	f000 f94c 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044c4:	f000 fc28 	bl	8004d18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044ca:	f000 f999 	bl	8004800 <prvIsQueueEmpty>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f43f af4c 	beq.w	800436e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044dc:	f001 fb1c 	bl	8005b18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044e2:	f000 f893 	bl	800460c <prvGetDisinheritPriorityAfterTimeout>
 80044e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f8d6 	bl	80056a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044f4:	f001 fb42 	bl	8005b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3738      	adds	r7, #56	@ 0x38
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	@ 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	623b      	str	r3, [r7, #32]
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <xQueueReceiveFromISR+0x3c>
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xQueueReceiveFromISR+0x40>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xQueueReceiveFromISR+0x42>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61fb      	str	r3, [r7, #28]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004566:	f001 fbb7 	bl	8005cd8 <vPortValidateInterruptPriority>
	__asm volatile
 800456a:	f3ef 8211 	mrs	r2, BASEPRI
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61ba      	str	r2, [r7, #24]
 8004580:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004582:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004584:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d02f      	beq.n	80045f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a0:	f000 f8b6 	bl	8004710 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80045ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d112      	bne.n	80045dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	3310      	adds	r3, #16
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd8a 	bl	80050dc <xTaskRemoveFromEventList>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e007      	b.n	80045ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	b25a      	sxtb	r2, r3
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80045ec:	2301      	movs	r3, #1
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	e001      	b.n	80045f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f383 8811 	msr	BASEPRI, r3
}
 8004600:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004604:	4618      	mov	r0, r3
 8004606:	3738      	adds	r7, #56	@ 0x38
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d006      	beq.n	800462a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800462e:	68fb      	ldr	r3, [r7, #12]
	}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14d      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 ff92 	bl	8005590 <xTaskPriorityDisinherit>
 800466c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	e043      	b.n	80046fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d119      	bne.n	80046b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6858      	ldr	r0, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	461a      	mov	r2, r3
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	f001 fdda 	bl	8006240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d32b      	bcc.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e026      	b.n	80046fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68d8      	ldr	r0, [r3, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	461a      	mov	r2, r3
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	f001 fdc0 	bl	8006240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	425b      	negs	r3, r3
 80046ca:	441a      	add	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d207      	bcs.n	80046ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	425b      	negs	r3, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d105      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	d303      	bcc.n	8004744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68d9      	ldr	r1, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	461a      	mov	r2, r3
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f001 fd76 	bl	8006240 <memcpy>
	}
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004764:	f001 f9d8 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800476e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004770:	e011      	b.n	8004796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3324      	adds	r3, #36	@ 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fcac 	bl	80050dc <xTaskRemoveFromEventList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800478a:	f000 fd85 	bl	8005298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3b01      	subs	r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dce9      	bgt.n	8004772 <prvUnlockQueue+0x16>
 800479e:	e000      	b.n	80047a2 <prvUnlockQueue+0x46>
					break;
 80047a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	22ff      	movs	r2, #255	@ 0xff
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047aa:	f001 f9e7 	bl	8005b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ae:	f001 f9b3 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ba:	e011      	b.n	80047e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3310      	adds	r3, #16
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fc87 	bl	80050dc <xTaskRemoveFromEventList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047d4:	f000 fd60 	bl	8005298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d8:	7bbb      	ldrb	r3, [r7, #14]
 80047da:	3b01      	subs	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dce9      	bgt.n	80047bc <prvUnlockQueue+0x60>
 80047e8:	e000      	b.n	80047ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	22ff      	movs	r2, #255	@ 0xff
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047f4:	f001 f9c2 	bl	8005b7c <vPortExitCritical>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004808:	f001 f986 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481e:	f001 f9ad 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004834:	f001 f970 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	429a      	cmp	r2, r3
 8004842:	d102      	bne.n	800484a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e001      	b.n	800484e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484e:	f001 f995 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	@ 0x38
 8004860:	af04      	add	r7, sp, #16
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	61fb      	str	r3, [r7, #28]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048a6:	23a0      	movs	r3, #160	@ 0xa0
 80048a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80048ae:	d00b      	beq.n	80048c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61bb      	str	r3, [r7, #24]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01e      	beq.n	800490e <xTaskCreateStatic+0xb2>
 80048d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01b      	beq.n	800490e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048e8:	2300      	movs	r3, #0
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f851 	bl	80049a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004908:	f000 f8ee 	bl	8004ae8 <prvAddNewTaskToReadyList>
 800490c:	e001      	b.n	8004912 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004912:	697b      	ldr	r3, [r7, #20]
	}
 8004914:	4618      	mov	r0, r3
 8004916:	3728      	adds	r7, #40	@ 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af04      	add	r7, sp, #16
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fa13 	bl	8005d5c <pvPortMalloc>
 8004936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800493e:	20a0      	movs	r0, #160	@ 0xa0
 8004940:	f001 fa0c 	bl	8005d5c <pvPortMalloc>
 8004944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30
 8004952:	e005      	b.n	8004960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004954:	6978      	ldr	r0, [r7, #20]
 8004956:	f001 facf 	bl	8005ef8 <vPortFree>
 800495a:	e001      	b.n	8004960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d017      	beq.n	8004996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	2300      	movs	r3, #0
 8004972:	9303      	str	r3, [sp, #12]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	9302      	str	r3, [sp, #8]
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f80f 	bl	80049a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800498a:	69f8      	ldr	r0, [r7, #28]
 800498c:	f000 f8ac 	bl	8004ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004990:	2301      	movs	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e002      	b.n	800499c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800499c:	69bb      	ldr	r3, [r7, #24]
	}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049c0:	3b01      	subs	r3, #1
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	617b      	str	r3, [r7, #20]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01f      	beq.n	8004a38 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e012      	b.n	8004a24 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	7819      	ldrb	r1, [r3, #0]
 8004a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3334      	adds	r3, #52	@ 0x34
 8004a0e:	460a      	mov	r2, r1
 8004a10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d9e9      	bls.n	80049fe <prvInitialiseNewTask+0x56>
 8004a2a:	e000      	b.n	8004a2e <prvInitialiseNewTask+0x86>
			{
				break;
 8004a2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a36:	e003      	b.n	8004a40 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d901      	bls.n	8004a4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a46:	2306      	movs	r3, #6
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	2200      	movs	r2, #0
 8004a5a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff f88d 	bl	8003b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f888 	bl	8003b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	f1c3 0207 	rsb	r2, r3, #7
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	334c      	adds	r3, #76	@ 0x4c
 8004a9a:	224c      	movs	r2, #76	@ 0x4c
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fb4a 	bl	8006138 <memset>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8004adc <prvInitialiseNewTask+0x134>)
 8004aa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae0 <prvInitialiseNewTask+0x138>)
 8004aae:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae4 <prvInitialiseNewTask+0x13c>)
 8004ab4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	69b8      	ldr	r0, [r7, #24]
 8004abc:	f000 fefa 	bl	80058b4 <pxPortInitialiseStack>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad2:	bf00      	nop
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20001178 	.word	0x20001178
 8004ae0:	200011e0 	.word	0x200011e0
 8004ae4:	20001248 	.word	0x20001248

08004ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004af0:	f001 f812 	bl	8005b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba0 <prvAddNewTaskToReadyList+0xb8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a29      	ldr	r2, [pc, #164]	@ (8004ba0 <prvAddNewTaskToReadyList+0xb8>)
 8004afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004afe:	4b29      	ldr	r3, [pc, #164]	@ (8004ba4 <prvAddNewTaskToReadyList+0xbc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b06:	4a27      	ldr	r2, [pc, #156]	@ (8004ba4 <prvAddNewTaskToReadyList+0xbc>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ba0 <prvAddNewTaskToReadyList+0xb8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d110      	bne.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b14:	f000 fbe4 	bl	80052e0 <prvInitialiseTaskLists>
 8004b18:	e00d      	b.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b22:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <prvAddNewTaskToReadyList+0xbc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d802      	bhi.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba4 <prvAddNewTaskToReadyList+0xbc>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b36:	4b1d      	ldr	r3, [pc, #116]	@ (8004bac <prvAddNewTaskToReadyList+0xc4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <prvAddNewTaskToReadyList+0xc4>)
 8004b3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	2201      	movs	r2, #1
 8004b46:	409a      	lsls	r2, r3
 8004b48:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <prvAddNewTaskToReadyList+0xcc>)
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7ff f816 	bl	8003b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b6e:	f001 f805 	bl	8005b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <prvAddNewTaskToReadyList+0xbc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d207      	bcs.n	8004b98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <prvAddNewTaskToReadyList+0xd0>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	2000056c 	.word	0x2000056c
 8004ba4:	2000046c 	.word	0x2000046c
 8004ba8:	20000578 	.word	0x20000578
 8004bac:	20000588 	.word	0x20000588
 8004bb0:	20000574 	.word	0x20000574
 8004bb4:	20000470 	.word	0x20000470
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d018      	beq.n	8004c00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bce:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <vTaskDelay+0x64>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <vTaskDelay+0x32>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bee:	f000 f885 	bl	8004cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fdf7 	bl	80057e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bfa:	f000 f88d 	bl	8004d18 <xTaskResumeAll>
 8004bfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <vTaskDelay+0x68>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000594 	.word	0x20000594
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	@ 0x28
 8004c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c36:	463a      	mov	r2, r7
 8004c38:	1d39      	adds	r1, r7, #4
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fb fc3e 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	9202      	str	r2, [sp, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	460a      	mov	r2, r1
 8004c56:	4921      	ldr	r1, [pc, #132]	@ (8004cdc <vTaskStartScheduler+0xb4>)
 8004c58:	4821      	ldr	r0, [pc, #132]	@ (8004ce0 <vTaskStartScheduler+0xb8>)
 8004c5a:	f7ff fdff 	bl	800485c <xTaskCreateStatic>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a20      	ldr	r2, [pc, #128]	@ (8004ce4 <vTaskStartScheduler+0xbc>)
 8004c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <vTaskStartScheduler+0xbc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e001      	b.n	8004c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d11b      	bne.n	8004cb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	613b      	str	r3, [r7, #16]
}
 8004c8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c90:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <vTaskStartScheduler+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	334c      	adds	r3, #76	@ 0x4c
 8004c96:	4a15      	ldr	r2, [pc, #84]	@ (8004cec <vTaskStartScheduler+0xc4>)
 8004c98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c9a:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <vTaskStartScheduler+0xc8>)
 8004c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ca2:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <vTaskStartScheduler+0xcc>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ca8:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <vTaskStartScheduler+0xd0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cae:	f000 fe8f 	bl	80059d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cb2:	e00f      	b.n	8004cd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d10b      	bne.n	8004cd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	60fb      	str	r3, [r7, #12]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <vTaskStartScheduler+0xa8>
}
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	08006398 	.word	0x08006398
 8004ce0:	080052b1 	.word	0x080052b1
 8004ce4:	20000590 	.word	0x20000590
 8004ce8:	2000046c 	.word	0x2000046c
 8004cec:	20000010 	.word	0x20000010
 8004cf0:	2000058c 	.word	0x2000058c
 8004cf4:	20000578 	.word	0x20000578
 8004cf8:	20000570 	.word	0x20000570

08004cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <vTaskSuspendAll+0x18>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a03      	ldr	r2, [pc, #12]	@ (8004d14 <vTaskSuspendAll+0x18>)
 8004d08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000594 	.word	0x20000594

08004d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d26:	4b42      	ldr	r3, [pc, #264]	@ (8004e30 <xTaskResumeAll+0x118>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <xTaskResumeAll+0x2e>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	603b      	str	r3, [r7, #0]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d46:	f000 fee7 	bl	8005b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d4a:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <xTaskResumeAll+0x118>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4a37      	ldr	r2, [pc, #220]	@ (8004e30 <xTaskResumeAll+0x118>)
 8004d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d54:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <xTaskResumeAll+0x118>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d161      	bne.n	8004e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d5c:	4b35      	ldr	r3, [pc, #212]	@ (8004e34 <xTaskResumeAll+0x11c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05d      	beq.n	8004e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d64:	e02e      	b.n	8004dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d66:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <xTaskResumeAll+0x120>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3318      	adds	r3, #24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe ff6e 	bl	8003c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe ff69 	bl	8003c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	2201      	movs	r2, #1
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e3c <xTaskResumeAll+0x124>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <xTaskResumeAll+0x124>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4a27      	ldr	r2, [pc, #156]	@ (8004e40 <xTaskResumeAll+0x128>)
 8004da2:	441a      	add	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fe fef5 	bl	8003b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <xTaskResumeAll+0x12c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004dbe:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <xTaskResumeAll+0x130>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <xTaskResumeAll+0x120>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1cc      	bne.n	8004d66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dd2:	f000 fb29 	bl	8005428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <xTaskResumeAll+0x134>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004de2:	f000 f837 	bl	8004e54 <xTaskIncrementTick>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004dec:	4b16      	ldr	r3, [pc, #88]	@ (8004e48 <xTaskResumeAll+0x130>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f1      	bne.n	8004de2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004dfe:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <xTaskResumeAll+0x134>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e04:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <xTaskResumeAll+0x130>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e10:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <xTaskResumeAll+0x138>)
 8004e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e20:	f000 feac 	bl	8005b7c <vPortExitCritical>

	return xAlreadyYielded;
 8004e24:	68bb      	ldr	r3, [r7, #8]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000594 	.word	0x20000594
 8004e34:	2000056c 	.word	0x2000056c
 8004e38:	2000052c 	.word	0x2000052c
 8004e3c:	20000574 	.word	0x20000574
 8004e40:	20000470 	.word	0x20000470
 8004e44:	2000046c 	.word	0x2000046c
 8004e48:	20000580 	.word	0x20000580
 8004e4c:	2000057c 	.word	0x2000057c
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f9c <xTaskIncrementTick+0x148>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 808f 	bne.w	8004f86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e68:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa0 <xTaskIncrementTick+0x14c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e70:	4a4b      	ldr	r2, [pc, #300]	@ (8004fa0 <xTaskIncrementTick+0x14c>)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d121      	bne.n	8004ec0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e7c:	4b49      	ldr	r3, [pc, #292]	@ (8004fa4 <xTaskIncrementTick+0x150>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	603b      	str	r3, [r7, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <xTaskIncrementTick+0x46>
 8004e9e:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <xTaskIncrementTick+0x150>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	4b40      	ldr	r3, [pc, #256]	@ (8004fa8 <xTaskIncrementTick+0x154>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa4 <xTaskIncrementTick+0x150>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <xTaskIncrementTick+0x154>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fac <xTaskIncrementTick+0x158>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fac <xTaskIncrementTick+0x158>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	f000 fab4 	bl	8005428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb0 <xTaskIncrementTick+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d348      	bcc.n	8004f5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eca:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <xTaskIncrementTick+0x150>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed4:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <xTaskIncrementTick+0x15c>)
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
					break;
 8004edc:	e03e      	b.n	8004f5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <xTaskIncrementTick+0x150>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d203      	bcs.n	8004efe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb0 <xTaskIncrementTick+0x15c>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004efc:	e02e      	b.n	8004f5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fea6 	bl	8003c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	3318      	adds	r3, #24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fe9d 	bl	8003c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	2201      	movs	r2, #1
 8004f20:	409a      	lsls	r2, r3
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <xTaskIncrementTick+0x160>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	4a22      	ldr	r2, [pc, #136]	@ (8004fb4 <xTaskIncrementTick+0x160>)
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <xTaskIncrementTick+0x164>)
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fe fe29 	bl	8003b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <xTaskIncrementTick+0x168>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d3b9      	bcc.n	8004eca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5a:	e7b6      	b.n	8004eca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f5c:	4b17      	ldr	r3, [pc, #92]	@ (8004fbc <xTaskIncrementTick+0x168>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	4915      	ldr	r1, [pc, #84]	@ (8004fb8 <xTaskIncrementTick+0x164>)
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d901      	bls.n	8004f78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f78:	4b11      	ldr	r3, [pc, #68]	@ (8004fc0 <xTaskIncrementTick+0x16c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e004      	b.n	8004f90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <xTaskIncrementTick+0x170>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc4 <xTaskIncrementTick+0x170>)
 8004f8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f90:	697b      	ldr	r3, [r7, #20]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000594 	.word	0x20000594
 8004fa0:	20000570 	.word	0x20000570
 8004fa4:	20000524 	.word	0x20000524
 8004fa8:	20000528 	.word	0x20000528
 8004fac:	20000584 	.word	0x20000584
 8004fb0:	2000058c 	.word	0x2000058c
 8004fb4:	20000574 	.word	0x20000574
 8004fb8:	20000470 	.word	0x20000470
 8004fbc:	2000046c 	.word	0x2000046c
 8004fc0:	20000580 	.word	0x20000580
 8004fc4:	2000057c 	.word	0x2000057c

08004fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fce:	4b2a      	ldr	r3, [pc, #168]	@ (8005078 <vTaskSwitchContext+0xb0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fd6:	4b29      	ldr	r3, [pc, #164]	@ (800507c <vTaskSwitchContext+0xb4>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fdc:	e045      	b.n	800506a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004fde:	4b27      	ldr	r3, [pc, #156]	@ (800507c <vTaskSwitchContext+0xb4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe4:	4b26      	ldr	r3, [pc, #152]	@ (8005080 <vTaskSwitchContext+0xb8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	fab3 f383 	clz	r3, r3
 8004ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	f1c3 031f 	rsb	r3, r3, #31
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	4922      	ldr	r1, [pc, #136]	@ (8005084 <vTaskSwitchContext+0xbc>)
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <vTaskSwitchContext+0x5e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vTaskSwitchContext+0x5a>
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a14      	ldr	r2, [pc, #80]	@ (8005084 <vTaskSwitchContext+0xbc>)
 8005032:	4413      	add	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3308      	adds	r3, #8
 8005048:	429a      	cmp	r2, r3
 800504a:	d104      	bne.n	8005056 <vTaskSwitchContext+0x8e>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a0a      	ldr	r2, [pc, #40]	@ (8005088 <vTaskSwitchContext+0xc0>)
 800505e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005060:	4b09      	ldr	r3, [pc, #36]	@ (8005088 <vTaskSwitchContext+0xc0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	334c      	adds	r3, #76	@ 0x4c
 8005066:	4a09      	ldr	r2, [pc, #36]	@ (800508c <vTaskSwitchContext+0xc4>)
 8005068:	6013      	str	r3, [r2, #0]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000594 	.word	0x20000594
 800507c:	20000580 	.word	0x20000580
 8005080:	20000574 	.word	0x20000574
 8005084:	20000470 	.word	0x20000470
 8005088:	2000046c 	.word	0x2000046c
 800508c:	20000010 	.word	0x20000010

08005090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b8:	4b07      	ldr	r3, [pc, #28]	@ (80050d8 <vTaskPlaceOnEventList+0x48>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3318      	adds	r3, #24
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fe fd8e 	bl	8003be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050c6:	2101      	movs	r1, #1
 80050c8:	6838      	ldr	r0, [r7, #0]
 80050ca:	f000 fb8d 	bl	80057e8 <prvAddCurrentTaskToDelayedList>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	2000046c 	.word	0x2000046c

080050dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	60fb      	str	r3, [r7, #12]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3318      	adds	r3, #24
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fda0 	bl	8003c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005114:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <xTaskRemoveFromEventList+0xb0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11c      	bne.n	8005156 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fd97 	bl	8003c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	2201      	movs	r2, #1
 800512c:	409a      	lsls	r2, r3
 800512e:	4b18      	ldr	r3, [pc, #96]	@ (8005190 <xTaskRemoveFromEventList+0xb4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	4a16      	ldr	r2, [pc, #88]	@ (8005190 <xTaskRemoveFromEventList+0xb4>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a13      	ldr	r2, [pc, #76]	@ (8005194 <xTaskRemoveFromEventList+0xb8>)
 8005146:	441a      	add	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fe fd23 	bl	8003b9a <vListInsertEnd>
 8005154:	e005      	b.n	8005162 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3318      	adds	r3, #24
 800515a:	4619      	mov	r1, r3
 800515c:	480e      	ldr	r0, [pc, #56]	@ (8005198 <xTaskRemoveFromEventList+0xbc>)
 800515e:	f7fe fd1c 	bl	8003b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <xTaskRemoveFromEventList+0xc0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d905      	bls.n	800517c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005174:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <xTaskRemoveFromEventList+0xc4>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e001      	b.n	8005180 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005180:	697b      	ldr	r3, [r7, #20]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000594 	.word	0x20000594
 8005190:	20000574 	.word	0x20000574
 8005194:	20000470 	.word	0x20000470
 8005198:	2000052c 	.word	0x2000052c
 800519c:	2000046c 	.word	0x2000046c
 80051a0:	20000580 	.word	0x20000580

080051a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <vTaskInternalSetTimeOutState+0x24>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <vTaskInternalSetTimeOutState+0x28>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	605a      	str	r2, [r3, #4]
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	20000584 	.word	0x20000584
 80051cc:	20000570 	.word	0x20000570

080051d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60fb      	str	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005216:	f000 fc7f 	bl	8005b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800521a:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <xTaskCheckForTimeOut+0xc0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d102      	bne.n	800523a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	e023      	b.n	8005282 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <xTaskCheckForTimeOut+0xc4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d007      	beq.n	8005256 <xTaskCheckForTimeOut+0x86>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e015      	b.n	8005282 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	d20b      	bcs.n	8005278 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ff99 	bl	80051a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e004      	b.n	8005282 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f000 fc7b 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8005286:	69fb      	ldr	r3, [r7, #28]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000570 	.word	0x20000570
 8005294:	20000584 	.word	0x20000584

08005298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800529c:	4b03      	ldr	r3, [pc, #12]	@ (80052ac <vTaskMissedYield+0x14>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
}
 80052a2:	bf00      	nop
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000580 	.word	0x20000580

080052b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052b8:	f000 f852 	bl	8005360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <prvIdleTask+0x28>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d9f9      	bls.n	80052b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <prvIdleTask+0x2c>)
 80052c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052d4:	e7f0      	b.n	80052b8 <prvIdleTask+0x8>
 80052d6:	bf00      	nop
 80052d8:	20000470 	.word	0x20000470
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	e00c      	b.n	8005306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a12      	ldr	r2, [pc, #72]	@ (8005340 <prvInitialiseTaskLists+0x60>)
 80052f8:	4413      	add	r3, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fc20 	bl	8003b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3301      	adds	r3, #1
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d9ef      	bls.n	80052ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800530c:	480d      	ldr	r0, [pc, #52]	@ (8005344 <prvInitialiseTaskLists+0x64>)
 800530e:	f7fe fc17 	bl	8003b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005312:	480d      	ldr	r0, [pc, #52]	@ (8005348 <prvInitialiseTaskLists+0x68>)
 8005314:	f7fe fc14 	bl	8003b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005318:	480c      	ldr	r0, [pc, #48]	@ (800534c <prvInitialiseTaskLists+0x6c>)
 800531a:	f7fe fc11 	bl	8003b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800531e:	480c      	ldr	r0, [pc, #48]	@ (8005350 <prvInitialiseTaskLists+0x70>)
 8005320:	f7fe fc0e 	bl	8003b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005324:	480b      	ldr	r0, [pc, #44]	@ (8005354 <prvInitialiseTaskLists+0x74>)
 8005326:	f7fe fc0b 	bl	8003b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <prvInitialiseTaskLists+0x78>)
 800532c:	4a05      	ldr	r2, [pc, #20]	@ (8005344 <prvInitialiseTaskLists+0x64>)
 800532e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005330:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <prvInitialiseTaskLists+0x7c>)
 8005332:	4a05      	ldr	r2, [pc, #20]	@ (8005348 <prvInitialiseTaskLists+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000470 	.word	0x20000470
 8005344:	200004fc 	.word	0x200004fc
 8005348:	20000510 	.word	0x20000510
 800534c:	2000052c 	.word	0x2000052c
 8005350:	20000540 	.word	0x20000540
 8005354:	20000558 	.word	0x20000558
 8005358:	20000524 	.word	0x20000524
 800535c:	20000528 	.word	0x20000528

08005360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005366:	e019      	b.n	800539c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005368:	f000 fbd6 	bl	8005b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536c:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <prvCheckTasksWaitingTermination+0x50>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fc6b 	bl	8003c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800537e:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <prvCheckTasksWaitingTermination+0x54>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3b01      	subs	r3, #1
 8005384:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <prvCheckTasksWaitingTermination+0x54>)
 8005386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005388:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <prvCheckTasksWaitingTermination+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	4a0a      	ldr	r2, [pc, #40]	@ (80053b8 <prvCheckTasksWaitingTermination+0x58>)
 8005390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005392:	f000 fbf3 	bl	8005b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f810 	bl	80053bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <prvCheckTasksWaitingTermination+0x58>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e1      	bne.n	8005368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000540 	.word	0x20000540
 80053b4:	2000056c 	.word	0x2000056c
 80053b8:	20000554 	.word	0x20000554

080053bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	334c      	adds	r3, #76	@ 0x4c
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 febd 	bl	8006148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fd8b 	bl	8005ef8 <vPortFree>
				vPortFree( pxTCB );
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fd88 	bl	8005ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053e8:	e019      	b.n	800541e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d103      	bne.n	80053fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fd7f 	bl	8005ef8 <vPortFree>
	}
 80053fa:	e010      	b.n	800541e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005402:	2b02      	cmp	r3, #2
 8005404:	d00b      	beq.n	800541e <prvDeleteTCB+0x62>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <prvDeleteTCB+0x5e>
	}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542e:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <prvResetNextTaskUnblockTime+0x38>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005438:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <prvResetNextTaskUnblockTime+0x3c>)
 800543a:	f04f 32ff 	mov.w	r2, #4294967295
 800543e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005440:	e008      	b.n	8005454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005442:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <prvResetNextTaskUnblockTime+0x38>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a04      	ldr	r2, [pc, #16]	@ (8005464 <prvResetNextTaskUnblockTime+0x3c>)
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000524 	.word	0x20000524
 8005464:	2000058c 	.word	0x2000058c

08005468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800546e:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <xTaskGetSchedulerState+0x34>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005476:	2301      	movs	r3, #1
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	e008      	b.n	800548e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547c:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <xTaskGetSchedulerState+0x38>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005484:	2302      	movs	r3, #2
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	e001      	b.n	800548e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800548e:	687b      	ldr	r3, [r7, #4]
	}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000578 	.word	0x20000578
 80054a0:	20000594 	.word	0x20000594

080054a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d05e      	beq.n	8005578 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <xTaskPriorityInherit+0xe0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d24e      	bcs.n	8005566 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	db06      	blt.n	80054de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005584 <xTaskPriorityInherit+0xe0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	f1c3 0207 	rsb	r2, r3, #7
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6959      	ldr	r1, [r3, #20]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <xTaskPriorityInherit+0xe4>)
 80054f0:	4413      	add	r3, r2
 80054f2:	4299      	cmp	r1, r3
 80054f4:	d12f      	bne.n	8005556 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fbaa 	bl	8003c54 <uxListRemove>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43da      	mvns	r2, r3
 8005512:	4b1e      	ldr	r3, [pc, #120]	@ (800558c <xTaskPriorityInherit+0xe8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4013      	ands	r3, r2
 8005518:	4a1c      	ldr	r2, [pc, #112]	@ (800558c <xTaskPriorityInherit+0xe8>)
 800551a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800551c:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <xTaskPriorityInherit+0xe0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	4b17      	ldr	r3, [pc, #92]	@ (800558c <xTaskPriorityInherit+0xe8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	4a15      	ldr	r2, [pc, #84]	@ (800558c <xTaskPriorityInherit+0xe8>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a10      	ldr	r2, [pc, #64]	@ (8005588 <xTaskPriorityInherit+0xe4>)
 8005546:	441a      	add	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7fe fb23 	bl	8003b9a <vListInsertEnd>
 8005554:	e004      	b.n	8005560 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005556:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <xTaskPriorityInherit+0xe0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e008      	b.n	8005578 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <xTaskPriorityInherit+0xe0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	429a      	cmp	r2, r3
 8005572:	d201      	bcs.n	8005578 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005578:	68fb      	ldr	r3, [r7, #12]
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	2000046c 	.word	0x2000046c
 8005588:	20000470 	.word	0x20000470
 800558c:	20000574 	.word	0x20000574

08005590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d070      	beq.n	8005688 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005694 <xTaskPriorityDisinherit+0x104>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d00b      	beq.n	80055c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60bb      	str	r3, [r7, #8]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d044      	beq.n	8005688 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005602:	2b00      	cmp	r3, #0
 8005604:	d140      	bne.n	8005688 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fb22 	bl	8003c54 <uxListRemove>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d115      	bne.n	8005642 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	491f      	ldr	r1, [pc, #124]	@ (8005698 <xTaskPriorityDisinherit+0x108>)
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xTaskPriorityDisinherit+0xb2>
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	2201      	movs	r2, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43da      	mvns	r2, r3
 8005638:	4b18      	ldr	r3, [pc, #96]	@ (800569c <xTaskPriorityDisinherit+0x10c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4013      	ands	r3, r2
 800563e:	4a17      	ldr	r2, [pc, #92]	@ (800569c <xTaskPriorityDisinherit+0x10c>)
 8005640:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	f1c3 0207 	rsb	r2, r3, #7
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	2201      	movs	r2, #1
 800565c:	409a      	lsls	r2, r3
 800565e:	4b0f      	ldr	r3, [pc, #60]	@ (800569c <xTaskPriorityDisinherit+0x10c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <xTaskPriorityDisinherit+0x10c>)
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a08      	ldr	r2, [pc, #32]	@ (8005698 <xTaskPriorityDisinherit+0x108>)
 8005676:	441a      	add	r2, r3
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7fe fa8b 	bl	8003b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005688:	697b      	ldr	r3, [r7, #20]
	}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2000046c 	.word	0x2000046c
 8005698:	20000470 	.word	0x20000470
 800569c:	20000574 	.word	0x20000574

080056a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d079      	beq.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d902      	bls.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	e002      	b.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d059      	beq.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d154      	bne.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005702:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d10b      	bne.n	8005724 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	db04      	blt.n	8005742 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f1c3 0207 	rsb	r2, r3, #7
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	6959      	ldr	r1, [r3, #20]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4a19      	ldr	r2, [pc, #100]	@ (80057b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005752:	4413      	add	r3, r2
 8005754:	4299      	cmp	r1, r3
 8005756:	d129      	bne.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fa79 	bl	8003c54 <uxListRemove>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	2201      	movs	r2, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	4a10      	ldr	r2, [pc, #64]	@ (80057bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800577c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a0b      	ldr	r2, [pc, #44]	@ (80057bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a06      	ldr	r2, [pc, #24]	@ (80057b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800579e:	441a      	add	r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7fe f9f7 	bl	8003b9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2000046c 	.word	0x2000046c
 80057b8:	20000470 	.word	0x20000470
 80057bc:	20000574 	.word	0x20000574

080057c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d2:	3201      	adds	r2, #1
 80057d4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80057d6:	4b03      	ldr	r3, [pc, #12]	@ (80057e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80057d8:	681b      	ldr	r3, [r3, #0]
	}
 80057da:	4618      	mov	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	2000046c 	.word	0x2000046c

080057e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057f2:	4b29      	ldr	r3, [pc, #164]	@ (8005898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f8:	4b28      	ldr	r3, [pc, #160]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fa28 	bl	8003c54 <uxListRemove>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800580a:	4b24      	ldr	r3, [pc, #144]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	2201      	movs	r2, #1
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43da      	mvns	r2, r3
 8005818:	4b21      	ldr	r3, [pc, #132]	@ (80058a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4013      	ands	r3, r2
 800581e:	4a20      	ldr	r2, [pc, #128]	@ (80058a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d10a      	bne.n	8005840 <prvAddCurrentTaskToDelayedList+0x58>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005830:	4b1a      	ldr	r3, [pc, #104]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	481a      	ldr	r0, [pc, #104]	@ (80058a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800583a:	f7fe f9ae 	bl	8003b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800583e:	e026      	b.n	800588e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005848:	4b14      	ldr	r3, [pc, #80]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d209      	bcs.n	800586c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005858:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0f      	ldr	r3, [pc, #60]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe f9bc 	bl	8003be2 <vListInsert>
}
 800586a:	e010      	b.n	800588e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f7fe f9b2 	bl	8003be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d202      	bcs.n	800588e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005888:	4a09      	ldr	r2, [pc, #36]	@ (80058b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6013      	str	r3, [r2, #0]
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000570 	.word	0x20000570
 800589c:	2000046c 	.word	0x2000046c
 80058a0:	20000574 	.word	0x20000574
 80058a4:	20000558 	.word	0x20000558
 80058a8:	20000528 	.word	0x20000528
 80058ac:	20000524 	.word	0x20000524
 80058b0:	2000058c 	.word	0x2000058c

080058b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3b04      	subs	r3, #4
 80058c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b04      	subs	r3, #4
 80058d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005918 <pxPortInitialiseStack+0x64>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3b14      	subs	r3, #20
 80058ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b04      	subs	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f06f 0202 	mvn.w	r2, #2
 8005902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3b20      	subs	r3, #32
 8005908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800590a:	68fb      	ldr	r3, [r7, #12]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	0800591d 	.word	0x0800591d

0800591c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <prvTaskExitError+0x58>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d00b      	beq.n	8005948 <prvTaskExitError+0x2c>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <prvTaskExitError+0x28>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60bb      	str	r3, [r7, #8]
}
 800595a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800595c:	bf00      	nop
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0fc      	beq.n	800595e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000000c 	.word	0x2000000c
	...

08005980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <pxCurrentTCBConst2>)
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	6808      	ldr	r0, [r1, #0]
 8005986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	f380 8809 	msr	PSP, r0
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	4770      	bx	lr
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst2>:
 80059a0:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059a8:	4808      	ldr	r0, [pc, #32]	@ (80059cc <prvPortStartFirstTask+0x24>)
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	6800      	ldr	r0, [r0, #0]
 80059ae:	f380 8808 	msr	MSP, r0
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f380 8814 	msr	CONTROL, r0
 80059ba:	b662      	cpsie	i
 80059bc:	b661      	cpsie	f
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	df00      	svc	0
 80059c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ca:	bf00      	nop
 80059cc:	e000ed08 	.word	0xe000ed08

080059d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059d6:	4b47      	ldr	r3, [pc, #284]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a47      	ldr	r2, [pc, #284]	@ (8005af8 <xPortStartScheduler+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10b      	bne.n	80059f8 <xPortStartScheduler+0x28>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059f8:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3f      	ldr	r2, [pc, #252]	@ (8005afc <xPortStartScheduler+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10b      	bne.n	8005a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a1a:	4b39      	ldr	r3, [pc, #228]	@ (8005b00 <xPortStartScheduler+0x130>)
 8005a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	22ff      	movs	r2, #255	@ 0xff
 8005a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <xPortStartScheduler+0x134>)
 8005a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a42:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a48:	e009      	b.n	8005a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a2d      	ldr	r2, [pc, #180]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d0ef      	beq.n	8005a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a6a:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d00b      	beq.n	8005a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60bb      	str	r3, [r7, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005aa0:	4a19      	ldr	r2, [pc, #100]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aac:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a16      	ldr	r2, [pc, #88]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ab8:	4b14      	ldr	r3, [pc, #80]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ac4:	f000 f8da 	bl	8005c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <xPortStartScheduler+0x140>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ace:	f000 f8f9 	bl	8005cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ad2:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ade:	f7ff ff63 	bl	80059a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ae2:	f7ff fa71 	bl	8004fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8005ae6:	f7ff ff19 	bl	800591c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed00 	.word	0xe000ed00
 8005af8:	410fc271 	.word	0x410fc271
 8005afc:	410fc270 	.word	0x410fc270
 8005b00:	e000e400 	.word	0xe000e400
 8005b04:	20000598 	.word	0x20000598
 8005b08:	2000059c 	.word	0x2000059c
 8005b0c:	e000ed20 	.word	0xe000ed20
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	e000ef34 	.word	0xe000ef34

08005b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b32:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a0e      	ldr	r2, [pc, #56]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d110      	bne.n	8005b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b44:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <vPortEnterCritical+0x60>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	603b      	str	r3, [r7, #0]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vPortEnterCritical+0x4a>
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000000c 	.word	0x2000000c
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <vPortExitCritical+0x50>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <vPortExitCritical+0x26>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <vPortExitCritical+0x50>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <vPortExitCritical+0x50>)
 8005baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bac:	4b07      	ldr	r3, [pc, #28]	@ (8005bcc <vPortExitCritical+0x50>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <vPortExitCritical+0x44>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bd0:	f3ef 8009 	mrs	r0, PSP
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <pxCurrentTCBConst>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f01e 0f10 	tst.w	lr, #16
 8005be0:	bf08      	it	eq
 8005be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bf4:	f380 8811 	msr	BASEPRI, r0
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f7ff f9e2 	bl	8004fc8 <vTaskSwitchContext>
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f380 8811 	msr	BASEPRI, r0
 8005c0c:	bc09      	pop	{r0, r3}
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6808      	ldr	r0, [r1, #0]
 8005c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c16:	f01e 0f10 	tst.w	lr, #16
 8005c1a:	bf08      	it	eq
 8005c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c20:	f380 8809 	msr	PSP, r0
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst>:
 8005c30:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
}
 8005c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c52:	f7ff f8ff 	bl	8004e54 <xTaskIncrementTick>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <SysTick_Handler+0x40>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
}
 8005c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c86:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <vPortSetupTimerInterrupt+0x38>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <vPortSetupTimerInterrupt+0x3c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <vPortSetupTimerInterrupt+0x40>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	4a09      	ldr	r2, [pc, #36]	@ (8005cc0 <vPortSetupTimerInterrupt+0x44>)
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000e010 	.word	0xe000e010
 8005cb4:	e000e018 	.word	0xe000e018
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	10624dd3 	.word	0x10624dd3
 8005cc0:	e000e014 	.word	0xe000e014

08005cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005cd4 <vPortEnableVFP+0x10>
 8005cc8:	6801      	ldr	r1, [r0, #0]
 8005cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed88 	.word	0xe000ed88

08005cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cde:	f3ef 8305 	mrs	r3, IPSR
 8005ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b0f      	cmp	r3, #15
 8005ce8:	d915      	bls.n	8005d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <vPortValidateInterruptPriority+0x74>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cf4:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <vPortValidateInterruptPriority+0x78>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	7afa      	ldrb	r2, [r7, #11]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20b      	bcs.n	8005d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d16:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <vPortValidateInterruptPriority+0x7c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <vPortValidateInterruptPriority+0x80>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90b      	bls.n	8005d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	603b      	str	r3, [r7, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <vPortValidateInterruptPriority+0x62>
	}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000e3f0 	.word	0xe000e3f0
 8005d50:	20000598 	.word	0x20000598
 8005d54:	e000ed0c 	.word	0xe000ed0c
 8005d58:	2000059c 	.word	0x2000059c

08005d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d68:	f7fe ffc8 	bl	8004cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d74:	f000 f924 	bl	8005fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d78:	4b5a      	ldr	r3, [pc, #360]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 8095 	bne.w	8005eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01e      	beq.n	8005dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f023 0307 	bic.w	r3, r3, #7
 8005da4:	3308      	adds	r3, #8
 8005da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <pvPortMalloc+0x6e>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	617b      	str	r3, [r7, #20]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d06f      	beq.n	8005eb0 <pvPortMalloc+0x154>
 8005dd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d86a      	bhi.n	8005eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dda:	4b44      	ldr	r3, [pc, #272]	@ (8005eec <pvPortMalloc+0x190>)
 8005ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dde:	4b43      	ldr	r3, [pc, #268]	@ (8005eec <pvPortMalloc+0x190>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005de4:	e004      	b.n	8005df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <pvPortMalloc+0xa6>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f1      	bne.n	8005de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d051      	beq.n	8005eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4413      	add	r3, r2
 8005e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	1ad2      	subs	r2, r2, r3
 8005e26:	2308      	movs	r3, #8
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d920      	bls.n	8005e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <pvPortMalloc+0xfc>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	613b      	str	r3, [r7, #16]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	f000 f90a 	bl	8006084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d203      	bcs.n	8005e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a11      	ldr	r2, [pc, #68]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eb0:	f7fe ff32 	bl	8004d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20001160 	.word	0x20001160
 8005ee4:	20001174 	.word	0x20001174
 8005ee8:	20001164 	.word	0x20001164
 8005eec:	20001158 	.word	0x20001158
 8005ef0:	20001168 	.word	0x20001168
 8005ef4:	2000116c 	.word	0x2000116c

08005ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d04f      	beq.n	8005faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <vPortFree+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <vPortFree+0x46>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <vPortFree+0x66>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <vPortFree+0xbc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01e      	beq.n	8005faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11a      	bne.n	8005faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb4 <vPortFree+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	401a      	ands	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f84:	f7fe feba 	bl	8004cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <vPortFree+0xc0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <vPortFree+0xc0>)
 8005f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f000 f874 	bl	8006084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vPortFree+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a06      	ldr	r2, [pc, #24]	@ (8005fbc <vPortFree+0xc4>)
 8005fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fa6:	f7fe feb7 	bl	8004d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20001174 	.word	0x20001174
 8005fb8:	20001164 	.word	0x20001164
 8005fbc:	20001170 	.word	0x20001170

08005fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fc6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <prvHeapInit+0xac>)
 8005fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3307      	adds	r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <prvHeapInit+0xac>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <prvHeapInit+0xb0>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8006070 <prvHeapInit+0xb0>)
 8006000:	2200      	movs	r2, #0
 8006002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800600c:	2208      	movs	r2, #8
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <prvHeapInit+0xb4>)
 8006020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <prvHeapInit+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <prvHeapInit+0xb4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvHeapInit+0xb4>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <prvHeapInit+0xb8>)
 800604e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a09      	ldr	r2, [pc, #36]	@ (800607c <prvHeapInit+0xbc>)
 8006056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006058:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <prvHeapInit+0xc0>)
 800605a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	200005a0 	.word	0x200005a0
 8006070:	20001158 	.word	0x20001158
 8006074:	20001160 	.word	0x20001160
 8006078:	20001168 	.word	0x20001168
 800607c:	20001164 	.word	0x20001164
 8006080:	20001174 	.word	0x20001174

08006084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <prvInsertBlockIntoFreeList+0xac>)
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e002      	b.n	8006098 <prvInsertBlockIntoFreeList+0x14>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d8f7      	bhi.n	8006092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d108      	bne.n	80060c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d118      	bne.n	800610c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b15      	ldr	r3, [pc, #84]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d00d      	beq.n	8006102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e008      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006102:	4b0c      	ldr	r3, [pc, #48]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e003      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d002      	beq.n	8006122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20001158 	.word	0x20001158
 8006134:	20001160 	.word	0x20001160

08006138 <memset>:
 8006138:	4402      	add	r2, r0
 800613a:	4603      	mov	r3, r0
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	f803 1b01 	strb.w	r1, [r3], #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <_reclaim_reent>:
 8006148:	4b29      	ldr	r3, [pc, #164]	@ (80061f0 <_reclaim_reent+0xa8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4283      	cmp	r3, r0
 800614e:	b570      	push	{r4, r5, r6, lr}
 8006150:	4604      	mov	r4, r0
 8006152:	d04b      	beq.n	80061ec <_reclaim_reent+0xa4>
 8006154:	69c3      	ldr	r3, [r0, #28]
 8006156:	b1ab      	cbz	r3, 8006184 <_reclaim_reent+0x3c>
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	b16b      	cbz	r3, 8006178 <_reclaim_reent+0x30>
 800615c:	2500      	movs	r5, #0
 800615e:	69e3      	ldr	r3, [r4, #28]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	5959      	ldr	r1, [r3, r5]
 8006164:	2900      	cmp	r1, #0
 8006166:	d13b      	bne.n	80061e0 <_reclaim_reent+0x98>
 8006168:	3504      	adds	r5, #4
 800616a:	2d80      	cmp	r5, #128	@ 0x80
 800616c:	d1f7      	bne.n	800615e <_reclaim_reent+0x16>
 800616e:	69e3      	ldr	r3, [r4, #28]
 8006170:	4620      	mov	r0, r4
 8006172:	68d9      	ldr	r1, [r3, #12]
 8006174:	f000 f872 	bl	800625c <_free_r>
 8006178:	69e3      	ldr	r3, [r4, #28]
 800617a:	6819      	ldr	r1, [r3, #0]
 800617c:	b111      	cbz	r1, 8006184 <_reclaim_reent+0x3c>
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f86c 	bl	800625c <_free_r>
 8006184:	6961      	ldr	r1, [r4, #20]
 8006186:	b111      	cbz	r1, 800618e <_reclaim_reent+0x46>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f867 	bl	800625c <_free_r>
 800618e:	69e1      	ldr	r1, [r4, #28]
 8006190:	b111      	cbz	r1, 8006198 <_reclaim_reent+0x50>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f862 	bl	800625c <_free_r>
 8006198:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800619a:	b111      	cbz	r1, 80061a2 <_reclaim_reent+0x5a>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f85d 	bl	800625c <_free_r>
 80061a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061a4:	b111      	cbz	r1, 80061ac <_reclaim_reent+0x64>
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f858 	bl	800625c <_free_r>
 80061ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80061ae:	b111      	cbz	r1, 80061b6 <_reclaim_reent+0x6e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f853 	bl	800625c <_free_r>
 80061b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80061b8:	b111      	cbz	r1, 80061c0 <_reclaim_reent+0x78>
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f84e 	bl	800625c <_free_r>
 80061c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80061c2:	b111      	cbz	r1, 80061ca <_reclaim_reent+0x82>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f849 	bl	800625c <_free_r>
 80061ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061cc:	b111      	cbz	r1, 80061d4 <_reclaim_reent+0x8c>
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f844 	bl	800625c <_free_r>
 80061d4:	6a23      	ldr	r3, [r4, #32]
 80061d6:	b14b      	cbz	r3, 80061ec <_reclaim_reent+0xa4>
 80061d8:	4620      	mov	r0, r4
 80061da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061de:	4718      	bx	r3
 80061e0:	680e      	ldr	r6, [r1, #0]
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f83a 	bl	800625c <_free_r>
 80061e8:	4631      	mov	r1, r6
 80061ea:	e7bb      	b.n	8006164 <_reclaim_reent+0x1c>
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	bf00      	nop
 80061f0:	20000010 	.word	0x20000010

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4d0d      	ldr	r5, [pc, #52]	@ (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006230 <__libc_init_array+0x3c>)
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2600      	movs	r6, #0
 8006200:	42a6      	cmp	r6, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4d0b      	ldr	r5, [pc, #44]	@ (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	@ (8006238 <__libc_init_array+0x44>)
 8006208:	f000 f87e 	bl	8006308 <_init>
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2600      	movs	r6, #0
 8006212:	42a6      	cmp	r6, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f855 3b04 	ldr.w	r3, [r5], #4
 800621c:	4798      	blx	r3
 800621e:	3601      	adds	r6, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
 8006226:	4798      	blx	r3
 8006228:	3601      	adds	r6, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	080063f0 	.word	0x080063f0
 8006230:	080063f0 	.word	0x080063f0
 8006234:	080063f0 	.word	0x080063f0
 8006238:	080063f4 	.word	0x080063f4

0800623c <__retarget_lock_acquire_recursive>:
 800623c:	4770      	bx	lr

0800623e <__retarget_lock_release_recursive>:
 800623e:	4770      	bx	lr

08006240 <memcpy>:
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	f100 33ff 	add.w	r3, r0, #4294967295
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	4770      	bx	lr
 800624c:	b510      	push	{r4, lr}
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006256:	4291      	cmp	r1, r2
 8006258:	d1f9      	bne.n	800624e <memcpy+0xe>
 800625a:	bd10      	pop	{r4, pc}

0800625c <_free_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4605      	mov	r5, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	d041      	beq.n	80062e8 <_free_r+0x8c>
 8006264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006268:	1f0c      	subs	r4, r1, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfb8      	it	lt
 800626e:	18e4      	addlt	r4, r4, r3
 8006270:	f000 f83e 	bl	80062f0 <__malloc_lock>
 8006274:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <_free_r+0x90>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	b933      	cbnz	r3, 8006288 <_free_r+0x2c>
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	4628      	mov	r0, r5
 8006280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006284:	f000 b83a 	b.w	80062fc <__malloc_unlock>
 8006288:	42a3      	cmp	r3, r4
 800628a:	d908      	bls.n	800629e <_free_r+0x42>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	1821      	adds	r1, r4, r0
 8006290:	428b      	cmp	r3, r1
 8006292:	bf01      	itttt	eq
 8006294:	6819      	ldreq	r1, [r3, #0]
 8006296:	685b      	ldreq	r3, [r3, #4]
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	e7ed      	b.n	800627a <_free_r+0x1e>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x4c>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x42>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1850      	adds	r0, r2, r1
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x6c>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	4401      	add	r1, r0
 80062b4:	1850      	adds	r0, r2, r1
 80062b6:	4283      	cmp	r3, r0
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1e0      	bne.n	800627e <_free_r+0x22>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4408      	add	r0, r1
 80062c4:	6010      	str	r0, [r2, #0]
 80062c6:	e7da      	b.n	800627e <_free_r+0x22>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x74>
 80062ca:	230c      	movs	r3, #12
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7d6      	b.n	800627e <_free_r+0x22>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7ca      	b.n	800627e <_free_r+0x22>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	200012b4 	.word	0x200012b4

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff bfa3 	b.w	800623c <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	200012b0 	.word	0x200012b0

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff bf9e 	b.w	800623e <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	200012b0 	.word	0x200012b0

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
