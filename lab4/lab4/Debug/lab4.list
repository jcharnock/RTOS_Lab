
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f0  080062f0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f0  080062f0  000072f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062f4  080062f4  000072f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080062f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000125c  20000060  08006358  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  08006358  000082bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184f2  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b9  00000000  00000000  00020582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbc  00000000  00000000  00024e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028622  00000000  00000000  00025e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ede  00000000  00000000  0004e45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf33  00000000  00000000  0006633c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016126f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  001612b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00166a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006208 	.word	0x08006208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006208 	.word	0x08006208

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <init_mutex_and_buffer>:
osMutexId myMutexHandle01;
uint8_t buffer[100];
const int write_size = 60;
osStatus status;

void init_mutex_and_buffer(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	osMutexDef(myMutex01);
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
	myMutexHandle01 = osMutexCreate(osMutex(myMutex01));
 80004ce:	463b      	mov	r3, r7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fa1d 	bl	8003910 <osMutexCreate>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <init_mutex_and_buffer+0x38>)
 80004da:	6013      	str	r3, [r2, #0]
	buffer[write_size - 2] = '\r';
 80004dc:	233c      	movs	r3, #60	@ 0x3c
 80004de:	3b02      	subs	r3, #2
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <init_mutex_and_buffer+0x3c>)
 80004e2:	210d      	movs	r1, #13
 80004e4:	54d1      	strb	r1, [r2, r3]
	buffer[write_size - 1] = '\n';
 80004e6:	233c      	movs	r3, #60	@ 0x3c
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <init_mutex_and_buffer+0x3c>)
 80004ec:	210a      	movs	r1, #10
 80004ee:	54d1      	strb	r1, [r2, r3]
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000007c 	.word	0x2000007c
 80004fc:	20000080 	.word	0x20000080

08000500 <load_and_print_buffer>:

void load_and_print_buffer (char val, UART_HandleTypeDef * uart_ptr){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
	status = osMutexWait(myMutexHandle01, osWaitForever);
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <load_and_print_buffer+0xa8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fa13 	bl	8003940 <osMutexWait>
 800051a:	4603      	mov	r3, r0
 800051c:	4a23      	ldr	r2, [pc, #140]	@ (80005ac <load_and_print_buffer+0xac>)
 800051e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < write_size - 2; i++){
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e007      	b.n	8000536 <load_and_print_buffer+0x36>
		buffer[i] = val;
 8000526:	4a22      	ldr	r2, [pc, #136]	@ (80005b0 <load_and_print_buffer+0xb0>)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < write_size - 2; i++){
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	233c      	movs	r3, #60	@ 0x3c
 8000538:	3b02      	subs	r3, #2
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf2      	blt.n	8000526 <load_and_print_buffer+0x26>
	}
	int j = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
	while (j < write_size){
 8000544:	e027      	b.n	8000596 <load_and_print_buffer+0x96>
		if (uart_ptr->gState == HAL_UART_STATE_READY){
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800054a:	2b20      	cmp	r3, #32
 800054c:	d11e      	bne.n	800058c <load_and_print_buffer+0x8c>
			uart_ptr->ErrorCode = HAL_UART_ERROR_NONE;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			uart_ptr->gState = HAL_UART_STATE_BUSY_TX;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2221      	movs	r2, #33	@ 0x21
 800055a:	67da      	str	r2, [r3, #124]	@ 0x7c
			uart_ptr->TxXferSize = 1;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2201      	movs	r2, #1
 8000560:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			uart_ptr->TxXferCount = 1;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2201      	movs	r2, #1
 8000568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			uart_ptr->Instance->TDR= (uint16_t)(buffer[j]);
 800056c:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <load_and_print_buffer+0xb0>)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4413      	add	r3, r2
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	851a      	strh	r2, [r3, #40]	@ 0x28
			osDelay(2);
 800057a:	2002      	movs	r0, #2
 800057c:	f003 f9b4 	bl	80038e8 <osDelay>
			uart_ptr->gState = HAL_UART_STATE_READY;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2220      	movs	r2, #32
 8000584:	67da      	str	r2, [r3, #124]	@ 0x7c
			j++;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
		}
	osMutexRelease( myMutexHandle01 );
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <load_and_print_buffer+0xa8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fa23 	bl	80039dc <osMutexRelease>
	while (j < write_size){
 8000596:	223c      	movs	r2, #60	@ 0x3c
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	4293      	cmp	r3, r2
 800059c:	dbd3      	blt.n	8000546 <load_and_print_buffer+0x46>
	}
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	20000080 	.word	0x20000080

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000e8 	.word	0x200000e8
 80005e4:	20000188 	.word	0x20000188

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b098      	sub	sp, #96	@ 0x60
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fae1 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f85b 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8db 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f8a9 	bl	8000750 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80005fe:	2300      	movs	r3, #0
 8000600:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000602:	2300      	movs	r3, #0
 8000604:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000606:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f980 	bl	8003910 <osMutexCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a1f      	ldr	r2, [pc, #124]	@ (8000690 <main+0xa8>)
 8000614:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  init_mutex_and_buffer();
 8000616:	f7ff ff53 	bl	80004c0 <init_mutex_and_buffer>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <main+0xac>)
 800061c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800062e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f90b 	bl	8003850 <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <main+0xb0>)
 800063e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <main+0xb4>)
 8000642:	f107 0420 	add.w	r4, r7, #32
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f8f8 	bl	8003850 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <main+0xb8>)
 8000664:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <main+0xbc>)
 8000668:	1d3c      	adds	r4, r7, #4
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f8e7 	bl	8003850 <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <main+0xc0>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f003 f8db 	bl	8003842 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0xa4>
 8000690:	2000041c 	.word	0x2000041c
 8000694:	0800622c 	.word	0x0800622c
 8000698:	20000410 	.word	0x20000410
 800069c:	08006254 	.word	0x08006254
 80006a0:	20000414 	.word	0x20000414
 80006a4:	0800627c 	.word	0x0800627c
 80006a8:	20000418 	.word	0x20000418

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	@ 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fcbc 	bl	8006038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006d2:	f000 fd61 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f910 	bl	8000900 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fd98 	bl	8001244 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f8f1 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f960 	bl	80019fc <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f8dd 	bl	8000900 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	@ 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f002 fb0a 	bl	8002dac <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8af 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000388 	.word	0x20000388
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f000 fc8d 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <MX_GPIO_Init+0xc8>)
 800084a:	f000 fad5 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 fac6 	bl	8000df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  load_and_print_buffer('1',&huart2);
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <StartTask01+0x1c>)
 8000886:	2031      	movs	r0, #49	@ 0x31
 8000888:	f7ff fe3a 	bl	8000500 <load_and_print_buffer>
	  osDelay(1000);
 800088c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000890:	f003 f82a 	bl	80038e8 <osDelay>
	  load_and_print_buffer('1',&huart2);
 8000894:	bf00      	nop
 8000896:	e7f5      	b.n	8000884 <StartTask01+0x8>
 8000898:	20000388 	.word	0x20000388

0800089c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	load_and_print_buffer('2',&huart2);
 80008a4:	4904      	ldr	r1, [pc, #16]	@ (80008b8 <StartTask02+0x1c>)
 80008a6:	2032      	movs	r0, #50	@ 0x32
 80008a8:	f7ff fe2a 	bl	8000500 <load_and_print_buffer>
    osDelay(100);
 80008ac:	2064      	movs	r0, #100	@ 0x64
 80008ae:	f003 f81b 	bl	80038e8 <osDelay>
	load_and_print_buffer('2',&huart2);
 80008b2:	bf00      	nop
 80008b4:	e7f6      	b.n	80008a4 <StartTask02+0x8>
 80008b6:	bf00      	nop
 80008b8:	20000388 	.word	0x20000388

080008bc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  load_and_print_buffer('3',&huart2);
 80008c4:	4904      	ldr	r1, [pc, #16]	@ (80008d8 <StartTask03+0x1c>)
 80008c6:	2033      	movs	r0, #51	@ 0x33
 80008c8:	f7ff fe1a 	bl	8000500 <load_and_print_buffer>
	  osDelay(200);
 80008cc:	20c8      	movs	r0, #200	@ 0xc8
 80008ce:	f003 f80b 	bl	80038e8 <osDelay>
	  load_and_print_buffer('3',&huart2);
 80008d2:	bf00      	nop
 80008d4:	e7f6      	b.n	80008c4 <StartTask03+0x8>
 80008d6:	bf00      	nop
 80008d8:	20000388 	.word	0x20000388

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f981 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40012c00 	.word	0x40012c00

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_MspInit+0x4c>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <HAL_MspInit+0x4c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	@ 0x60
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_MspInit+0x4c>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <HAL_MspInit+0x4c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	@ 0x58
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_MspInit+0x4c>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	f06f 0001 	mvn.w	r0, #1
 800094a:	f000 fa2b 	bl	8000da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0ac      	sub	sp, #176	@ 0xb0
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2288      	movs	r2, #136	@ 0x88
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f005 fb5b 	bl	8006038 <memset>
  if(huart->Instance==USART2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <HAL_UART_MspInit+0xb0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d13b      	bne.n	8000a04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fa85 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a4:	f7ff ffac 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ac:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_UART_MspInit+0xb4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d8:	230c      	movs	r3, #12
 80009da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f0:	2307      	movs	r3, #7
 80009f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 f9fa 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	37b0      	adds	r7, #176	@ 0xb0
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a22:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <HAL_InitTick+0xc8>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	4a2d      	ldr	r2, [pc, #180]	@ (8000adc <HAL_InitTick+0xc8>)
 8000a28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <HAL_InitTick+0xc8>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f99d 	bl	8001d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a4a:	f001 f985 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8000a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <HAL_InitTick+0xcc>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_InitTick+0xd4>)
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a86:	f001 fecb 	bl	8002820 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <HAL_InitTick+0xd0>)
 8000a9a:	f001 ff23 	bl	80028e4 <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aac:	2019      	movs	r0, #25
 8000aae:	f000 f995 	bl	8000ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2019      	movs	r0, #25
 8000abe:	f000 f971 	bl	8000da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0xd8>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000420 	.word	0x20000420
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b2e:	f001 ff49 	bl	80029c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000420 	.word	0x20000420

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ffea 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f005 fab1 	bl	80060f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fd29 	bl	80005e8 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ba4:	080062f8 	.word	0x080062f8
  ldr r2, =_sbss
 8000ba8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bac:	200012bc 	.word	0x200012bc

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f8df 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	f7ff ff1f 	bl	8000a14 <HAL_InitTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	e001      	b.n	8000be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be2:	f7ff fe93 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	2000046c 	.word	0x2000046c

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000046c 	.word	0x2000046c

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	@ (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e17f      	b.n	8001108 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8171 	beq.w	8001102 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d118      	bne.n	8000ed8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	6939      	ldr	r1, [r7, #16]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80ac 	beq.w	8001102 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b5f      	ldr	r3, [pc, #380]	@ (8001128 <HAL_GPIO_Init+0x330>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	4a5e      	ldr	r2, [pc, #376]	@ (8001128 <HAL_GPIO_Init+0x330>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8001128 <HAL_GPIO_Init+0x330>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800112c <HAL_GPIO_Init+0x334>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x242>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8001130 <HAL_GPIO_Init+0x338>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x23e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8001134 <HAL_GPIO_Init+0x33c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x23a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4d      	ldr	r2, [pc, #308]	@ (8001138 <HAL_GPIO_Init+0x340>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x236>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <HAL_GPIO_Init+0x344>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x232>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4b      	ldr	r2, [pc, #300]	@ (8001140 <HAL_GPIO_Init+0x348>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x22e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <HAL_GPIO_Init+0x34c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x22a>
 800101e:	2306      	movs	r3, #6
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001022:	2307      	movs	r3, #7
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x244>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x244>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x244>
 800103a:	2300      	movs	r3, #0
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104c:	4937      	ldr	r1, [pc, #220]	@ (800112c <HAL_GPIO_Init+0x334>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_GPIO_Init+0x350>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_GPIO_Init+0x350>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_GPIO_Init+0x350>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <HAL_GPIO_Init+0x350>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ae:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <HAL_GPIO_Init+0x350>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_GPIO_Init+0x350>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_GPIO_Init+0x350>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <HAL_GPIO_Init+0x350>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa22 f303 	lsr.w	r3, r2, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	f47f ae78 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800
 8001138:	48000c00 	.word	0x48000c00
 800113c:	48001000 	.word	0x48001000
 8001140:	48001400 	.word	0x48001400
 8001144:	48001800 	.word	0x48001800
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e002      	b.n	8001170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_PWREx_GetVoltageRange+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011a6:	d130      	bne.n	800120a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b4:	d038      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2232      	movs	r2, #50	@ 0x32
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011dc:	e002      	b.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f0:	d102      	bne.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f2      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001204:	d110      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e00f      	b.n	800122a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001216:	d007      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001220:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e3ca      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b97      	ldr	r3, [pc, #604]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b94      	ldr	r3, [pc, #592]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80e4 	beq.w	8001440 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_RCC_OscConfig+0x4a>
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b0c      	cmp	r3, #12
 8001282:	f040 808b 	bne.w	800139c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b01      	cmp	r3, #1
 800128a:	f040 8087 	bne.w	800139c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128e:	4b89      	ldr	r3, [pc, #548]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x62>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e3a2      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1a      	ldr	r2, [r3, #32]
 80012aa:	4b82      	ldr	r3, [pc, #520]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_RCC_OscConfig+0x7c>
 80012b6:	4b7f      	ldr	r3, [pc, #508]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012be:	e005      	b.n	80012cc <HAL_RCC_OscConfig+0x88>
 80012c0:	4b7c      	ldr	r3, [pc, #496]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d223      	bcs.n	8001318 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd87 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e383      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e4:	4b73      	ldr	r3, [pc, #460]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a72      	ldr	r2, [pc, #456]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	496d      	ldr	r1, [pc, #436]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001302:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	4968      	ldr	r1, [pc, #416]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
 8001316:	e025      	b.n	8001364 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001318:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b63      	ldr	r3, [pc, #396]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4960      	ldr	r1, [pc, #384]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001336:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	495b      	ldr	r1, [pc, #364]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fd47 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e343      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001364:	f000 fc4a 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001368:	4602      	mov	r2, r0
 800136a:	4b52      	ldr	r3, [pc, #328]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	4950      	ldr	r1, [pc, #320]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001376:	5ccb      	ldrb	r3, [r1, r3]
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	4a4e      	ldr	r2, [pc, #312]	@ (80014bc <HAL_RCC_OscConfig+0x278>)
 8001382:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001384:	4b4e      	ldr	r3, [pc, #312]	@ (80014c0 <HAL_RCC_OscConfig+0x27c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb43 	bl	8000a14 <HAL_InitTick>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d052      	beq.n	800143e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	e327      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d032      	beq.n	800140a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a4:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a42      	ldr	r2, [pc, #264]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc34 	bl	8000c1c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc30 	bl	8000c1c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e310      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4931      	ldr	r1, [pc, #196]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f4:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	492c      	ldr	r1, [pc, #176]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
 8001408:	e01a      	b.n	8001440 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001416:	f7ff fc01 	bl	8000c1c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141e:	f7ff fbfd 	bl	8000c1c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e2dd      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x1da>
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800143e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d074      	beq.n	8001536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b08      	cmp	r3, #8
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x21a>
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d10e      	bne.n	8001476 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d10b      	bne.n	8001476 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d064      	beq.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d160      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e2ba      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x24a>
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e026      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001496:	d115      	bne.n	80014c4 <HAL_RCC_OscConfig+0x280>
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800149e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a02      	ldr	r2, [pc, #8]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e014      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	080062a0 	.word	0x080062a0
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004
 80014c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a9f      	ldr	r2, [pc, #636]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a9c      	ldr	r2, [pc, #624]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb9a 	bl	8000c1c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb96 	bl	8000c1c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e276      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b92      	ldr	r3, [pc, #584]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2a8>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb86 	bl	8000c1c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fb82 	bl	8000c1c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	@ 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e262      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d0>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d060      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x310>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d119      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b7c      	ldr	r3, [pc, #496]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x328>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e23f      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b76      	ldr	r3, [pc, #472]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4973      	ldr	r1, [pc, #460]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e040      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	4b6f      	ldr	r3, [pc, #444]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6e      	ldr	r2, [pc, #440]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb41 	bl	8000c1c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb3d 	bl	8000c1c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e21d      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	4b65      	ldr	r3, [pc, #404]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b62      	ldr	r3, [pc, #392]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	495f      	ldr	r1, [pc, #380]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb1d 	bl	8000c1c <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb19 	bl	8000c1c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1f9      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d03c      	beq.n	800168a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01c      	beq.n	8001652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161e:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff faf8 	bl	8000c1c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff faf4 	bl	8000c1c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1d4      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ef      	beq.n	8001630 <HAL_RCC_OscConfig+0x3ec>
 8001650:	e01b      	b.n	800168a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001658:	4a3b      	ldr	r2, [pc, #236]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fadb 	bl	8000c1c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fad7 	bl	8000c1c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1b7      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a6 	beq.w	80017e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	4b21      	ldr	r3, [pc, #132]	@ (800174c <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d118      	bne.n	8001702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d0:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_RCC_OscConfig+0x508>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_RCC_OscConfig+0x508>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fa9e 	bl	8000c1c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7ff fa9a 	bl	8000c1c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e17a      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_RCC_OscConfig+0x508>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_RCC_OscConfig+0x4d8>
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171a:	e029      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d115      	bne.n	8001750 <HAL_RCC_OscConfig+0x50c>
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172a:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a03      	ldr	r2, [pc, #12]	@ (8001748 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	4b9c      	ldr	r3, [pc, #624]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001756:	4a9b      	ldr	r2, [pc, #620]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001760:	4b98      	ldr	r3, [pc, #608]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001766:	4a97      	ldr	r2, [pc, #604]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d016      	beq.n	80017a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fa50 	bl	8000c1c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fa4c 	bl	8000c1c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e12a      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001796:	4b8b      	ldr	r3, [pc, #556]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ed      	beq.n	8001780 <HAL_RCC_OscConfig+0x53c>
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa39 	bl	8000c1c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fa35 	bl	8000c1c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e113      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c4:	4b7f      	ldr	r3, [pc, #508]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ed      	bne.n	80017ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b7a      	ldr	r3, [pc, #488]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	4a79      	ldr	r2, [pc, #484]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80fe 	beq.w	80019ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f040 80d0 	bne.w	8001998 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017f8:	4b72      	ldr	r3, [pc, #456]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	429a      	cmp	r2, r3
 800180a:	d130      	bne.n	800186e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	3b01      	subs	r3, #1
 8001818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d127      	bne.n	800186e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001828:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d11f      	bne.n	800186e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001838:	2a07      	cmp	r2, #7
 800183a:	bf14      	ite	ne
 800183c:	2201      	movne	r2, #1
 800183e:	2200      	moveq	r2, #0
 8001840:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001842:	4293      	cmp	r3, r2
 8001844:	d113      	bne.n	800186e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d109      	bne.n	800186e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d06e      	beq.n	800194c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d069      	beq.n	8001948 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001880:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0ad      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001890:	4b4c      	ldr	r3, [pc, #304]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4b      	ldr	r2, [pc, #300]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800189c:	f7ff f9be 	bl	8000c1c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f9ba 	bl	8000c1c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e09a      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b6:	4b43      	ldr	r3, [pc, #268]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c2:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_RCC_OscConfig+0x784>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018d2:	3a01      	subs	r2, #1
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018dc:	0212      	lsls	r2, r2, #8
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	3a01      	subs	r2, #1
 80018e8:	0552      	lsls	r2, r2, #21
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018f0:	0852      	lsrs	r2, r2, #1
 80018f2:	3a01      	subs	r2, #1
 80018f4:	0652      	lsls	r2, r2, #25
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018fc:	0912      	lsrs	r2, r2, #4
 80018fe:	0452      	lsls	r2, r2, #17
 8001900:	430a      	orrs	r2, r1
 8001902:	4930      	ldr	r1, [pc, #192]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001920:	f7ff f97c 	bl	8000c1c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f978 	bl	8000c1c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e058      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001946:	e050      	b.n	80019ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04f      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d148      	bne.n	80019ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001970:	f7ff f954 	bl	8000c1c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f950 	bl	8000c1c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e030      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x734>
 8001996:	e028      	b.n	80019ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d023      	beq.n	80019e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_RCC_OscConfig+0x780>)
 80019a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f937 	bl	8000c1c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	e00c      	b.n	80019cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff f933 	bl	8000c1c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d905      	bls.n	80019cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e013      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_OscConfig+0x7b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ec      	bne.n	80019b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_RCC_OscConfig+0x7b0>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4905      	ldr	r1, [pc, #20]	@ (80019f4 <HAL_RCC_OscConfig+0x7b0>)
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_RCC_OscConfig+0x7b4>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e001      	b.n	80019ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	feeefffc 	.word	0xfeeefffc

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0e7      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b75      	ldr	r3, [pc, #468]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b72      	ldr	r3, [pc, #456]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4970      	ldr	r1, [pc, #448]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cf      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b66      	ldr	r3, [pc, #408]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4960      	ldr	r1, [pc, #384]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d04c      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b5a      	ldr	r3, [pc, #360]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0a6      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9a:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e09a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e086      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b46      	ldr	r3, [pc, #280]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4943      	ldr	r1, [pc, #268]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f89a 	bl	8000c1c <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f896 	bl	8000c1c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e06e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d208      	bcs.n	8001b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	492b      	ldr	r1, [pc, #172]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d210      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b50:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0207 	bic.w	r2, r3, #7
 8001b58:	4923      	ldr	r1, [pc, #140]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e036      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4918      	ldr	r1, [pc, #96]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4910      	ldr	r1, [pc, #64]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb0:	f000 f824 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	490b      	ldr	r1, [pc, #44]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe ff1d 	bl	8000a14 <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	080062a0 	.word	0x080062a0
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x34>
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d11e      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c58:	4a2b      	ldr	r2, [pc, #172]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e004      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d134      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ca0:	e005      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca4:	617b      	str	r3, [r7, #20]
      break;
 8001ca6:	e005      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001caa:	617b      	str	r3, [r7, #20]
      break;
 8001cac:	e002      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	617b      	str	r3, [r7, #20]
      break;
 8001cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	0e5b      	lsrs	r3, r3, #25
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	080062b8 	.word	0x080062b8
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4904      	ldr	r1, [pc, #16]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080062b0 	.word	0x080062b0

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d5c:	f7ff ffda 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080062b0 	.word	0x080062b0

08001d84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	220f      	movs	r2, #15
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dc6:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_RCC_GetClockConfig+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0207 	and.w	r2, r3, #7
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40022000 	.word	0x40022000

08001de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff f9bc 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001e04:	6178      	str	r0, [r7, #20]
 8001e06:	e014      	b.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f9ac 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e38:	d10b      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	@ 0x80
 8001e3e:	d919      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e44:	d902      	bls.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e013      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e010      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	@ 0x80
 8001e56:	d902      	bls.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00a      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	@ 0x80
 8001e62:	d102      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e004      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b70      	cmp	r3, #112	@ 0x70
 8001e6e:	d101      	bne.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4909      	ldr	r1, [pc, #36]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ec8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ece:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eec:	4b86      	ldr	r3, [pc, #536]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a85      	ldr	r2, [pc, #532]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fabb 	bl	800247c <RCCEx_PLLSAI1_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fba6 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b76      	ldr	r3, [pc, #472]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3a:	4973      	ldr	r1, [pc, #460]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b62      	ldr	r3, [pc, #392]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a61      	ldr	r2, [pc, #388]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fa73 	bl	800247c <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fb5e 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fca:	494f      	ldr	r1, [pc, #316]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a0 	beq.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fea:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	4a40      	ldr	r2, [pc, #256]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	@ 0x58
 800200c:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3a      	ldr	r2, [pc, #232]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002028:	f7fe fdf8 	bl	8000c1c <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202e:	e009      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7fe fdf4 	bl	8000c1c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d902      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	74fb      	strb	r3, [r7, #19]
        break;
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d15c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800207e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	4a20      	ldr	r2, [pc, #128]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fdb3 	bl	8000c1c <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00b      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fdaf 	bl	8000c1c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d902      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	74fb      	strb	r3, [r7, #19]
            break;
 80020d0:	e006      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ec      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020f6:	4904      	ldr	r1, [pc, #16]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020fe:	e009      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
 8002104:	e006      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b9e      	ldr	r3, [pc, #632]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a9d      	ldr	r2, [pc, #628]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002132:	4b98      	ldr	r3, [pc, #608]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002140:	4994      	ldr	r1, [pc, #592]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002154:	4b8f      	ldr	r3, [pc, #572]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002162:	498c      	ldr	r1, [pc, #560]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002176:	4b87      	ldr	r3, [pc, #540]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	4983      	ldr	r1, [pc, #524]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002198:	4b7e      	ldr	r3, [pc, #504]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	497b      	ldr	r1, [pc, #492]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ba:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	4972      	ldr	r1, [pc, #456]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	496a      	ldr	r1, [pc, #424]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b65      	ldr	r3, [pc, #404]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	4961      	ldr	r1, [pc, #388]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b5c      	ldr	r3, [pc, #368]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222e:	4959      	ldr	r1, [pc, #356]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b54      	ldr	r3, [pc, #336]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	4950      	ldr	r1, [pc, #320]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4b4b      	ldr	r3, [pc, #300]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002272:	4948      	ldr	r1, [pc, #288]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b43      	ldr	r3, [pc, #268]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	493f      	ldr	r1, [pc, #252]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d028      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b6:	4937      	ldr	r1, [pc, #220]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a31      	ldr	r2, [pc, #196]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
 80022d4:	e011      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022de:	d10c      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f8c8 	bl	800247c <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002306:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002314:	491f      	ldr	r1, [pc, #124]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002324:	d106      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002330:	60d3      	str	r3, [r2, #12]
 8002332:	e011      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f899 	bl	800247c <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02b      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002372:	4908      	ldr	r1, [pc, #32]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002382:	d109      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a02      	ldr	r2, [pc, #8]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
 8002390:	e014      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f867 	bl	800247c <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02f      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d6:	4928      	ldr	r1, [pc, #160]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e6:	d10d      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f844 	bl	800247c <RCCEx_PLLSAI1_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
 8002400:	74bb      	strb	r3, [r7, #18]
 8002402:	e011      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800240c:	d10c      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3320      	adds	r3, #32
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f925 	bl	8002664 <RCCEx_PLLSAI2_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002442:	490d      	ldr	r1, [pc, #52]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002466:	4904      	ldr	r1, [pc, #16]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800246e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000

0800247c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800248a:	4b75      	ldr	r3, [pc, #468]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002496:	4b72      	ldr	r3, [pc, #456]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10d      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
       ||
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
       ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d047      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e044      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d018      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x86>
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d825      	bhi.n	8002520 <RCCEx_PLLSAI1_Config+0xa4>
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d002      	beq.n	80024de <RCCEx_PLLSAI1_Config+0x62>
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d009      	beq.n	80024f0 <RCCEx_PLLSAI1_Config+0x74>
 80024dc:	e020      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024de:	4b60      	ldr	r3, [pc, #384]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ee:	e01a      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e013      	b.n	800252a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002502:	4b57      	ldr	r3, [pc, #348]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800250e:	4b54      	ldr	r3, [pc, #336]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800251e:	e006      	b.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e004      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	430b      	orrs	r3, r1
 800254c:	4944      	ldr	r1, [pc, #272]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d17d      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002558:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe fb5a 	bl	8000c1c <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256a:	e009      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800256c:	f7fe fb56 	bl	8000c1c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
        break;
 800257e:	e005      	b.n	800258c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002580:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ef      	bne.n	800256c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d160      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6892      	ldr	r2, [r2, #8]
 80025a8:	0211      	lsls	r1, r2, #8
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0912      	lsrs	r2, r2, #4
 80025b0:	0452      	lsls	r2, r2, #17
 80025b2:	430a      	orrs	r2, r1
 80025b4:	492a      	ldr	r1, [pc, #168]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
 80025ba:	e027      	b.n	800260c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d112      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	0211      	lsls	r1, r2, #8
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6912      	ldr	r2, [r2, #16]
 80025d8:	0852      	lsrs	r2, r2, #1
 80025da:	3a01      	subs	r2, #1
 80025dc:	0552      	lsls	r2, r2, #21
 80025de:	430a      	orrs	r2, r1
 80025e0:	491f      	ldr	r1, [pc, #124]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
 80025e6:	e011      	b.n	800260c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6952      	ldr	r2, [r2, #20]
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0652      	lsls	r2, r2, #25
 8002604:	430a      	orrs	r2, r1
 8002606:	4916      	ldr	r1, [pc, #88]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a13      	ldr	r2, [pc, #76]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fb00 	bl	8000c1c <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800261e:	e009      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002620:	f7fe fafc 	bl	8000c1c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	73fb      	strb	r3, [r7, #15]
          break;
 8002632:	e005      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4904      	ldr	r1, [pc, #16]	@ (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002672:	4b6a      	ldr	r3, [pc, #424]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800267e:	4b67      	ldr	r3, [pc, #412]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
       ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002696:	4b61      	ldr	r3, [pc, #388]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
       ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d047      	beq.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e044      	b.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d018      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x86>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d825      	bhi.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d002      	beq.n	80026c6 <RCCEx_PLLSAI2_Config+0x62>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d009      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x74>
 80026c4:	e020      	b.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c6:	4b55      	ldr	r3, [pc, #340]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e01a      	b.n	800270e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d8:	4b50      	ldr	r3, [pc, #320]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e013      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ea:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f6:	4b49      	ldr	r3, [pc, #292]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002706:	e006      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e004      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002716:	bf00      	nop
    }

    if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800271e:	4b3f      	ldr	r3, [pc, #252]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	430b      	orrs	r3, r1
 8002734:	4939      	ldr	r1, [pc, #228]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d167      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a35      	ldr	r2, [pc, #212]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fa66 	bl	8000c1c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002754:	f7fe fa62 	bl	8000c1c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
        break;
 8002766:	e005      	b.n	8002774 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002768:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ef      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d14a      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002780:	4b26      	ldr	r3, [pc, #152]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6892      	ldr	r2, [r2, #8]
 8002790:	0211      	lsls	r1, r2, #8
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	0912      	lsrs	r2, r2, #4
 8002798:	0452      	lsls	r2, r2, #17
 800279a:	430a      	orrs	r2, r1
 800279c:	491f      	ldr	r1, [pc, #124]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	614b      	str	r3, [r1, #20]
 80027a2:	e011      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6912      	ldr	r2, [r2, #16]
 80027ba:	0852      	lsrs	r2, r2, #1
 80027bc:	3a01      	subs	r2, #1
 80027be:	0652      	lsls	r2, r2, #25
 80027c0:	430a      	orrs	r2, r1
 80027c2:	4916      	ldr	r1, [pc, #88]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027c8:	4b14      	ldr	r3, [pc, #80]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a13      	ldr	r2, [pc, #76]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fa22 	bl	8000c1c <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027dc:	f7fe fa1e 	bl	8000c1c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
          break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4904      	ldr	r1, [pc, #16]	@ (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e049      	b.n	80028c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f841 	bl	80028ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f000 f9e0 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e04f      	b.n	800299c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a23      	ldr	r2, [pc, #140]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002926:	d018      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_TIM_Base_Start_IT+0xc8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x76>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d115      	bne.n	8002986 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d015      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002972:	d011      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	e008      	b.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e000      	b.n	800299a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40013400 	.word	0x40013400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	00010007 	.word	0x00010007

080029c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0202 	mvn.w	r2, #2
 80029f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8e9 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8db 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8ec 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0204 	mvn.w	r2, #4
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8c3 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8b5 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8c6 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0208 	mvn.w	r2, #8
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f89d 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f88f 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8a0 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f877 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f869 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f87a 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0201 	mvn.w	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fed6 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d104      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f913 	bl	8002d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00c      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f90b 	bl	8002d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f834 	bl	8002c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0220 	mvn.w	r2, #32
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f8d3 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a46      	ldr	r2, [pc, #280]	@ (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c42:	d00f      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a43      	ldr	r2, [pc, #268]	@ (8002d54 <TIM_Base_SetConfig+0x130>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a42      	ldr	r2, [pc, #264]	@ (8002d58 <TIM_Base_SetConfig+0x134>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a41      	ldr	r2, [pc, #260]	@ (8002d5c <TIM_Base_SetConfig+0x138>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a40      	ldr	r2, [pc, #256]	@ (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a35      	ldr	r2, [pc, #212]	@ (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c84:	d01b      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a32      	ldr	r2, [pc, #200]	@ (8002d54 <TIM_Base_SetConfig+0x130>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d017      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <TIM_Base_SetConfig+0x134>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a30      	ldr	r2, [pc, #192]	@ (8002d5c <TIM_Base_SetConfig+0x138>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00f      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <TIM_Base_SetConfig+0x140>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <TIM_Base_SetConfig+0x144>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_Base_SetConfig+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <TIM_Base_SetConfig+0x148>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	@ (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00f      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <TIM_Base_SetConfig+0x140>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a16      	ldr	r2, [pc, #88]	@ (8002d68 <TIM_Base_SetConfig+0x144>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a15      	ldr	r2, [pc, #84]	@ (8002d6c <TIM_Base_SetConfig+0x148>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]
  }
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40013400 	.word	0x40013400
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e040      	b.n	8002e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fdc4 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	@ 0x24
 8002dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fae0 	bl	80033b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f825 	bl	8002e48 <UART_SetConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01b      	b.n	8002e40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb5f 	bl	80034fc <UART_CheckIdleState>
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b08a      	sub	sp, #40	@ 0x28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4ba4      	ldr	r3, [pc, #656]	@ (8003108 <UART_SetConfig+0x2c0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a99      	ldr	r2, [pc, #612]	@ (800310c <UART_SetConfig+0x2c4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a90      	ldr	r2, [pc, #576]	@ (8003110 <UART_SetConfig+0x2c8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d126      	bne.n	8002f20 <UART_SetConfig+0xd8>
 8002ed2:	4b90      	ldr	r3, [pc, #576]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d81b      	bhi.n	8002f18 <UART_SetConfig+0xd0>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <UART_SetConfig+0xa0>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f11 	.word	0x08002f11
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002efe:	e116      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f06:	e112      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0e:	e10e      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f10:	2308      	movs	r3, #8
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f16:	e10a      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1e:	e106      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7c      	ldr	r2, [pc, #496]	@ (8003118 <UART_SetConfig+0x2d0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d138      	bne.n	8002f9c <UART_SetConfig+0x154>
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d82d      	bhi.n	8002f94 <UART_SetConfig+0x14c>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <UART_SetConfig+0xf8>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08002f95 	.word	0x08002f95
 8002f48:	08002f95 	.word	0x08002f95
 8002f4c:	08002f95 	.word	0x08002f95
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08002f95 	.word	0x08002f95
 8002f58:	08002f95 	.word	0x08002f95
 8002f5c:	08002f95 	.word	0x08002f95
 8002f60:	08002f7d 	.word	0x08002f7d
 8002f64:	08002f95 	.word	0x08002f95
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7a:	e0d8      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f82:	e0d4      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f84:	2304      	movs	r3, #4
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8a:	e0d0      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f92:	e0cc      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9a:	e0c8      	b.n	800312e <UART_SetConfig+0x2e6>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800311c <UART_SetConfig+0x2d4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d125      	bne.n	8002ff2 <UART_SetConfig+0x1aa>
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fb0:	2b30      	cmp	r3, #48	@ 0x30
 8002fb2:	d016      	beq.n	8002fe2 <UART_SetConfig+0x19a>
 8002fb4:	2b30      	cmp	r3, #48	@ 0x30
 8002fb6:	d818      	bhi.n	8002fea <UART_SetConfig+0x1a2>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d00a      	beq.n	8002fd2 <UART_SetConfig+0x18a>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d814      	bhi.n	8002fea <UART_SetConfig+0x1a2>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <UART_SetConfig+0x182>
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d008      	beq.n	8002fda <UART_SetConfig+0x192>
 8002fc8:	e00f      	b.n	8002fea <UART_SetConfig+0x1a2>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd0:	e0ad      	b.n	800312e <UART_SetConfig+0x2e6>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd8:	e0a9      	b.n	800312e <UART_SetConfig+0x2e6>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe0:	e0a5      	b.n	800312e <UART_SetConfig+0x2e6>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe8:	e0a1      	b.n	800312e <UART_SetConfig+0x2e6>
 8002fea:	2310      	movs	r3, #16
 8002fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff0:	e09d      	b.n	800312e <UART_SetConfig+0x2e6>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8003120 <UART_SetConfig+0x2d8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d125      	bne.n	8003048 <UART_SetConfig+0x200>
 8002ffc:	4b45      	ldr	r3, [pc, #276]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003006:	2bc0      	cmp	r3, #192	@ 0xc0
 8003008:	d016      	beq.n	8003038 <UART_SetConfig+0x1f0>
 800300a:	2bc0      	cmp	r3, #192	@ 0xc0
 800300c:	d818      	bhi.n	8003040 <UART_SetConfig+0x1f8>
 800300e:	2b80      	cmp	r3, #128	@ 0x80
 8003010:	d00a      	beq.n	8003028 <UART_SetConfig+0x1e0>
 8003012:	2b80      	cmp	r3, #128	@ 0x80
 8003014:	d814      	bhi.n	8003040 <UART_SetConfig+0x1f8>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <UART_SetConfig+0x1d8>
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	d008      	beq.n	8003030 <UART_SetConfig+0x1e8>
 800301e:	e00f      	b.n	8003040 <UART_SetConfig+0x1f8>
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e082      	b.n	800312e <UART_SetConfig+0x2e6>
 8003028:	2302      	movs	r3, #2
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e07e      	b.n	800312e <UART_SetConfig+0x2e6>
 8003030:	2304      	movs	r3, #4
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e07a      	b.n	800312e <UART_SetConfig+0x2e6>
 8003038:	2308      	movs	r3, #8
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e076      	b.n	800312e <UART_SetConfig+0x2e6>
 8003040:	2310      	movs	r3, #16
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e072      	b.n	800312e <UART_SetConfig+0x2e6>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a35      	ldr	r2, [pc, #212]	@ (8003124 <UART_SetConfig+0x2dc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12a      	bne.n	80030a8 <UART_SetConfig+0x260>
 8003052:	4b30      	ldr	r3, [pc, #192]	@ (8003114 <UART_SetConfig+0x2cc>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003060:	d01a      	beq.n	8003098 <UART_SetConfig+0x250>
 8003062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003066:	d81b      	bhi.n	80030a0 <UART_SetConfig+0x258>
 8003068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800306c:	d00c      	beq.n	8003088 <UART_SetConfig+0x240>
 800306e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003072:	d815      	bhi.n	80030a0 <UART_SetConfig+0x258>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <UART_SetConfig+0x238>
 8003078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307c:	d008      	beq.n	8003090 <UART_SetConfig+0x248>
 800307e:	e00f      	b.n	80030a0 <UART_SetConfig+0x258>
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e052      	b.n	800312e <UART_SetConfig+0x2e6>
 8003088:	2302      	movs	r3, #2
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e04e      	b.n	800312e <UART_SetConfig+0x2e6>
 8003090:	2304      	movs	r3, #4
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e04a      	b.n	800312e <UART_SetConfig+0x2e6>
 8003098:	2308      	movs	r3, #8
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e046      	b.n	800312e <UART_SetConfig+0x2e6>
 80030a0:	2310      	movs	r3, #16
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e042      	b.n	800312e <UART_SetConfig+0x2e6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <UART_SetConfig+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d13a      	bne.n	8003128 <UART_SetConfig+0x2e0>
 80030b2:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030c0:	d01a      	beq.n	80030f8 <UART_SetConfig+0x2b0>
 80030c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030c6:	d81b      	bhi.n	8003100 <UART_SetConfig+0x2b8>
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030cc:	d00c      	beq.n	80030e8 <UART_SetConfig+0x2a0>
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d2:	d815      	bhi.n	8003100 <UART_SetConfig+0x2b8>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <UART_SetConfig+0x298>
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030dc:	d008      	beq.n	80030f0 <UART_SetConfig+0x2a8>
 80030de:	e00f      	b.n	8003100 <UART_SetConfig+0x2b8>
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e022      	b.n	800312e <UART_SetConfig+0x2e6>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e01e      	b.n	800312e <UART_SetConfig+0x2e6>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e01a      	b.n	800312e <UART_SetConfig+0x2e6>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e016      	b.n	800312e <UART_SetConfig+0x2e6>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e012      	b.n	800312e <UART_SetConfig+0x2e6>
 8003108:	efff69f3 	.word	0xefff69f3
 800310c:	40008000 	.word	0x40008000
 8003110:	40013800 	.word	0x40013800
 8003114:	40021000 	.word	0x40021000
 8003118:	40004400 	.word	0x40004400
 800311c:	40004800 	.word	0x40004800
 8003120:	40004c00 	.word	0x40004c00
 8003124:	40005000 	.word	0x40005000
 8003128:	2310      	movs	r3, #16
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a9f      	ldr	r2, [pc, #636]	@ (80033b0 <UART_SetConfig+0x568>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d17a      	bne.n	800322e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313c:	2b08      	cmp	r3, #8
 800313e:	d824      	bhi.n	800318a <UART_SetConfig+0x342>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0x300>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800318b 	.word	0x0800318b
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800317b 	.word	0x0800317b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800318b 	.word	0x0800318b
 8003168:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe fdde 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8003170:	61f8      	str	r0, [r7, #28]
        break;
 8003172:	e010      	b.n	8003196 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b8f      	ldr	r3, [pc, #572]	@ (80033b4 <UART_SetConfig+0x56c>)
 8003176:	61fb      	str	r3, [r7, #28]
        break;
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7fe fd3f 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 800317e:	61f8      	str	r0, [r7, #28]
        break;
 8003180:	e009      	b.n	8003196 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003186:	61fb      	str	r3, [r7, #28]
        break;
 8003188:	e005      	b.n	8003196 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80fb 	beq.w	8003394 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d305      	bcc.n	80031ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d903      	bls.n	80031c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031c0:	e0e8      	b.n	8003394 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2200      	movs	r2, #0
 80031c6:	461c      	mov	r4, r3
 80031c8:	4615      	mov	r5, r2
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	022b      	lsls	r3, r5, #8
 80031d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031d8:	0222      	lsls	r2, r4, #8
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	6849      	ldr	r1, [r1, #4]
 80031de:	0849      	lsrs	r1, r1, #1
 80031e0:	2000      	movs	r0, #0
 80031e2:	4688      	mov	r8, r1
 80031e4:	4681      	mov	r9, r0
 80031e6:	eb12 0a08 	adds.w	sl, r2, r8
 80031ea:	eb43 0b09 	adc.w	fp, r3, r9
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031fc:	4650      	mov	r0, sl
 80031fe:	4659      	mov	r1, fp
 8003200:	f7fc ffe6 	bl	80001d0 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003212:	d308      	bcc.n	8003226 <UART_SetConfig+0x3de>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321a:	d204      	bcs.n	8003226 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e0b6      	b.n	8003394 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800322c:	e0b2      	b.n	8003394 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003236:	d15e      	bne.n	80032f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003238:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800323c:	2b08      	cmp	r3, #8
 800323e:	d828      	bhi.n	8003292 <UART_SetConfig+0x44a>
 8003240:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <UART_SetConfig+0x400>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003275 	.word	0x08003275
 8003250:	0800327d 	.word	0x0800327d
 8003254:	08003293 	.word	0x08003293
 8003258:	08003283 	.word	0x08003283
 800325c:	08003293 	.word	0x08003293
 8003260:	08003293 	.word	0x08003293
 8003264:	08003293 	.word	0x08003293
 8003268:	0800328b 	.word	0x0800328b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe fd5e 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8003270:	61f8      	str	r0, [r7, #28]
        break;
 8003272:	e014      	b.n	800329e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7fe fd70 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003278:	61f8      	str	r0, [r7, #28]
        break;
 800327a:	e010      	b.n	800329e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800327c:	4b4d      	ldr	r3, [pc, #308]	@ (80033b4 <UART_SetConfig+0x56c>)
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e00d      	b.n	800329e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7fe fcbb 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8003286:	61f8      	str	r0, [r7, #28]
        break;
 8003288:	e009      	b.n	800329e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328e:	61fb      	str	r3, [r7, #28]
        break;
 8003290:	e005      	b.n	800329e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800329c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d077      	beq.n	8003394 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005a      	lsls	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d916      	bls.n	80032ee <UART_SetConfig+0x4a6>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c6:	d212      	bcs.n	80032ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f023 030f 	bic.w	r3, r3, #15
 80032d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	b29a      	uxth	r2, r3
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	8afa      	ldrh	r2, [r7, #22]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	e052      	b.n	8003394 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032f4:	e04e      	b.n	8003394 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d827      	bhi.n	800334e <UART_SetConfig+0x506>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <UART_SetConfig+0x4bc>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003329 	.word	0x08003329
 8003308:	08003331 	.word	0x08003331
 800330c:	08003339 	.word	0x08003339
 8003310:	0800334f 	.word	0x0800334f
 8003314:	0800333f 	.word	0x0800333f
 8003318:	0800334f 	.word	0x0800334f
 800331c:	0800334f 	.word	0x0800334f
 8003320:	0800334f 	.word	0x0800334f
 8003324:	08003347 	.word	0x08003347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7fe fd00 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 800332c:	61f8      	str	r0, [r7, #28]
        break;
 800332e:	e014      	b.n	800335a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7fe fd12 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003334:	61f8      	str	r0, [r7, #28]
        break;
 8003336:	e010      	b.n	800335a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003338:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <UART_SetConfig+0x56c>)
 800333a:	61fb      	str	r3, [r7, #28]
        break;
 800333c:	e00d      	b.n	800335a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333e:	f7fe fc5d 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8003342:	61f8      	str	r0, [r7, #28]
        break;
 8003344:	e009      	b.n	800335a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334a:	61fb      	str	r3, [r7, #28]
        break;
 800334c:	e005      	b.n	800335a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003358:	bf00      	nop
    }

    if (pclk != 0U)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d019      	beq.n	8003394 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	085a      	lsrs	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	441a      	add	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d909      	bls.n	800338e <UART_SetConfig+0x546>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d205      	bcs.n	800338e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e002      	b.n	8003394 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	@ 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40008000 	.word	0x40008000
 80033b4:	00f42400 	.word	0x00f42400

080033b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01a      	beq.n	80034ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b6:	d10a      	bne.n	80034ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b098      	sub	sp, #96	@ 0x60
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800350c:	f7fd fb86 	bl	8000c1c <HAL_GetTick>
 8003510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d12e      	bne.n	800357e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f88c 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d021      	beq.n	800357e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800354e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
 800355a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e6      	bne.n	800353a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e062      	b.n	8003644 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d149      	bne.n	8003620 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f856 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03c      	beq.n	8003620 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	623b      	str	r3, [r7, #32]
   return(result);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e6      	bne.n	80035a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f8:	61fa      	str	r2, [r7, #28]
 80035fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	617b      	str	r3, [r7, #20]
   return(result);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e5      	bne.n	80035d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e011      	b.n	8003644 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3758      	adds	r7, #88	@ 0x58
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365c:	e04f      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d04b      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fd fad9 	bl	8000c1c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <UART_WaitOnFlagUntilTimeout+0x30>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e04e      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d037      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b80      	cmp	r3, #128	@ 0x80
 8003692:	d034      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d031      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d110      	bne.n	80036ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f838 	bl	8003726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2208      	movs	r2, #8
 80036ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e029      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d8:	d111      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f81e 	bl	8003726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00f      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d0a0      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003726:	b480      	push	{r7}
 8003728:	b095      	sub	sp, #84	@ 0x54
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800374c:	643b      	str	r3, [r7, #64]	@ 0x40
 800374e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e6      	bne.n	800372e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3308      	adds	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e5      	bne.n	8003760 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003798:	2b01      	cmp	r3, #1
 800379a:	d118      	bne.n	80037ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0310 	bic.w	r3, r3, #16
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	613b      	str	r3, [r7, #16]
   return(result);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037e2:	bf00      	nop
 80037e4:	3754      	adds	r7, #84	@ 0x54
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003800:	2b84      	cmp	r3, #132	@ 0x84
 8003802:	d005      	beq.n	8003810 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003804:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	3303      	adds	r3, #3
 800380e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003810:	68fb      	ldr	r3, [r7, #12]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003824:	f3ef 8305 	mrs	r3, IPSR
 8003828:	607b      	str	r3, [r7, #4]
  return(result);
 800382a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003846:	f001 f973 	bl	8004b30 <vTaskStartScheduler>
  
  return osOK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}

08003850 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af04      	add	r7, sp, #16
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d020      	beq.n	80038a4 <osThreadCreate+0x54>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01c      	beq.n	80038a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685c      	ldr	r4, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691e      	ldr	r6, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ffb6 	bl	80037ee <makeFreeRtosPriority>
 8003882:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800388c:	9202      	str	r2, [sp, #8]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	9100      	str	r1, [sp, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	4632      	mov	r2, r6
 8003896:	4629      	mov	r1, r5
 8003898:	4620      	mov	r0, r4
 800389a:	f000 ff63 	bl	8004764 <xTaskCreateStatic>
 800389e:	4603      	mov	r3, r0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e01c      	b.n	80038de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685c      	ldr	r4, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff98 	bl	80037ee <makeFreeRtosPriority>
 80038be:	4602      	mov	r2, r0
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	9200      	str	r2, [sp, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4632      	mov	r2, r6
 80038cc:	4629      	mov	r1, r5
 80038ce:	4620      	mov	r0, r4
 80038d0:	f000 ffa8 	bl	8004824 <xTaskCreate>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <osDelay+0x16>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	e000      	b.n	8003900 <osDelay+0x18>
 80038fe:	2301      	movs	r3, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f8df 	bl	8004ac4 <vTaskDelay>
  
  return osOK;
 8003906:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	2001      	movs	r0, #1
 8003928:	f000 fab5 	bl	8003e96 <xQueueCreateMutexStatic>
 800392c:	4603      	mov	r3, r0
 800392e:	e003      	b.n	8003938 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003930:	2001      	movs	r0, #1
 8003932:	f000 fa98 	bl	8003e66 <xQueueCreateMutex>
 8003936:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <osMutexWait+0x18>
    return osErrorParameter;
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	e03a      	b.n	80039ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d103      	bne.n	800396c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e009      	b.n	8003980 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <osMutexWait+0x40>
      ticks = 1;
 800397c:	2301      	movs	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003980:	f7ff ff4d 	bl	800381e <inHandlerMode>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	461a      	mov	r2, r3
 8003990:	2100      	movs	r1, #0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fd3c 	bl	8004410 <xQueueReceiveFromISR>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <osMutexWait+0x62>
      return osErrorOS;
 800399e:	23ff      	movs	r3, #255	@ 0xff
 80039a0:	e015      	b.n	80039ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d011      	beq.n	80039cc <osMutexWait+0x8c>
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <osMutexWait+0x98>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	e008      	b.n	80039cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fc17 	bl	80041f0 <xQueueSemaphoreTake>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d001      	beq.n	80039cc <osMutexWait+0x8c>
    return osErrorOS;
 80039c8:	23ff      	movs	r3, #255	@ 0xff
 80039ca:	e000      	b.n	80039ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80039ec:	f7ff ff17 	bl	800381e <inHandlerMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb67 	bl	80040d0 <xQueueGiveFromISR>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <osMutexRelease+0x30>
      return osErrorOS;
 8003a08:	23ff      	movs	r3, #255	@ 0xff
 8003a0a:	e017      	b.n	8003a3c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d013      	beq.n	8003a3a <osMutexRelease+0x5e>
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <osMutexRelease+0x68>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	e00a      	b.n	8003a3a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003a24:	2300      	movs	r3, #0
 8003a26:	2200      	movs	r2, #0
 8003a28:	2100      	movs	r1, #0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa4e 	bl	8003ecc <xQueueGenericSend>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003a36:	23ff      	movs	r3, #255	@ 0xff
 8003a38:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0208 	add.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 0208 	add.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d103      	bne.n	8003b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e002      	b.n	8003b18 <vListInsert+0x2e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d2f6      	bcs.n	8003b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6852      	ldr	r2, [r2, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d103      	bne.n	8003b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bdc:	f001 ff1c 	bl	8005a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	441a      	add	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	22ff      	movs	r2, #255	@ 0xff
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	22ff      	movs	r2, #255	@ 0xff
 8003c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d114      	bne.n	8003c5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01a      	beq.n	8003c70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f9d0 	bl	8004fe4 <xTaskRemoveFromEventList>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d012      	beq.n	8003c70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <xQueueGenericReset+0xd0>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	e009      	b.n	8003c70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3310      	adds	r3, #16
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fef1 	bl	8003a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3324      	adds	r3, #36	@ 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff feec 	bl	8003a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c70:	f001 ff04 	bl	8005a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	@ 0x38
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <xQueueGenericCreateStatic+0x56>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <xQueueGenericCreateStatic+0x5a>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericCreateStatic+0x5c>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <xQueueGenericCreateStatic+0x84>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <xQueueGenericCreateStatic+0x88>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <xQueueGenericCreateStatic+0x8a>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	61fb      	str	r3, [r7, #28]
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	e7fd      	b.n	8003d26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d2a:	2348      	movs	r3, #72	@ 0x48
 8003d2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b48      	cmp	r3, #72	@ 0x48
 8003d32:	d00b      	beq.n	8003d4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	61bb      	str	r3, [r7, #24]
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f840 	bl	8003df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3730      	adds	r7, #48	@ 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b08a      	sub	sp, #40	@ 0x28
 8003d82:	af02      	add	r7, sp, #8
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	613b      	str	r3, [r7, #16]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3348      	adds	r3, #72	@ 0x48
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 ff4f 	bl	8005c5c <pvPortMalloc>
 8003dbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d011      	beq.n	8003dea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3348      	adds	r3, #72	@ 0x48
 8003dce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd8:	79fa      	ldrb	r2, [r7, #7]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f805 	bl	8003df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dea:	69bb      	ldr	r3, [r7, #24]
	}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e22:	2101      	movs	r1, #1
 8003e24:	69b8      	ldr	r0, [r7, #24]
 8003e26:	f7ff fec3 	bl	8003bb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e52:	2300      	movs	r3, #0
 8003e54:	2200      	movs	r2, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f837 	bl	8003ecc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6939      	ldr	r1, [r7, #16]
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f7ff ff7d 	bl	8003d7e <xQueueGenericCreate>
 8003e84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ffd3 	bl	8003e32 <prvInitialiseMutex>

		return xNewQueue;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
	}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b088      	sub	sp, #32
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	6039      	str	r1, [r7, #0]
 8003ea0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	f7ff fee5 	bl	8003c84 <xQueueGenericCreateStatic>
 8003eba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ffb8 	bl	8003e32 <prvInitialiseMutex>

		return xNewQueue;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	@ 0x38
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eda:	2300      	movs	r3, #0
 8003edc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericSend+0x34>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSend+0x42>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <xQueueGenericSend+0x46>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <xQueueGenericSend+0x48>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <xQueueGenericSend+0x64>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSend+0x72>
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <xQueueGenericSend+0x76>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericSend+0x78>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xQueueGenericSend+0x94>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f60:	f001 fa06 	bl	8005370 <xTaskGetSchedulerState>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <xQueueGenericSend+0xa4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <xQueueGenericSend+0xa8>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <xQueueGenericSend+0xaa>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	61fb      	str	r3, [r7, #28]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f92:	f001 fd41 	bl	8005a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <xQueueGenericSend+0xdc>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d129      	bne.n	8003ffc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fae:	f000 fac9 	bl	8004544 <prvCopyDataToQueue>
 8003fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	3324      	adds	r3, #36	@ 0x24
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f80f 	bl	8004fe4 <xTaskRemoveFromEventList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80040cc <xQueueGenericSend+0x200>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	e00a      	b.n	8003ff4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fe4:	4b39      	ldr	r3, [pc, #228]	@ (80040cc <xQueueGenericSend+0x200>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ff4:	f001 fd42 	bl	8005a7c <vPortExitCritical>
				return pdPASS;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e063      	b.n	80040c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004002:	f001 fd3b 	bl	8005a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004006:	2300      	movs	r3, #0
 8004008:	e05c      	b.n	80040c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f849 	bl	80050ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800401a:	2301      	movs	r3, #1
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800401e:	f001 fd2d 	bl	8005a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004022:	f000 fdef 	bl	8004c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004026:	f001 fcf7 	bl	8005a18 <vPortEnterCritical>
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004030:	b25b      	sxtb	r3, r3
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d103      	bne.n	8004040 <xQueueGenericSend+0x174>
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004046:	b25b      	sxtb	r3, r3
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d103      	bne.n	8004056 <xQueueGenericSend+0x18a>
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004056:	f001 fd11 	bl	8005a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800405a:	1d3a      	adds	r2, r7, #4
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f838 	bl	80050d8 <xTaskCheckForTimeOut>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d124      	bne.n	80040b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800406e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004070:	f000 fb60 	bl	8004734 <prvIsQueueFull>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	3310      	adds	r3, #16
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 ff88 	bl	8004f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800408a:	f000 faeb 	bl	8004664 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800408e:	f000 fdc7 	bl	8004c20 <xTaskResumeAll>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f af7c 	bne.w	8003f92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800409a:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <xQueueGenericSend+0x200>)
 800409c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	e772      	b.n	8003f92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ae:	f000 fad9 	bl	8004664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040b2:	f000 fdb5 	bl	8004c20 <xTaskResumeAll>
 80040b6:	e76c      	b.n	8003f92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ba:	f000 fad3 	bl	8004664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040be:	f000 fdaf 	bl	8004c20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3738      	adds	r7, #56	@ 0x38
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	@ 0x38
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	623b      	str	r3, [r7, #32]
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	61fb      	str	r3, [r7, #28]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <xQueueGiveFromISR+0x5c>
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <xQueueGiveFromISR+0x60>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <xQueueGiveFromISR+0x62>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	61bb      	str	r3, [r7, #24]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800414e:	f001 fd43 	bl	8005bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004152:	f3ef 8211 	mrs	r2, BASEPRI
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	617a      	str	r2, [r7, #20]
 8004168:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800416a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800416c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800417a:	429a      	cmp	r2, r3
 800417c:	d22b      	bcs.n	80041d6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004190:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d112      	bne.n	80041c0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	3324      	adds	r3, #36	@ 0x24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 ff1c 	bl	8004fe4 <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00e      	beq.n	80041d0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e007      	b.n	80041d0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	b25a      	sxtb	r2, r3
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041d0:	2301      	movs	r3, #1
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d4:	e001      	b.n	80041da <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3738      	adds	r7, #56	@ 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	@ 0x38
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	623b      	str	r3, [r7, #32]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	61fb      	str	r3, [r7, #28]
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004244:	f001 f894 	bl	8005370 <xTaskGetSchedulerState>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xQueueSemaphoreTake+0x64>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueSemaphoreTake+0x68>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueSemaphoreTake+0x6a>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61bb      	str	r3, [r7, #24]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004276:	f001 fbcf 	bl	8005a18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d024      	beq.n	80042d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004296:	f001 fa17 	bl	80056c8 <pvTaskIncrementMutexHeldCount>
 800429a:	4602      	mov	r2, r0
 800429c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00f      	beq.n	80042c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	3310      	adds	r3, #16
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fe99 	bl	8004fe4 <xTaskRemoveFromEventList>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b54      	ldr	r3, [pc, #336]	@ (800440c <xQueueSemaphoreTake+0x21c>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042c8:	f001 fbd8 	bl	8005a7c <vPortExitCritical>
				return pdPASS;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e098      	b.n	8004402 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d112      	bne.n	80042fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	617b      	str	r3, [r7, #20]
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042f4:	f001 fbc2 	bl	8005a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e082      	b.n	8004402 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fed0 	bl	80050ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004310:	f001 fbb4 	bl	8005a7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004314:	f000 fc76 	bl	8004c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004318:	f001 fb7e 	bl	8005a18 <vPortEnterCritical>
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d103      	bne.n	8004332 <xQueueSemaphoreTake+0x142>
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d103      	bne.n	8004348 <xQueueSemaphoreTake+0x158>
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004348:	f001 fb98 	bl	8005a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800434c:	463a      	mov	r2, r7
 800434e:	f107 030c 	add.w	r3, r7, #12
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 febf 	bl	80050d8 <xTaskCheckForTimeOut>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d132      	bne.n	80043c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004360:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004362:	f000 f9d1 	bl	8004708 <prvIsQueueEmpty>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d026      	beq.n	80043ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004374:	f001 fb50 	bl	8005a18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4618      	mov	r0, r3
 800437e:	f001 f815 	bl	80053ac <xTaskPriorityInherit>
 8004382:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004384:	f001 fb7a 	bl	8005a7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	3324      	adds	r3, #36	@ 0x24
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fe01 	bl	8004f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004396:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004398:	f000 f964 	bl	8004664 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800439c:	f000 fc40 	bl	8004c20 <xTaskResumeAll>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f47f af67 	bne.w	8004276 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80043a8:	4b18      	ldr	r3, [pc, #96]	@ (800440c <xQueueSemaphoreTake+0x21c>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	e75d      	b.n	8004276 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043bc:	f000 f952 	bl	8004664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c0:	f000 fc2e 	bl	8004c20 <xTaskResumeAll>
 80043c4:	e757      	b.n	8004276 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043c8:	f000 f94c 	bl	8004664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043cc:	f000 fc28 	bl	8004c20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043d2:	f000 f999 	bl	8004708 <prvIsQueueEmpty>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f43f af4c 	beq.w	8004276 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80043e4:	f001 fb18 	bl	8005a18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043ea:	f000 f893 	bl	8004514 <prvGetDisinheritPriorityAfterTimeout>
 80043ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 f8d6 	bl	80055a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80043fc:	f001 fb3e 	bl	8005a7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004402:	4618      	mov	r0, r3
 8004404:	3738      	adds	r7, #56	@ 0x38
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08e      	sub	sp, #56	@ 0x38
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	623b      	str	r3, [r7, #32]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <xQueueReceiveFromISR+0x3c>
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueReceiveFromISR+0x40>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueReceiveFromISR+0x42>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800446e:	f001 fbb3 	bl	8005bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8004472:	f3ef 8211 	mrs	r2, BASEPRI
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	61ba      	str	r2, [r7, #24]
 8004488:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800448a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02f      	beq.n	80044fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044a8:	f000 f8b6 	bl	8004618 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d112      	bne.n	80044e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	3310      	adds	r3, #16
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fd8a 	bl	8004fe4 <xTaskRemoveFromEventList>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e007      	b.n	80044f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e8:	3301      	adds	r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80044f4:	2301      	movs	r3, #1
 80044f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f8:	e001      	b.n	80044fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f383 8811 	msr	BASEPRI, r3
}
 8004508:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800450a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	@ 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1c3 0307 	rsb	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e001      	b.n	8004536 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004536:	68fb      	ldr	r3, [r7, #12]
	}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d14d      	bne.n	8004606 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff92 	bl	8005498 <xTaskPriorityDisinherit>
 8004574:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	e043      	b.n	8004606 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d119      	bne.n	80045b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6858      	ldr	r0, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	461a      	mov	r2, r3
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	f001 fdd6 	bl	8006140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	441a      	add	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d32b      	bcc.n	8004606 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	e026      	b.n	8004606 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68d8      	ldr	r0, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	461a      	mov	r2, r3
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	f001 fdbc 	bl	8006140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	425b      	negs	r3, r3
 80045d2:	441a      	add	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d207      	bcs.n	80045f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	425b      	negs	r3, r3
 80045ee:	441a      	add	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d105      	bne.n	8004606 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3b01      	subs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800460e:	697b      	ldr	r3, [r7, #20]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	441a      	add	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	d303      	bcc.n	800464c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68d9      	ldr	r1, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	461a      	mov	r2, r3
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	f001 fd72 	bl	8006140 <memcpy>
	}
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800466c:	f001 f9d4 	bl	8005a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004676:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004678:	e011      	b.n	800469e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3324      	adds	r3, #36	@ 0x24
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fcac 	bl	8004fe4 <xTaskRemoveFromEventList>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004692:	f000 fd85 	bl	80051a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3b01      	subs	r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dce9      	bgt.n	800467a <prvUnlockQueue+0x16>
 80046a6:	e000      	b.n	80046aa <prvUnlockQueue+0x46>
					break;
 80046a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	22ff      	movs	r2, #255	@ 0xff
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046b2:	f001 f9e3 	bl	8005a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046b6:	f001 f9af 	bl	8005a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046c2:	e011      	b.n	80046e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3310      	adds	r3, #16
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fc87 	bl	8004fe4 <xTaskRemoveFromEventList>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046dc:	f000 fd60 	bl	80051a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	dce9      	bgt.n	80046c4 <prvUnlockQueue+0x60>
 80046f0:	e000      	b.n	80046f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	22ff      	movs	r2, #255	@ 0xff
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80046fc:	f001 f9be 	bl	8005a7c <vPortExitCritical>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004710:	f001 f982 	bl	8005a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e001      	b.n	8004726 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004726:	f001 f9a9 	bl	8005a7c <vPortExitCritical>

	return xReturn;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800473c:	f001 f96c 	bl	8005a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	429a      	cmp	r2, r3
 800474a:	d102      	bne.n	8004752 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f001 f991 	bl	8005a7c <vPortExitCritical>

	return xReturn;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	@ 0x38
 8004768:	af04      	add	r7, sp, #16
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	623b      	str	r3, [r7, #32]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61fb      	str	r3, [r7, #28]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ae:	23a0      	movs	r3, #160	@ 0xa0
 80047b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80047b6:	d00b      	beq.n	80047d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	61bb      	str	r3, [r7, #24]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01e      	beq.n	8004816 <xTaskCreateStatic+0xb2>
 80047d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01b      	beq.n	8004816 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047f0:	2300      	movs	r3, #0
 80047f2:	9303      	str	r3, [sp, #12]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f851 	bl	80048b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004810:	f000 f8ee 	bl	80049f0 <prvAddNewTaskToReadyList>
 8004814:	e001      	b.n	800481a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800481a:	697b      	ldr	r3, [r7, #20]
	}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	@ 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08c      	sub	sp, #48	@ 0x30
 8004828:	af04      	add	r7, sp, #16
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fa0f 	bl	8005c5c <pvPortMalloc>
 800483e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00e      	beq.n	8004864 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004846:	20a0      	movs	r0, #160	@ 0xa0
 8004848:	f001 fa08 	bl	8005c5c <pvPortMalloc>
 800484c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
 800485a:	e005      	b.n	8004868 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f001 facb 	bl	8005df8 <vPortFree>
 8004862:	e001      	b.n	8004868 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	2300      	movs	r3, #0
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	9302      	str	r3, [sp, #8]
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f80f 	bl	80048b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004892:	69f8      	ldr	r0, [r7, #28]
 8004894:	f000 f8ac 	bl	80049f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004898:	2301      	movs	r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e002      	b.n	80048a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048a4:	69bb      	ldr	r3, [r7, #24]
	}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048c8:	3b01      	subs	r3, #1
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f023 0307 	bic.w	r3, r3, #7
 80048d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <prvInitialiseNewTask+0x4a>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617b      	str	r3, [r7, #20]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01f      	beq.n	8004940 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e012      	b.n	800492c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	7819      	ldrb	r1, [r3, #0]
 800490e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	3334      	adds	r3, #52	@ 0x34
 8004916:	460a      	mov	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b0f      	cmp	r3, #15
 8004930:	d9e9      	bls.n	8004906 <prvInitialiseNewTask+0x56>
 8004932:	e000      	b.n	8004936 <prvInitialiseNewTask+0x86>
			{
				break;
 8004934:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493e:	e003      	b.n	8004948 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	2b06      	cmp	r3, #6
 800494c:	d901      	bls.n	8004952 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800494e:	2306      	movs	r3, #6
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	2200      	movs	r2, #0
 8004962:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff f88d 	bl	8003a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	3318      	adds	r3, #24
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f888 	bl	8003a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	f1c3 0207 	rsb	r2, r3, #7
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2200      	movs	r2, #0
 8004992:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	2200      	movs	r2, #0
 800499a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	334c      	adds	r3, #76	@ 0x4c
 80049a2:	224c      	movs	r2, #76	@ 0x4c
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fb46 	bl	8006038 <memset>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	4a0d      	ldr	r2, [pc, #52]	@ (80049e4 <prvInitialiseNewTask+0x134>)
 80049b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	4a0c      	ldr	r2, [pc, #48]	@ (80049e8 <prvInitialiseNewTask+0x138>)
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	4a0c      	ldr	r2, [pc, #48]	@ (80049ec <prvInitialiseNewTask+0x13c>)
 80049bc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	69b8      	ldr	r0, [r7, #24]
 80049c4:	f000 fefa 	bl	80057bc <pxPortInitialiseStack>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049da:	bf00      	nop
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000117c 	.word	0x2000117c
 80049e8:	200011e4 	.word	0x200011e4
 80049ec:	2000124c 	.word	0x2000124c

080049f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049f8:	f001 f80e 	bl	8005a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049fc:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <prvAddNewTaskToReadyList+0xb8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a29      	ldr	r2, [pc, #164]	@ (8004aa8 <prvAddNewTaskToReadyList+0xb8>)
 8004a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a06:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <prvAddNewTaskToReadyList+0xbc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a0e:	4a27      	ldr	r2, [pc, #156]	@ (8004aac <prvAddNewTaskToReadyList+0xbc>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a14:	4b24      	ldr	r3, [pc, #144]	@ (8004aa8 <prvAddNewTaskToReadyList+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d110      	bne.n	8004a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a1c:	f000 fbe4 	bl	80051e8 <prvInitialiseTaskLists>
 8004a20:	e00d      	b.n	8004a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <prvAddNewTaskToReadyList+0xc0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a2a:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <prvAddNewTaskToReadyList+0xbc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d802      	bhi.n	8004a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a38:	4a1c      	ldr	r2, [pc, #112]	@ (8004aac <prvAddNewTaskToReadyList+0xbc>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc4>)
 8004a46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	4a18      	ldr	r2, [pc, #96]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc8>)
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <prvAddNewTaskToReadyList+0xcc>)
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff f816 	bl	8003aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a76:	f001 f801 	bl	8005a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <prvAddNewTaskToReadyList+0xc0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <prvAddNewTaskToReadyList+0xbc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d207      	bcs.n	8004aa0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <prvAddNewTaskToReadyList+0xd0>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000570 	.word	0x20000570
 8004aac:	20000470 	.word	0x20000470
 8004ab0:	2000057c 	.word	0x2000057c
 8004ab4:	2000058c 	.word	0x2000058c
 8004ab8:	20000578 	.word	0x20000578
 8004abc:	20000474 	.word	0x20000474
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <vTaskDelay+0x64>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <vTaskDelay+0x32>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	60bb      	str	r3, [r7, #8]
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	e7fd      	b.n	8004af2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004af6:	f000 f885 	bl	8004c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004afa:	2100      	movs	r1, #0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fdf7 	bl	80056f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b02:	f000 f88d 	bl	8004c20 <xTaskResumeAll>
 8004b06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d107      	bne.n	8004b1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <vTaskDelay+0x68>)
 8004b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000598 	.word	0x20000598
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b3e:	463a      	mov	r2, r7
 8004b40:	1d39      	adds	r1, r7, #4
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fb fd34 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	9202      	str	r2, [sp, #8]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	460a      	mov	r2, r1
 8004b5e:	4921      	ldr	r1, [pc, #132]	@ (8004be4 <vTaskStartScheduler+0xb4>)
 8004b60:	4821      	ldr	r0, [pc, #132]	@ (8004be8 <vTaskStartScheduler+0xb8>)
 8004b62:	f7ff fdff 	bl	8004764 <xTaskCreateStatic>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4a20      	ldr	r2, [pc, #128]	@ (8004bec <vTaskStartScheduler+0xbc>)
 8004b6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bec <vTaskStartScheduler+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e001      	b.n	8004b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d11b      	bne.n	8004bbc <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	613b      	str	r3, [r7, #16]
}
 8004b96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b98:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <vTaskStartScheduler+0xc0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	334c      	adds	r3, #76	@ 0x4c
 8004b9e:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <vTaskStartScheduler+0xc4>)
 8004ba0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <vTaskStartScheduler+0xc8>)
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <vTaskStartScheduler+0xcc>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bb0:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <vTaskStartScheduler+0xd0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bb6:	f000 fe8b 	bl	80058d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bba:	e00f      	b.n	8004bdc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d10b      	bne.n	8004bdc <vTaskStartScheduler+0xac>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <vTaskStartScheduler+0xa8>
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	08006298 	.word	0x08006298
 8004be8:	080051b9 	.word	0x080051b9
 8004bec:	20000594 	.word	0x20000594
 8004bf0:	20000470 	.word	0x20000470
 8004bf4:	20000010 	.word	0x20000010
 8004bf8:	20000590 	.word	0x20000590
 8004bfc:	2000057c 	.word	0x2000057c
 8004c00:	20000574 	.word	0x20000574

08004c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <vTaskSuspendAll+0x18>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	4a03      	ldr	r2, [pc, #12]	@ (8004c1c <vTaskSuspendAll+0x18>)
 8004c10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c12:	bf00      	nop
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000598 	.word	0x20000598

08004c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c2e:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <xTaskResumeAll+0x118>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <xTaskResumeAll+0x2e>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	603b      	str	r3, [r7, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c4e:	f000 fee3 	bl	8005a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c52:	4b39      	ldr	r3, [pc, #228]	@ (8004d38 <xTaskResumeAll+0x118>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a37      	ldr	r2, [pc, #220]	@ (8004d38 <xTaskResumeAll+0x118>)
 8004c5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5c:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <xTaskResumeAll+0x118>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d161      	bne.n	8004d28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c64:	4b35      	ldr	r3, [pc, #212]	@ (8004d3c <xTaskResumeAll+0x11c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05d      	beq.n	8004d28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c6c:	e02e      	b.n	8004ccc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6e:	4b34      	ldr	r3, [pc, #208]	@ (8004d40 <xTaskResumeAll+0x120>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3318      	adds	r3, #24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe ff6e 	bl	8003b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe ff69 	bl	8003b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	409a      	lsls	r2, r3
 8004c92:	4b2c      	ldr	r3, [pc, #176]	@ (8004d44 <xTaskResumeAll+0x124>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <xTaskResumeAll+0x124>)
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <xTaskResumeAll+0x128>)
 8004caa:	441a      	add	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fef5 	bl	8003aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbc:	4b23      	ldr	r3, [pc, #140]	@ (8004d4c <xTaskResumeAll+0x12c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cc6:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <xTaskResumeAll+0x130>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <xTaskResumeAll+0x120>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1cc      	bne.n	8004c6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cda:	f000 fb29 	bl	8005330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cde:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <xTaskResumeAll+0x134>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cea:	f000 f837 	bl	8004d5c <xTaskIncrementTick>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004cf4:	4b16      	ldr	r3, [pc, #88]	@ (8004d50 <xTaskResumeAll+0x130>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f1      	bne.n	8004cea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d06:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <xTaskResumeAll+0x134>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d0c:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <xTaskResumeAll+0x130>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <xTaskResumeAll+0x138>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d28:	f000 fea8 	bl	8005a7c <vPortExitCritical>

	return xAlreadyYielded;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000598 	.word	0x20000598
 8004d3c:	20000570 	.word	0x20000570
 8004d40:	20000530 	.word	0x20000530
 8004d44:	20000578 	.word	0x20000578
 8004d48:	20000474 	.word	0x20000474
 8004d4c:	20000470 	.word	0x20000470
 8004d50:	20000584 	.word	0x20000584
 8004d54:	20000580 	.word	0x20000580
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d66:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea4 <xTaskIncrementTick+0x148>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 808f 	bne.w	8004e8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <xTaskIncrementTick+0x14c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ea8 <xTaskIncrementTick+0x14c>)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d121      	bne.n	8004dc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d84:	4b49      	ldr	r3, [pc, #292]	@ (8004eac <xTaskIncrementTick+0x150>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <xTaskIncrementTick+0x46>
 8004da6:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <xTaskIncrementTick+0x150>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	4b40      	ldr	r3, [pc, #256]	@ (8004eb0 <xTaskIncrementTick+0x154>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3e      	ldr	r2, [pc, #248]	@ (8004eac <xTaskIncrementTick+0x150>)
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb0 <xTaskIncrementTick+0x154>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb4 <xTaskIncrementTick+0x158>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb4 <xTaskIncrementTick+0x158>)
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	f000 fab4 	bl	8005330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <xTaskIncrementTick+0x15c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d348      	bcc.n	8004e64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd2:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <xTaskIncrementTick+0x150>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <xTaskIncrementTick+0x15c>)
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	601a      	str	r2, [r3, #0]
					break;
 8004de4:	e03e      	b.n	8004e64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <xTaskIncrementTick+0x150>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d203      	bcs.n	8004e06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb8 <xTaskIncrementTick+0x15c>)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e04:	e02e      	b.n	8004e64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fea6 	bl	8003b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fe9d 	bl	8003b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <xTaskIncrementTick+0x160>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	4a22      	ldr	r2, [pc, #136]	@ (8004ebc <xTaskIncrementTick+0x160>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <xTaskIncrementTick+0x164>)
 8004e42:	441a      	add	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fe fe29 	bl	8003aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec4 <xTaskIncrementTick+0x168>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d3b9      	bcc.n	8004dd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e62:	e7b6      	b.n	8004dd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e64:	4b17      	ldr	r3, [pc, #92]	@ (8004ec4 <xTaskIncrementTick+0x168>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6a:	4915      	ldr	r1, [pc, #84]	@ (8004ec0 <xTaskIncrementTick+0x164>)
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d901      	bls.n	8004e80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <xTaskIncrementTick+0x16c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e004      	b.n	8004e98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <xTaskIncrementTick+0x170>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a0d      	ldr	r2, [pc, #52]	@ (8004ecc <xTaskIncrementTick+0x170>)
 8004e96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e98:	697b      	ldr	r3, [r7, #20]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000598 	.word	0x20000598
 8004ea8:	20000574 	.word	0x20000574
 8004eac:	20000528 	.word	0x20000528
 8004eb0:	2000052c 	.word	0x2000052c
 8004eb4:	20000588 	.word	0x20000588
 8004eb8:	20000590 	.word	0x20000590
 8004ebc:	20000578 	.word	0x20000578
 8004ec0:	20000474 	.word	0x20000474
 8004ec4:	20000470 	.word	0x20000470
 8004ec8:	20000584 	.word	0x20000584
 8004ecc:	20000580 	.word	0x20000580

08004ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f80 <vTaskSwitchContext+0xb0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ede:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <vTaskSwitchContext+0xb4>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee4:	e045      	b.n	8004f72 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004ee6:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <vTaskSwitchContext+0xb4>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eec:	4b26      	ldr	r3, [pc, #152]	@ (8004f88 <vTaskSwitchContext+0xb8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	f1c3 031f 	rsb	r3, r3, #31
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	4922      	ldr	r1, [pc, #136]	@ (8004f8c <vTaskSwitchContext+0xbc>)
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	607b      	str	r3, [r7, #4]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <vTaskSwitchContext+0x5a>
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4a14      	ldr	r2, [pc, #80]	@ (8004f8c <vTaskSwitchContext+0xbc>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d104      	bne.n	8004f5e <vTaskSwitchContext+0x8e>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a0a      	ldr	r2, [pc, #40]	@ (8004f90 <vTaskSwitchContext+0xc0>)
 8004f66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <vTaskSwitchContext+0xc0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	334c      	adds	r3, #76	@ 0x4c
 8004f6e:	4a09      	ldr	r2, [pc, #36]	@ (8004f94 <vTaskSwitchContext+0xc4>)
 8004f70:	6013      	str	r3, [r2, #0]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000598 	.word	0x20000598
 8004f84:	20000584 	.word	0x20000584
 8004f88:	20000578 	.word	0x20000578
 8004f8c:	20000474 	.word	0x20000474
 8004f90:	20000470 	.word	0x20000470
 8004f94:	20000010 	.word	0x20000010

08004f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	60fb      	str	r3, [r7, #12]
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <vTaskPlaceOnEventList+0x48>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fe fd8e 	bl	8003aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fce:	2101      	movs	r1, #1
 8004fd0:	6838      	ldr	r0, [r7, #0]
 8004fd2:	f000 fb8d 	bl	80056f0 <prvAddCurrentTaskToDelayedList>
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000470 	.word	0x20000470

08004fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60fb      	str	r3, [r7, #12]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3318      	adds	r3, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fda0 	bl	8003b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <xTaskRemoveFromEventList+0xb0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11c      	bne.n	800505e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fd97 	bl	8003b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	2201      	movs	r2, #1
 8005034:	409a      	lsls	r2, r3
 8005036:	4b18      	ldr	r3, [pc, #96]	@ (8005098 <xTaskRemoveFromEventList+0xb4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <xTaskRemoveFromEventList+0xb4>)
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a13      	ldr	r2, [pc, #76]	@ (800509c <xTaskRemoveFromEventList+0xb8>)
 800504e:	441a      	add	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fe fd23 	bl	8003aa2 <vListInsertEnd>
 800505c:	e005      	b.n	800506a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3318      	adds	r3, #24
 8005062:	4619      	mov	r1, r3
 8005064:	480e      	ldr	r0, [pc, #56]	@ (80050a0 <xTaskRemoveFromEventList+0xbc>)
 8005066:	f7fe fd1c 	bl	8003aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <xTaskRemoveFromEventList+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d905      	bls.n	8005084 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <xTaskRemoveFromEventList+0xc4>)
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e001      	b.n	8005088 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005088:	697b      	ldr	r3, [r7, #20]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000598 	.word	0x20000598
 8005098:	20000578 	.word	0x20000578
 800509c:	20000474 	.word	0x20000474
 80050a0:	20000530 	.word	0x20000530
 80050a4:	20000470 	.word	0x20000470
 80050a8:	20000584 	.word	0x20000584

080050ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b4:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <vTaskInternalSetTimeOutState+0x24>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050bc:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <vTaskInternalSetTimeOutState+0x28>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000588 	.word	0x20000588
 80050d4:	20000574 	.word	0x20000574

080050d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	613b      	str	r3, [r7, #16]
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800511e:	f000 fc7b 	bl	8005a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005122:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <xTaskCheckForTimeOut+0xc0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d102      	bne.n	8005142 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e023      	b.n	800518a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b15      	ldr	r3, [pc, #84]	@ (800519c <xTaskCheckForTimeOut+0xc4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d007      	beq.n	800515e <xTaskCheckForTimeOut+0x86>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e015      	b.n	800518a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d20b      	bcs.n	8005180 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff99 	bl	80050ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e004      	b.n	800518a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f000 fc77 	bl	8005a7c <vPortExitCritical>

	return xReturn;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000574 	.word	0x20000574
 800519c:	20000588 	.word	0x20000588

080051a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a4:	4b03      	ldr	r3, [pc, #12]	@ (80051b4 <vTaskMissedYield+0x14>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000584 	.word	0x20000584

080051b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c0:	f000 f852 	bl	8005268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c4:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <prvIdleTask+0x28>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d9f9      	bls.n	80051c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <prvIdleTask+0x2c>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051dc:	e7f0      	b.n	80051c0 <prvIdleTask+0x8>
 80051de:	bf00      	nop
 80051e0:	20000474 	.word	0x20000474
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e00c      	b.n	800520e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4a12      	ldr	r2, [pc, #72]	@ (8005248 <prvInitialiseTaskLists+0x60>)
 8005200:	4413      	add	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fc20 	bl	8003a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b06      	cmp	r3, #6
 8005212:	d9ef      	bls.n	80051f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005214:	480d      	ldr	r0, [pc, #52]	@ (800524c <prvInitialiseTaskLists+0x64>)
 8005216:	f7fe fc17 	bl	8003a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521a:	480d      	ldr	r0, [pc, #52]	@ (8005250 <prvInitialiseTaskLists+0x68>)
 800521c:	f7fe fc14 	bl	8003a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005220:	480c      	ldr	r0, [pc, #48]	@ (8005254 <prvInitialiseTaskLists+0x6c>)
 8005222:	f7fe fc11 	bl	8003a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005226:	480c      	ldr	r0, [pc, #48]	@ (8005258 <prvInitialiseTaskLists+0x70>)
 8005228:	f7fe fc0e 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800522c:	480b      	ldr	r0, [pc, #44]	@ (800525c <prvInitialiseTaskLists+0x74>)
 800522e:	f7fe fc0b 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <prvInitialiseTaskLists+0x78>)
 8005234:	4a05      	ldr	r2, [pc, #20]	@ (800524c <prvInitialiseTaskLists+0x64>)
 8005236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005238:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <prvInitialiseTaskLists+0x7c>)
 800523a:	4a05      	ldr	r2, [pc, #20]	@ (8005250 <prvInitialiseTaskLists+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000474 	.word	0x20000474
 800524c:	20000500 	.word	0x20000500
 8005250:	20000514 	.word	0x20000514
 8005254:	20000530 	.word	0x20000530
 8005258:	20000544 	.word	0x20000544
 800525c:	2000055c 	.word	0x2000055c
 8005260:	20000528 	.word	0x20000528
 8005264:	2000052c 	.word	0x2000052c

08005268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526e:	e019      	b.n	80052a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005270:	f000 fbd2 	bl	8005a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <prvCheckTasksWaitingTermination+0x50>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fc6b 	bl	8003b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <prvCheckTasksWaitingTermination+0x54>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	4a0b      	ldr	r2, [pc, #44]	@ (80052bc <prvCheckTasksWaitingTermination+0x54>)
 800528e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800529a:	f000 fbef 	bl	8005a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f810 	bl	80052c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a4:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000544 	.word	0x20000544
 80052bc:	20000570 	.word	0x20000570
 80052c0:	20000558 	.word	0x20000558

080052c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	334c      	adds	r3, #76	@ 0x4c
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 feb9 	bl	8006048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fd87 	bl	8005df8 <vPortFree>
				vPortFree( pxTCB );
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fd84 	bl	8005df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052f0:	e019      	b.n	8005326 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d103      	bne.n	8005304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fd7b 	bl	8005df8 <vPortFree>
	}
 8005302:	e010      	b.n	8005326 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800530a:	2b02      	cmp	r3, #2
 800530c:	d00b      	beq.n	8005326 <prvDeleteTCB+0x62>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <prvDeleteTCB+0x5e>
	}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <prvResetNextTaskUnblockTime+0x38>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005340:	4b0a      	ldr	r3, [pc, #40]	@ (800536c <prvResetNextTaskUnblockTime+0x3c>)
 8005342:	f04f 32ff 	mov.w	r2, #4294967295
 8005346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005348:	e008      	b.n	800535c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <prvResetNextTaskUnblockTime+0x38>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a04      	ldr	r2, [pc, #16]	@ (800536c <prvResetNextTaskUnblockTime+0x3c>)
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000528 	.word	0x20000528
 800536c:	20000590 	.word	0x20000590

08005370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005376:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <xTaskGetSchedulerState+0x34>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800537e:	2301      	movs	r3, #1
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e008      	b.n	8005396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005384:	4b08      	ldr	r3, [pc, #32]	@ (80053a8 <xTaskGetSchedulerState+0x38>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800538c:	2302      	movs	r3, #2
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e001      	b.n	8005396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005396:	687b      	ldr	r3, [r7, #4]
	}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	2000057c 	.word	0x2000057c
 80053a8:	20000598 	.word	0x20000598

080053ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d05e      	beq.n	8005480 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c6:	4b31      	ldr	r3, [pc, #196]	@ (800548c <xTaskPriorityInherit+0xe0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d24e      	bcs.n	800546e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	db06      	blt.n	80053e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d8:	4b2c      	ldr	r3, [pc, #176]	@ (800548c <xTaskPriorityInherit+0xe0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	f1c3 0207 	rsb	r2, r3, #7
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	6959      	ldr	r1, [r3, #20]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a26      	ldr	r2, [pc, #152]	@ (8005490 <xTaskPriorityInherit+0xe4>)
 80053f8:	4413      	add	r3, r2
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d12f      	bne.n	800545e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fbaa 	bl	8003b5c <uxListRemove>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	2201      	movs	r2, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43da      	mvns	r2, r3
 800541a:	4b1e      	ldr	r3, [pc, #120]	@ (8005494 <xTaskPriorityInherit+0xe8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4013      	ands	r3, r2
 8005420:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <xTaskPriorityInherit+0xe8>)
 8005422:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005424:	4b19      	ldr	r3, [pc, #100]	@ (800548c <xTaskPriorityInherit+0xe0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	2201      	movs	r2, #1
 8005434:	409a      	lsls	r2, r3
 8005436:	4b17      	ldr	r3, [pc, #92]	@ (8005494 <xTaskPriorityInherit+0xe8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <xTaskPriorityInherit+0xe8>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a10      	ldr	r2, [pc, #64]	@ (8005490 <xTaskPriorityInherit+0xe4>)
 800544e:	441a      	add	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fe fb23 	bl	8003aa2 <vListInsertEnd>
 800545c:	e004      	b.n	8005468 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <xTaskPriorityInherit+0xe0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e008      	b.n	8005480 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <xTaskPriorityInherit+0xe0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	429a      	cmp	r2, r3
 800547a:	d201      	bcs.n	8005480 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005480:	68fb      	ldr	r3, [r7, #12]
	}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000470 	.word	0x20000470
 8005490:	20000474 	.word	0x20000474
 8005494:	20000578 	.word	0x20000578

08005498 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d070      	beq.n	8005590 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ae:	4b3b      	ldr	r3, [pc, #236]	@ (800559c <xTaskPriorityDisinherit+0x104>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d00b      	beq.n	80054d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60fb      	str	r3, [r7, #12]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60bb      	str	r3, [r7, #8]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	429a      	cmp	r2, r3
 8005504:	d044      	beq.n	8005590 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	d140      	bne.n	8005590 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fb22 	bl	8003b5c <uxListRemove>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005522:	491f      	ldr	r1, [pc, #124]	@ (80055a0 <xTaskPriorityDisinherit+0x108>)
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xTaskPriorityDisinherit+0xb2>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	2201      	movs	r2, #1
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43da      	mvns	r2, r3
 8005540:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <xTaskPriorityDisinherit+0x10c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4013      	ands	r3, r2
 8005546:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <xTaskPriorityDisinherit+0x10c>)
 8005548:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	f1c3 0207 	rsb	r2, r3, #7
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	2201      	movs	r2, #1
 8005564:	409a      	lsls	r2, r3
 8005566:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <xTaskPriorityDisinherit+0x10c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	4a0d      	ldr	r2, [pc, #52]	@ (80055a4 <xTaskPriorityDisinherit+0x10c>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4a08      	ldr	r2, [pc, #32]	@ (80055a0 <xTaskPriorityDisinherit+0x108>)
 800557e:	441a      	add	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fe fa8b 	bl	8003aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005590:	697b      	ldr	r3, [r7, #20]
	}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000470 	.word	0x20000470
 80055a0:	20000474 	.word	0x20000474
 80055a4:	20000578 	.word	0x20000578

080055a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d079      	beq.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d902      	bls.n	80055f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e002      	b.n	80055f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d059      	beq.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	429a      	cmp	r2, r3
 8005608:	d154      	bne.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800560a:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	429a      	cmp	r2, r3
 8005612:	d10b      	bne.n	800562c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60bb      	str	r3, [r7, #8]
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	db04      	blt.n	800564a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f1c3 0207 	rsb	r2, r3, #7
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	6959      	ldr	r1, [r3, #20]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4a19      	ldr	r2, [pc, #100]	@ (80056c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800565a:	4413      	add	r3, r2
 800565c:	4299      	cmp	r1, r3
 800565e:	d129      	bne.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	3304      	adds	r3, #4
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fa79 	bl	8003b5c <uxListRemove>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	2201      	movs	r2, #1
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43da      	mvns	r2, r3
 800567c:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4013      	ands	r3, r2
 8005682:	4a10      	ldr	r2, [pc, #64]	@ (80056c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005684:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	2201      	movs	r2, #1
 800568c:	409a      	lsls	r2, r3
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	4a0b      	ldr	r2, [pc, #44]	@ (80056c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4a06      	ldr	r2, [pc, #24]	@ (80056c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056a6:	441a      	add	r2, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f7fe f9f7 	bl	8003aa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000470 	.word	0x20000470
 80056c0:	20000474 	.word	0x20000474
 80056c4:	20000578 	.word	0x20000578

080056c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056cc:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <pvTaskIncrementMutexHeldCount+0x24>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <pvTaskIncrementMutexHeldCount+0x24>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056da:	3201      	adds	r2, #1
 80056dc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80056de:	4b03      	ldr	r3, [pc, #12]	@ (80056ec <pvTaskIncrementMutexHeldCount+0x24>)
 80056e0:	681b      	ldr	r3, [r3, #0]
	}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20000470 	.word	0x20000470

080056f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056fa:	4b29      	ldr	r3, [pc, #164]	@ (80057a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005700:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fa28 	bl	8003b5c <uxListRemove>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005712:	4b24      	ldr	r3, [pc, #144]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	2201      	movs	r2, #1
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43da      	mvns	r2, r3
 8005720:	4b21      	ldr	r3, [pc, #132]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4013      	ands	r3, r2
 8005726:	4a20      	ldr	r2, [pc, #128]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005728:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d10a      	bne.n	8005748 <prvAddCurrentTaskToDelayedList+0x58>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005738:	4b1a      	ldr	r3, [pc, #104]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	481a      	ldr	r0, [pc, #104]	@ (80057ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005742:	f7fe f9ae 	bl	8003aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005746:	e026      	b.n	8005796 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005750:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	429a      	cmp	r2, r3
 800575e:	d209      	bcs.n	8005774 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005760:	4b13      	ldr	r3, [pc, #76]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe f9bc 	bl	8003aea <vListInsert>
}
 8005772:	e010      	b.n	8005796 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005774:	4b0f      	ldr	r3, [pc, #60]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fe f9b2 	bl	8003aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005786:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d202      	bcs.n	8005796 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005790:	4a09      	ldr	r2, [pc, #36]	@ (80057b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6013      	str	r3, [r2, #0]
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000574 	.word	0x20000574
 80057a4:	20000470 	.word	0x20000470
 80057a8:	20000578 	.word	0x20000578
 80057ac:	2000055c 	.word	0x2000055c
 80057b0:	2000052c 	.word	0x2000052c
 80057b4:	20000528 	.word	0x20000528
 80057b8:	20000590 	.word	0x20000590

080057bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b04      	subs	r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005820 <pxPortInitialiseStack+0x64>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b14      	subs	r3, #20
 80057f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b04      	subs	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f06f 0202 	mvn.w	r2, #2
 800580a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b20      	subs	r3, #32
 8005810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	08005825 	.word	0x08005825

08005824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800582e:	4b13      	ldr	r3, [pc, #76]	@ (800587c <prvTaskExitError+0x58>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d00b      	beq.n	8005850 <prvTaskExitError+0x2c>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60fb      	str	r3, [r7, #12]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <prvTaskExitError+0x28>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60bb      	str	r3, [r7, #8]
}
 8005862:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005864:	bf00      	nop
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0fc      	beq.n	8005866 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058a8:	4808      	ldr	r0, [pc, #32]	@ (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ca:	bf00      	nop
 80058cc:	e000ed08 	.word	0xe000ed08

080058d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058d6:	4b47      	ldr	r3, [pc, #284]	@ (80059f4 <xPortStartScheduler+0x124>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a47      	ldr	r2, [pc, #284]	@ (80059f8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10b      	bne.n	80058f8 <xPortStartScheduler+0x28>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	613b      	str	r3, [r7, #16]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058f8:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <xPortStartScheduler+0x124>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a3f      	ldr	r2, [pc, #252]	@ (80059fc <xPortStartScheduler+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10b      	bne.n	800591a <xPortStartScheduler+0x4a>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60fb      	str	r3, [r7, #12]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800591a:	4b39      	ldr	r3, [pc, #228]	@ (8005a00 <xPortStartScheduler+0x130>)
 800591c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	22ff      	movs	r2, #255	@ 0xff
 800592a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4b31      	ldr	r3, [pc, #196]	@ (8005a04 <xPortStartScheduler+0x134>)
 8005940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005942:	4b31      	ldr	r3, [pc, #196]	@ (8005a08 <xPortStartScheduler+0x138>)
 8005944:	2207      	movs	r2, #7
 8005946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005948:	e009      	b.n	800595e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <xPortStartScheduler+0x138>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3b01      	subs	r3, #1
 8005950:	4a2d      	ldr	r2, [pc, #180]	@ (8005a08 <xPortStartScheduler+0x138>)
 8005952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005966:	2b80      	cmp	r3, #128	@ 0x80
 8005968:	d0ef      	beq.n	800594a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800596a:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <xPortStartScheduler+0x138>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1c3 0307 	rsb	r3, r3, #7
 8005972:	2b04      	cmp	r3, #4
 8005974:	d00b      	beq.n	800598e <xPortStartScheduler+0xbe>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	60bb      	str	r3, [r7, #8]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800598e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <xPortStartScheduler+0x138>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <xPortStartScheduler+0x138>)
 8005996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005998:	4b1b      	ldr	r3, [pc, #108]	@ (8005a08 <xPortStartScheduler+0x138>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059a0:	4a19      	ldr	r2, [pc, #100]	@ (8005a08 <xPortStartScheduler+0x138>)
 80059a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ac:	4b17      	ldr	r3, [pc, #92]	@ (8005a0c <xPortStartScheduler+0x13c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <xPortStartScheduler+0x13c>)
 80059b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059b8:	4b14      	ldr	r3, [pc, #80]	@ (8005a0c <xPortStartScheduler+0x13c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a13      	ldr	r2, [pc, #76]	@ (8005a0c <xPortStartScheduler+0x13c>)
 80059be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059c4:	f000 f8da 	bl	8005b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059c8:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <xPortStartScheduler+0x140>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059ce:	f000 f8f9 	bl	8005bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <xPortStartScheduler+0x144>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a14 <xPortStartScheduler+0x144>)
 80059d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059de:	f7ff ff63 	bl	80058a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059e2:	f7ff fa75 	bl	8004ed0 <vTaskSwitchContext>
	prvTaskExitError();
 80059e6:	f7ff ff1d 	bl	8005824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	e000ed00 	.word	0xe000ed00
 80059f8:	410fc271 	.word	0x410fc271
 80059fc:	410fc270 	.word	0x410fc270
 8005a00:	e000e400 	.word	0xe000e400
 8005a04:	2000059c 	.word	0x2000059c
 8005a08:	200005a0 	.word	0x200005a0
 8005a0c:	e000ed20 	.word	0xe000ed20
 8005a10:	2000000c 	.word	0x2000000c
 8005a14:	e000ef34 	.word	0xe000ef34

08005a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a32:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <vPortEnterCritical+0x5c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a0e      	ldr	r2, [pc, #56]	@ (8005a74 <vPortEnterCritical+0x5c>)
 8005a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <vPortEnterCritical+0x5c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d110      	bne.n	8005a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a44:	4b0c      	ldr	r3, [pc, #48]	@ (8005a78 <vPortEnterCritical+0x60>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	603b      	str	r3, [r7, #0]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <vPortEnterCritical+0x4a>
	}
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <vPortExitCritical+0x26>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	607b      	str	r3, [r7, #4]
}
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	e7fd      	b.n	8005a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <vPortExitCritical+0x50>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	4a08      	ldr	r2, [pc, #32]	@ (8005acc <vPortExitCritical+0x50>)
 8005aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aac:	4b07      	ldr	r3, [pc, #28]	@ (8005acc <vPortExitCritical+0x50>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <vPortExitCritical+0x44>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	2000000c 	.word	0x2000000c

08005ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ad0:	f3ef 8009 	mrs	r0, PSP
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <pxCurrentTCBConst>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f01e 0f10 	tst.w	lr, #16
 8005ae0:	bf08      	it	eq
 8005ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	6010      	str	r0, [r2, #0]
 8005aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005af4:	f380 8811 	msr	BASEPRI, r0
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f7ff f9e6 	bl	8004ed0 <vTaskSwitchContext>
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f380 8811 	msr	BASEPRI, r0
 8005b0c:	bc09      	pop	{r0, r3}
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	6808      	ldr	r0, [r1, #0]
 8005b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	f01e 0f10 	tst.w	lr, #16
 8005b1a:	bf08      	it	eq
 8005b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b20:	f380 8809 	msr	PSP, r0
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	f3af 8000 	nop.w

08005b30 <pxCurrentTCBConst>:
 8005b30:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b52:	f7ff f903 	bl	8004d5c <xTaskIncrementTick>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <SysTick_Handler+0x40>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	2300      	movs	r3, #0
 8005b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <vPortSetupTimerInterrupt+0x38>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <vPortSetupTimerInterrupt+0x3c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <vPortSetupTimerInterrupt+0x40>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	4a09      	ldr	r2, [pc, #36]	@ (8005bc0 <vPortSetupTimerInterrupt+0x44>)
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9e:	4b04      	ldr	r3, [pc, #16]	@ (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000e010 	.word	0xe000e010
 8005bb4:	e000e018 	.word	0xe000e018
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	10624dd3 	.word	0x10624dd3
 8005bc0:	e000e014 	.word	0xe000e014

08005bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bd4 <vPortEnableVFP+0x10>
 8005bc8:	6801      	ldr	r1, [r0, #0]
 8005bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bce:	6001      	str	r1, [r0, #0]
 8005bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bd2:	bf00      	nop
 8005bd4:	e000ed88 	.word	0xe000ed88

08005bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bde:	f3ef 8305 	mrs	r3, IPSR
 8005be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	d915      	bls.n	8005c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bea:	4a18      	ldr	r2, [pc, #96]	@ (8005c4c <vPortValidateInterruptPriority+0x74>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bf4:	4b16      	ldr	r3, [pc, #88]	@ (8005c50 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	7afa      	ldrb	r2, [r7, #11]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d20b      	bcs.n	8005c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	e7fd      	b.n	8005c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c16:	4b0f      	ldr	r3, [pc, #60]	@ (8005c54 <vPortValidateInterruptPriority+0x7c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <vPortValidateInterruptPriority+0x80>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d90b      	bls.n	8005c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	603b      	str	r3, [r7, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <vPortValidateInterruptPriority+0x62>
	}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	e000e3f0 	.word	0xe000e3f0
 8005c50:	2000059c 	.word	0x2000059c
 8005c54:	e000ed0c 	.word	0xe000ed0c
 8005c58:	200005a0 	.word	0x200005a0

08005c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	@ 0x28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c68:	f7fe ffcc 	bl	8004c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005de0 <pvPortMalloc+0x184>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c74:	f000 f924 	bl	8005ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c78:	4b5a      	ldr	r3, [pc, #360]	@ (8005de4 <pvPortMalloc+0x188>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 8095 	bne.w	8005db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d015      	beq.n	8005cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <pvPortMalloc+0x6e>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	617b      	str	r3, [r7, #20]
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	e7fd      	b.n	8005cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d06f      	beq.n	8005db0 <pvPortMalloc+0x154>
 8005cd0:	4b45      	ldr	r3, [pc, #276]	@ (8005de8 <pvPortMalloc+0x18c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d86a      	bhi.n	8005db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cda:	4b44      	ldr	r3, [pc, #272]	@ (8005dec <pvPortMalloc+0x190>)
 8005cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cde:	4b43      	ldr	r3, [pc, #268]	@ (8005dec <pvPortMalloc+0x190>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce4:	e004      	b.n	8005cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d903      	bls.n	8005d02 <pvPortMalloc+0xa6>
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f1      	bne.n	8005ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d02:	4b37      	ldr	r3, [pc, #220]	@ (8005de0 <pvPortMalloc+0x184>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d051      	beq.n	8005db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2208      	movs	r2, #8
 8005d12:	4413      	add	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	1ad2      	subs	r2, r2, r3
 8005d26:	2308      	movs	r3, #8
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d920      	bls.n	8005d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <pvPortMalloc+0xfc>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	613b      	str	r3, [r7, #16]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad2      	subs	r2, r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f000 f90a 	bl	8005f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d70:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <pvPortMalloc+0x18c>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <pvPortMalloc+0x18c>)
 8005d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005de8 <pvPortMalloc+0x18c>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <pvPortMalloc+0x194>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d203      	bcs.n	8005d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d8a:	4b17      	ldr	r3, [pc, #92]	@ (8005de8 <pvPortMalloc+0x18c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a18      	ldr	r2, [pc, #96]	@ (8005df0 <pvPortMalloc+0x194>)
 8005d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <pvPortMalloc+0x188>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005da6:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <pvPortMalloc+0x198>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <pvPortMalloc+0x198>)
 8005dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db0:	f7fe ff36 	bl	8004c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60fb      	str	r3, [r7, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20001164 	.word	0x20001164
 8005de4:	20001178 	.word	0x20001178
 8005de8:	20001168 	.word	0x20001168
 8005dec:	2000115c 	.word	0x2000115c
 8005df0:	2000116c 	.word	0x2000116c
 8005df4:	20001170 	.word	0x20001170

08005df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04f      	beq.n	8005eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	4b25      	ldr	r3, [pc, #148]	@ (8005eb4 <vPortFree+0xbc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10b      	bne.n	8005e3e <vPortFree+0x46>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60fb      	str	r3, [r7, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <vPortFree+0x66>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <vPortFree+0xbc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01e      	beq.n	8005eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11a      	bne.n	8005eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb4 <vPortFree+0xbc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	401a      	ands	r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e84:	f7fe febe 	bl	8004c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <vPortFree+0xc0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4413      	add	r3, r2
 8005e92:	4a09      	ldr	r2, [pc, #36]	@ (8005eb8 <vPortFree+0xc0>)
 8005e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f000 f874 	bl	8005f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <vPortFree+0xc4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4a06      	ldr	r2, [pc, #24]	@ (8005ebc <vPortFree+0xc4>)
 8005ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ea6:	f7fe febb 	bl	8004c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20001178 	.word	0x20001178
 8005eb8:	20001168 	.word	0x20001168
 8005ebc:	20001174 	.word	0x20001174

08005ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ec6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ecc:	4b27      	ldr	r3, [pc, #156]	@ (8005f6c <prvHeapInit+0xac>)
 8005ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3307      	adds	r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0307 	bic.w	r3, r3, #7
 8005ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	4a1f      	ldr	r2, [pc, #124]	@ (8005f6c <prvHeapInit+0xac>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f70 <prvHeapInit+0xb0>)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005efe:	4b1c      	ldr	r3, [pc, #112]	@ (8005f70 <prvHeapInit+0xb0>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	@ (8005f74 <prvHeapInit+0xb4>)
 8005f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f22:	4b14      	ldr	r3, [pc, #80]	@ (8005f74 <prvHeapInit+0xb4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2a:	4b12      	ldr	r3, [pc, #72]	@ (8005f74 <prvHeapInit+0xb4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f40:	4b0c      	ldr	r3, [pc, #48]	@ (8005f74 <prvHeapInit+0xb4>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <prvHeapInit+0xb8>)
 8005f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a09      	ldr	r2, [pc, #36]	@ (8005f7c <prvHeapInit+0xbc>)
 8005f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <prvHeapInit+0xc0>)
 8005f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f5e:	601a      	str	r2, [r3, #0]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	200005a4 	.word	0x200005a4
 8005f70:	2000115c 	.word	0x2000115c
 8005f74:	20001164 	.word	0x20001164
 8005f78:	2000116c 	.word	0x2000116c
 8005f7c:	20001168 	.word	0x20001168
 8005f80:	20001178 	.word	0x20001178

08005f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f8c:	4b28      	ldr	r3, [pc, #160]	@ (8006030 <prvInsertBlockIntoFreeList+0xac>)
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e002      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x14>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d8f7      	bhi.n	8005f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4413      	add	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d108      	bne.n	8005fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	441a      	add	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d118      	bne.n	800600c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b15      	ldr	r3, [pc, #84]	@ (8006034 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d00d      	beq.n	8006002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e008      	b.n	8006014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <prvInsertBlockIntoFreeList+0xb0>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e003      	b.n	8006014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d002      	beq.n	8006022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000115c 	.word	0x2000115c
 8006034:	20001164 	.word	0x20001164

08006038 <memset>:
 8006038:	4402      	add	r2, r0
 800603a:	4603      	mov	r3, r0
 800603c:	4293      	cmp	r3, r2
 800603e:	d100      	bne.n	8006042 <memset+0xa>
 8006040:	4770      	bx	lr
 8006042:	f803 1b01 	strb.w	r1, [r3], #1
 8006046:	e7f9      	b.n	800603c <memset+0x4>

08006048 <_reclaim_reent>:
 8006048:	4b29      	ldr	r3, [pc, #164]	@ (80060f0 <_reclaim_reent+0xa8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4283      	cmp	r3, r0
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	4604      	mov	r4, r0
 8006052:	d04b      	beq.n	80060ec <_reclaim_reent+0xa4>
 8006054:	69c3      	ldr	r3, [r0, #28]
 8006056:	b1ab      	cbz	r3, 8006084 <_reclaim_reent+0x3c>
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	b16b      	cbz	r3, 8006078 <_reclaim_reent+0x30>
 800605c:	2500      	movs	r5, #0
 800605e:	69e3      	ldr	r3, [r4, #28]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	5959      	ldr	r1, [r3, r5]
 8006064:	2900      	cmp	r1, #0
 8006066:	d13b      	bne.n	80060e0 <_reclaim_reent+0x98>
 8006068:	3504      	adds	r5, #4
 800606a:	2d80      	cmp	r5, #128	@ 0x80
 800606c:	d1f7      	bne.n	800605e <_reclaim_reent+0x16>
 800606e:	69e3      	ldr	r3, [r4, #28]
 8006070:	4620      	mov	r0, r4
 8006072:	68d9      	ldr	r1, [r3, #12]
 8006074:	f000 f872 	bl	800615c <_free_r>
 8006078:	69e3      	ldr	r3, [r4, #28]
 800607a:	6819      	ldr	r1, [r3, #0]
 800607c:	b111      	cbz	r1, 8006084 <_reclaim_reent+0x3c>
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f86c 	bl	800615c <_free_r>
 8006084:	6961      	ldr	r1, [r4, #20]
 8006086:	b111      	cbz	r1, 800608e <_reclaim_reent+0x46>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f867 	bl	800615c <_free_r>
 800608e:	69e1      	ldr	r1, [r4, #28]
 8006090:	b111      	cbz	r1, 8006098 <_reclaim_reent+0x50>
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f862 	bl	800615c <_free_r>
 8006098:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800609a:	b111      	cbz	r1, 80060a2 <_reclaim_reent+0x5a>
 800609c:	4620      	mov	r0, r4
 800609e:	f000 f85d 	bl	800615c <_free_r>
 80060a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060a4:	b111      	cbz	r1, 80060ac <_reclaim_reent+0x64>
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f858 	bl	800615c <_free_r>
 80060ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060ae:	b111      	cbz	r1, 80060b6 <_reclaim_reent+0x6e>
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f853 	bl	800615c <_free_r>
 80060b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060b8:	b111      	cbz	r1, 80060c0 <_reclaim_reent+0x78>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 f84e 	bl	800615c <_free_r>
 80060c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060c2:	b111      	cbz	r1, 80060ca <_reclaim_reent+0x82>
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f849 	bl	800615c <_free_r>
 80060ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060cc:	b111      	cbz	r1, 80060d4 <_reclaim_reent+0x8c>
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 f844 	bl	800615c <_free_r>
 80060d4:	6a23      	ldr	r3, [r4, #32]
 80060d6:	b14b      	cbz	r3, 80060ec <_reclaim_reent+0xa4>
 80060d8:	4620      	mov	r0, r4
 80060da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060de:	4718      	bx	r3
 80060e0:	680e      	ldr	r6, [r1, #0]
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f83a 	bl	800615c <_free_r>
 80060e8:	4631      	mov	r1, r6
 80060ea:	e7bb      	b.n	8006064 <_reclaim_reent+0x1c>
 80060ec:	bd70      	pop	{r4, r5, r6, pc}
 80060ee:	bf00      	nop
 80060f0:	20000010 	.word	0x20000010

080060f4 <__libc_init_array>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4d0d      	ldr	r5, [pc, #52]	@ (800612c <__libc_init_array+0x38>)
 80060f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006130 <__libc_init_array+0x3c>)
 80060fa:	1b64      	subs	r4, r4, r5
 80060fc:	10a4      	asrs	r4, r4, #2
 80060fe:	2600      	movs	r6, #0
 8006100:	42a6      	cmp	r6, r4
 8006102:	d109      	bne.n	8006118 <__libc_init_array+0x24>
 8006104:	4d0b      	ldr	r5, [pc, #44]	@ (8006134 <__libc_init_array+0x40>)
 8006106:	4c0c      	ldr	r4, [pc, #48]	@ (8006138 <__libc_init_array+0x44>)
 8006108:	f000 f87e 	bl	8006208 <_init>
 800610c:	1b64      	subs	r4, r4, r5
 800610e:	10a4      	asrs	r4, r4, #2
 8006110:	2600      	movs	r6, #0
 8006112:	42a6      	cmp	r6, r4
 8006114:	d105      	bne.n	8006122 <__libc_init_array+0x2e>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	f855 3b04 	ldr.w	r3, [r5], #4
 800611c:	4798      	blx	r3
 800611e:	3601      	adds	r6, #1
 8006120:	e7ee      	b.n	8006100 <__libc_init_array+0xc>
 8006122:	f855 3b04 	ldr.w	r3, [r5], #4
 8006126:	4798      	blx	r3
 8006128:	3601      	adds	r6, #1
 800612a:	e7f2      	b.n	8006112 <__libc_init_array+0x1e>
 800612c:	080062f0 	.word	0x080062f0
 8006130:	080062f0 	.word	0x080062f0
 8006134:	080062f0 	.word	0x080062f0
 8006138:	080062f4 	.word	0x080062f4

0800613c <__retarget_lock_acquire_recursive>:
 800613c:	4770      	bx	lr

0800613e <__retarget_lock_release_recursive>:
 800613e:	4770      	bx	lr

08006140 <memcpy>:
 8006140:	440a      	add	r2, r1
 8006142:	4291      	cmp	r1, r2
 8006144:	f100 33ff 	add.w	r3, r0, #4294967295
 8006148:	d100      	bne.n	800614c <memcpy+0xc>
 800614a:	4770      	bx	lr
 800614c:	b510      	push	{r4, lr}
 800614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006156:	4291      	cmp	r1, r2
 8006158:	d1f9      	bne.n	800614e <memcpy+0xe>
 800615a:	bd10      	pop	{r4, pc}

0800615c <_free_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4605      	mov	r5, r0
 8006160:	2900      	cmp	r1, #0
 8006162:	d041      	beq.n	80061e8 <_free_r+0x8c>
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f0c      	subs	r4, r1, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfb8      	it	lt
 800616e:	18e4      	addlt	r4, r4, r3
 8006170:	f000 f83e 	bl	80061f0 <__malloc_lock>
 8006174:	4a1d      	ldr	r2, [pc, #116]	@ (80061ec <_free_r+0x90>)
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x2c>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	4628      	mov	r0, r5
 8006180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006184:	f000 b83a 	b.w	80061fc <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x42>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1809      	addeq	r1, r1, r0
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x1e>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x4c>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x42>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1850      	adds	r0, r2, r1
 80061ac:	42a0      	cmp	r0, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x6c>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	4401      	add	r1, r0
 80061b4:	1850      	adds	r0, r2, r1
 80061b6:	4283      	cmp	r3, r0
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x22>
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4408      	add	r0, r1
 80061c4:	6010      	str	r0, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x22>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x74>
 80061ca:	230c      	movs	r3, #12
 80061cc:	602b      	str	r3, [r5, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x22>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	1821      	adds	r1, r4, r0
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1809      	addeq	r1, r1, r0
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x22>
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
 80061ea:	bf00      	nop
 80061ec:	200012b8 	.word	0x200012b8

080061f0 <__malloc_lock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__malloc_lock+0x8>)
 80061f2:	f7ff bfa3 	b.w	800613c <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	200012b4 	.word	0x200012b4

080061fc <__malloc_unlock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	@ (8006204 <__malloc_unlock+0x8>)
 80061fe:	f7ff bf9e 	b.w	800613e <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	200012b4 	.word	0x200012b4

08006208 <_init>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr

08006214 <_fini>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr
