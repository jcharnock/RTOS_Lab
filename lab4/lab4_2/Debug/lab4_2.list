
lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006334  08006334  00007334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006338  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000060  08006398  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08006398  00008258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001802c  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003477  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00023538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbb  00000000  00000000  00024978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028646  00000000  00000000  00025933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ed0  00000000  00000000  0004df79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fafdd  00000000  00000000  00065e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  00160e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001665c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006248 	.word	0x08006248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006248 	.word	0x08006248

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <init_mutex_and_led>:
osMutexId myMutexHandle01;
uint8_t buffer[100];
const int write_size = 60;
osStatus status;

void init_mutex_and_led(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	osMutexDef(myMutex01);
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
	myMutexHandle01 = osMutexCreate(osMutex(myMutex01));
 80004ce:	463b      	mov	r3, r7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fa37 	bl	8003944 <osMutexCreate>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a02      	ldr	r2, [pc, #8]	@ (80004e4 <init_mutex_and_led+0x24>)
 80004da:	6013      	str	r3, [r2, #0]
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000007c 	.word	0x2000007c

080004e8 <load_and_flash_led>:

void load_and_flash_led(int numFlashes, int flashPeriod){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	status = osMutexWait(myMutexHandle01, osWaitForever);
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <load_and_flash_led+0x6c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f04f 31ff 	mov.w	r1, #4294967295
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fa3a 	bl	8003974 <osMutexWait>
 8000500:	4603      	mov	r3, r0
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <load_and_flash_led+0x70>)
 8000504:	6013      	str	r3, [r2, #0]
	int j = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	while (j < numFlashes){
 800050a:	e016      	b.n	800053a <load_and_flash_led+0x52>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f000 fe34 	bl	8001180 <HAL_GPIO_WritePin>
		osDelay(flashPeriod);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f9fe 	bl	800391c <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2120      	movs	r1, #32
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fe2a 	bl	8001180 <HAL_GPIO_WritePin>
		osDelay(flashPeriod);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f9f4 	bl	800391c <osDelay>
		j++;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
	while (j < numFlashes){
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbe4      	blt.n	800050c <load_and_flash_led+0x24>
	}
	osMutexRelease( myMutexHandle01 );
 8000542:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <load_and_flash_led+0x6c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fa62 	bl	8003a10 <osMutexRelease>
}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000007c 	.word	0x2000007c
 8000558:	20000080 	.word	0x20000080

0800055c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <vApplicationGetIdleTaskMemory+0x2c>)
 800056c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <vApplicationGetIdleTaskMemory+0x30>)
 8000572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000084 	.word	0x20000084
 800058c:	20000124 	.word	0x20000124

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b098      	sub	sp, #96	@ 0x60
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb27 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f85b 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8db 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8a9 	bl	80006f8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80005a6:	2300      	movs	r3, #0
 80005a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005aa:	2300      	movs	r3, #0
 80005ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80005ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f9c6 	bl	8003944 <osMutexCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000638 <main+0xa8>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  init_mutex_and_led();
 80005be:	f7ff ff7f 	bl	80004c0 <init_mutex_and_led>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <main+0xac>)
 80005c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80005d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f951 	bl	8003884 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <main+0xb0>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <main+0xb4>)
 80005ea:	f107 0420 	add.w	r4, r7, #32
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 f93e 	bl	8003884 <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <main+0xb8>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <main+0xbc>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f003 f92d 	bl	8003884 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <main+0xc0>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f003 f921 	bl	8003876 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0xa4>
 8000638:	200003b8 	.word	0x200003b8
 800063c:	0800626c 	.word	0x0800626c
 8000640:	200003ac 	.word	0x200003ac
 8000644:	08006294 	.word	0x08006294
 8000648:	200003b0 	.word	0x200003b0
 800064c:	080062bc 	.word	0x080062bc
 8000650:	200003b4 	.word	0x200003b4

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	@ 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	@ 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fd08 	bl	8006078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800067a:	f000 fda7 	bl	80011cc <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f956 	bl	8000934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fdde 	bl	8001278 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f937 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9a6 	bl	8001a30 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f923 	bl	8000934 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	@ 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	@ (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 fb50 	bl	8002de0 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8f5 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000324 	.word	0x20000324
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <MX_GPIO_Init+0xf0>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a35      	ldr	r2, [pc, #212]	@ (8000848 <MX_GPIO_Init+0xf0>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <MX_GPIO_Init+0xf0>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <MX_GPIO_Init+0xf0>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a2f      	ldr	r2, [pc, #188]	@ (8000848 <MX_GPIO_Init+0xf0>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <MX_GPIO_Init+0xf0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_TASK1_Pin|LED3_TASK3_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f000 fcd2 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_TASK2_GPIO_Port, LED2_TASK2_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2120      	movs	r1, #32
 80007e0:	481a      	ldr	r0, [pc, #104]	@ (800084c <MX_GPIO_Init+0xf4>)
 80007e2:	f000 fccd 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <MX_GPIO_Init+0xf8>)
 80007fe:	f000 fb15 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_TASK1_Pin LED3_TASK3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_TASK1_Pin|LED3_TASK3_Pin;
 8000802:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fb05 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_TASK2_Pin */
  GPIO_InitStruct.Pin = LED2_TASK2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_TASK2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_GPIO_Init+0xf4>)
 800083a:	f000 faf7 	bl	8000e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	@ 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400
 8000850:	48000800 	.word	0x48000800

08000854 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f000 fc8b 	bl	8001180 <HAL_GPIO_WritePin>
	load_and_flash_led(10, 500);
 800086a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800086e:	200a      	movs	r0, #10
 8000870:	f7ff fe3a 	bl	80004e8 <load_and_flash_led>
    osDelay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f003 f851 	bl	800391c <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fc7c 	bl	8001180 <HAL_GPIO_WritePin>
    osDelay(10000);
 8000888:	f242 7010 	movw	r0, #10000	@ 0x2710
 800088c:	f003 f846 	bl	800391c <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000890:	bf00      	nop
 8000892:	e7e3      	b.n	800085c <StartTask01+0x8>

08000894 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2120      	movs	r1, #32
 80008a0:	480a      	ldr	r0, [pc, #40]	@ (80008cc <StartTask02+0x38>)
 80008a2:	f000 fc6d 	bl	8001180 <HAL_GPIO_WritePin>
	load_and_flash_led(5, 200);
 80008a6:	21c8      	movs	r1, #200	@ 0xc8
 80008a8:	2005      	movs	r0, #5
 80008aa:	f7ff fe1d 	bl	80004e8 <load_and_flash_led>
    osDelay(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f003 f834 	bl	800391c <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <StartTask02+0x38>)
 80008ba:	f000 fc61 	bl	8001180 <HAL_GPIO_WritePin>
    osDelay(10000);
 80008be:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008c2:	f003 f82b 	bl	800391c <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80008c6:	bf00      	nop
 80008c8:	e7e8      	b.n	800089c <StartTask02+0x8>
 80008ca:	bf00      	nop
 80008cc:	48000400 	.word	0x48000400

080008d0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f000 fc4d 	bl	8001180 <HAL_GPIO_WritePin>
	  load_and_flash_led(3, 100);
 80008e6:	2164      	movs	r1, #100	@ 0x64
 80008e8:	2003      	movs	r0, #3
 80008ea:	f7ff fdfd 	bl	80004e8 <load_and_flash_led>
	  osDelay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f003 f814 	bl	800391c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 fc3f 	bl	8001180 <HAL_GPIO_WritePin>
	  osDelay(10000);
 8000902:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000906:	f003 f809 	bl	800391c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800090a:	bf00      	nop
 800090c:	e7e4      	b.n	80008d8 <StartTask03+0x8>
	...

08000910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000922:	f000 f981 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012c00 	.word	0x40012c00

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_MspInit+0x4c>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	4a10      	ldr	r2, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	@ 0x60
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_MspInit+0x4c>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_MspInit+0x4c>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	@ 0x58
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	f06f 0001 	mvn.w	r0, #1
 800097e:	f000 fa2b 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0ac      	sub	sp, #176	@ 0xb0
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2288      	movs	r2, #136	@ 0x88
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 fb61 	bl	8006078 <memset>
  if(huart->Instance==USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <HAL_UART_MspInit+0xb0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d13b      	bne.n	8000a38 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fa85 	bl	8001edc <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ffac 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e0:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_UART_MspInit+0xb4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a24:	2307      	movs	r3, #7
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a34:	f000 f9fa 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	37b0      	adds	r7, #176	@ 0xb0
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	@ 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a56:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <HAL_InitTick+0xc8>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b10 <HAL_InitTick+0xc8>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a62:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <HAL_InitTick+0xc8>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6e:	f107 020c 	add.w	r2, r7, #12
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 f99d 	bl	8001db8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a7e:	f001 f985 	bl	8001d8c <HAL_RCC_GetPCLK2Freq>
 8000a82:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a86:	4a23      	ldr	r2, [pc, #140]	@ (8000b14 <HAL_InitTick+0xcc>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <HAL_InitTick+0xd4>)
 8000a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000a9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab8:	4817      	ldr	r0, [pc, #92]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000aba:	f001 fecb 	bl	8002854 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11b      	bne.n	8000b04 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <HAL_InitTick+0xd0>)
 8000ace:	f001 ff23 	bl	8002918 <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d111      	bne.n	8000b04 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ae0:	2019      	movs	r0, #25
 8000ae2:	f000 f995 	bl	8000e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d808      	bhi.n	8000afe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 f971 	bl	8000dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_InitTick+0xd8>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e002      	b.n	8000b04 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3730      	adds	r7, #48	@ 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	200003bc 	.word	0x200003bc
 8000b1c:	40012c00 	.word	0x40012c00
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b62:	f001 ff49 	bl	80029f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200003bc 	.word	0x200003bc

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f005 fab7 	bl	8006134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fce3 	bl	8000590 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd8:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 8000bdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be0:	20001258 	.word	0x20001258

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_Init+0x3c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_Init+0x3c>)
 8000bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bfc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f8df 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	200f      	movs	r0, #15
 8000c06:	f7ff ff1f 	bl	8000a48 <HAL_InitTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	e001      	b.n	8000c1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c16:	f7ff fe93 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000408 	.word	0x20000408

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000408 	.word	0x20000408

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	@ (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e17f      	b.n	800113c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8171 	beq.w	8001136 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d005      	beq.n	8000e6c <HAL_GPIO_Init+0x40>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d118      	bne.n	8000f0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	6939      	ldr	r1, [r7, #16]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ac 	beq.w	8001136 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <HAL_GPIO_Init+0x330>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800115c <HAL_GPIO_Init+0x330>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b5c      	ldr	r3, [pc, #368]	@ (800115c <HAL_GPIO_Init+0x330>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8001160 <HAL_GPIO_Init+0x334>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001020:	d025      	beq.n	800106e <HAL_GPIO_Init+0x242>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <HAL_GPIO_Init+0x338>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01f      	beq.n	800106a <HAL_GPIO_Init+0x23e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4e      	ldr	r2, [pc, #312]	@ (8001168 <HAL_GPIO_Init+0x33c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x23a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4d      	ldr	r2, [pc, #308]	@ (800116c <HAL_GPIO_Init+0x340>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x236>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_GPIO_Init+0x344>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x232>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4b      	ldr	r2, [pc, #300]	@ (8001174 <HAL_GPIO_Init+0x348>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x22e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4a      	ldr	r2, [pc, #296]	@ (8001178 <HAL_GPIO_Init+0x34c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x22a>
 8001052:	2306      	movs	r3, #6
 8001054:	e00c      	b.n	8001070 <HAL_GPIO_Init+0x244>
 8001056:	2307      	movs	r3, #7
 8001058:	e00a      	b.n	8001070 <HAL_GPIO_Init+0x244>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x244>
 800105e:	2304      	movs	r3, #4
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x244>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x244>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x244>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x244>
 800106e:	2300      	movs	r3, #0
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001080:	4937      	ldr	r1, [pc, #220]	@ (8001160 <HAL_GPIO_Init+0x334>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <HAL_GPIO_Init+0x350>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b2:	4a32      	ldr	r2, [pc, #200]	@ (800117c <HAL_GPIO_Init+0x350>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <HAL_GPIO_Init+0x350>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010dc:	4a27      	ldr	r2, [pc, #156]	@ (800117c <HAL_GPIO_Init+0x350>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e2:	4b26      	ldr	r3, [pc, #152]	@ (800117c <HAL_GPIO_Init+0x350>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001106:	4a1d      	ldr	r2, [pc, #116]	@ (800117c <HAL_GPIO_Init+0x350>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_GPIO_Init+0x350>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <HAL_GPIO_Init+0x350>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa22 f303 	lsr.w	r3, r2, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	f47f ae78 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48000c00 	.word	0x48000c00
 8001170:	48001000 	.word	0x48001000
 8001174:	48001400 	.word	0x48001400
 8001178:	48001800 	.word	0x48001800
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011da:	d130      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e8:	d038      	beq.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2232      	movs	r2, #50	@ 0x32
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a1b      	ldr	r2, [pc, #108]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001210:	e002      	b.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3b01      	subs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001224:	d102      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f2      	bne.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001238:	d110      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e00f      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124a:	d007      	beq.n	800125c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001254:	4a05      	ldr	r2, [pc, #20]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40007000 	.word	0x40007000
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83

08001278 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e3ca      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4b97      	ldr	r3, [pc, #604]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001294:	4b94      	ldr	r3, [pc, #592]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80e4 	beq.w	8001474 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_OscConfig+0x4a>
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	f040 808b 	bne.w	80013d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f040 8087 	bne.w	80013d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c2:	4b89      	ldr	r3, [pc, #548]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e3a2      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_RCC_OscConfig+0x7c>
 80012ea:	4b7f      	ldr	r3, [pc, #508]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f2:	e005      	b.n	8001300 <HAL_RCC_OscConfig+0x88>
 80012f4:	4b7c      	ldr	r3, [pc, #496]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001300:	4293      	cmp	r3, r2
 8001302:	d223      	bcs.n	800134c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fd87 	bl	8001e1c <RCC_SetFlashLatencyFromMSIRange>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e383      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001318:	4b73      	ldr	r3, [pc, #460]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a72      	ldr	r2, [pc, #456]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	496d      	ldr	r1, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001336:	4b6c      	ldr	r3, [pc, #432]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	4968      	ldr	r1, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e025      	b.n	8001398 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4960      	ldr	r1, [pc, #384]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136a:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	495b      	ldr	r1, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d109      	bne.n	8001398 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fd47 	bl	8001e1c <RCC_SetFlashLatencyFromMSIRange>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e343      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001398:	f000 fc4a 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 800139c:	4602      	mov	r2, r0
 800139e:	4b52      	ldr	r3, [pc, #328]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	4950      	ldr	r1, [pc, #320]	@ (80014ec <HAL_RCC_OscConfig+0x274>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	4a4e      	ldr	r2, [pc, #312]	@ (80014f0 <HAL_RCC_OscConfig+0x278>)
 80013b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013b8:	4b4e      	ldr	r3, [pc, #312]	@ (80014f4 <HAL_RCC_OscConfig+0x27c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fb43 	bl	8000a48 <HAL_InitTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d052      	beq.n	8001472 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	e327      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d032      	beq.n	800143e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013d8:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a42      	ldr	r2, [pc, #264]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc34 	bl	8000c50 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc30 	bl	8000c50 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e310      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013fe:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140a:	4b37      	ldr	r3, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a36      	ldr	r2, [pc, #216]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4931      	ldr	r1, [pc, #196]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	492c      	ldr	r1, [pc, #176]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e01a      	b.n	8001474 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a29      	ldr	r2, [pc, #164]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144a:	f7ff fc01 	bl	8000c50 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001452:	f7ff fbfd 	bl	8000c50 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e2dd      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x1da>
 8001470:	e000      	b.n	8001474 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001472:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d074      	beq.n	800156a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x21a>
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d10e      	bne.n	80014aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d10b      	bne.n	80014aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d064      	beq.n	8001568 <HAL_RCC_OscConfig+0x2f0>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d160      	bne.n	8001568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e2ba      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x24a>
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e026      	b.n	8001510 <HAL_RCC_OscConfig+0x298>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ca:	d115      	bne.n	80014f8 <HAL_RCC_OscConfig+0x280>
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a02      	ldr	r2, [pc, #8]	@ (80014e8 <HAL_RCC_OscConfig+0x270>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x298>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	080062e0 	.word	0x080062e0
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004
 80014f8:	4ba0      	ldr	r3, [pc, #640]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a9f      	ldr	r2, [pc, #636]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b9d      	ldr	r3, [pc, #628]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a9c      	ldr	r2, [pc, #624]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb9a 	bl	8000c50 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb96 	bl	8000c50 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e276      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001532:	4b92      	ldr	r3, [pc, #584]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x2a8>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb86 	bl	8000c50 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb82 	bl	8000c50 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e262      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	4b88      	ldr	r3, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d0>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d060      	beq.n	8001638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x310>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d119      	bne.n	80015b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d116      	bne.n	80015b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b7c      	ldr	r3, [pc, #496]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x328>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e23f      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4973      	ldr	r1, [pc, #460]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	e040      	b.n	8001638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	4b6f      	ldr	r3, [pc, #444]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6e      	ldr	r2, [pc, #440]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb41 	bl	8000c50 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb3d 	bl	8000c50 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e21d      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b65      	ldr	r3, [pc, #404]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b62      	ldr	r3, [pc, #392]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	495f      	ldr	r1, [pc, #380]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b5d      	ldr	r3, [pc, #372]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a5c      	ldr	r2, [pc, #368]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800160c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fb1d 	bl	8000c50 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fb19 	bl	8000c50 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1f9      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d03c      	beq.n	80016be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01c      	beq.n	8001686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	4b4b      	ldr	r3, [pc, #300]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001652:	4a4a      	ldr	r2, [pc, #296]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff faf8 	bl	8000c50 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff faf4 	bl	8000c50 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1d4      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ef      	beq.n	8001664 <HAL_RCC_OscConfig+0x3ec>
 8001684:	e01b      	b.n	80016be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff fadb 	bl	8000c50 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fad7 	bl	8000c50 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1b7      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	4b32      	ldr	r3, [pc, #200]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ef      	bne.n	800169e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80a6 	beq.w	8001818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10d      	bne.n	80016f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	4a26      	ldr	r2, [pc, #152]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e8:	4b24      	ldr	r3, [pc, #144]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f4:	2301      	movs	r3, #1
 80016f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d118      	bne.n	8001736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001710:	f7ff fa9e 	bl	8000c50 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff fa9a 	bl	8000c50 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e17a      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_RCC_OscConfig+0x508>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d8>
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800174e:	e029      	b.n	80017a4 <HAL_RCC_OscConfig+0x52c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d115      	bne.n	8001784 <HAL_RCC_OscConfig+0x50c>
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a03      	ldr	r2, [pc, #12]	@ (800177c <HAL_RCC_OscConfig+0x504>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x52c>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40007000 	.word	0x40007000
 8001784:	4b9c      	ldr	r3, [pc, #624]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	4a9b      	ldr	r2, [pc, #620]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001794:	4b98      	ldr	r3, [pc, #608]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a97      	ldr	r2, [pc, #604]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d016      	beq.n	80017da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fa50 	bl	8000c50 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fa4c 	bl	8000c50 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e12a      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	4b8b      	ldr	r3, [pc, #556]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ed      	beq.n	80017b4 <HAL_RCC_OscConfig+0x53c>
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff fa39 	bl	8000c50 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fa35 	bl	8000c50 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e113      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	4b7f      	ldr	r3, [pc, #508]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ed      	bne.n	80017e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b7a      	ldr	r3, [pc, #488]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	4a79      	ldr	r2, [pc, #484]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80fe 	beq.w	8001a1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	2b02      	cmp	r3, #2
 8001828:	f040 80d0 	bne.w	80019cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800182c:	4b72      	ldr	r3, [pc, #456]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	429a      	cmp	r2, r3
 800183e:	d130      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	3b01      	subs	r3, #1
 800184c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d127      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d11f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800186c:	2a07      	cmp	r2, #7
 800186e:	bf14      	ite	ne
 8001870:	2201      	movne	r2, #1
 8001872:	2200      	moveq	r2, #0
 8001874:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	4293      	cmp	r3, r2
 8001878:	d113      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d06e      	beq.n	8001980 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d069      	beq.n	800197c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018b4:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0ad      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018c4:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4b      	ldr	r2, [pc, #300]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d0:	f7ff f9be 	bl	8000c50 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f9ba 	bl	8000c50 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e09a      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ea:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f6:	4b40      	ldr	r3, [pc, #256]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <HAL_RCC_OscConfig+0x784>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001906:	3a01      	subs	r2, #1
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001910:	0212      	lsls	r2, r2, #8
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001918:	0852      	lsrs	r2, r2, #1
 800191a:	3a01      	subs	r2, #1
 800191c:	0552      	lsls	r2, r2, #21
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001924:	0852      	lsrs	r2, r2, #1
 8001926:	3a01      	subs	r2, #1
 8001928:	0652      	lsls	r2, r2, #25
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001930:	0912      	lsrs	r2, r2, #4
 8001932:	0452      	lsls	r2, r2, #17
 8001934:	430a      	orrs	r2, r1
 8001936:	4930      	ldr	r1, [pc, #192]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2d      	ldr	r2, [pc, #180]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a2a      	ldr	r2, [pc, #168]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001954:	f7ff f97c 	bl	8000c50 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f978 	bl	8000c50 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e058      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197a:	e050      	b.n	8001a1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e04f      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d148      	bne.n	8001a1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a4:	f7ff f954 	bl	8000c50 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f950 	bl	8000c50 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e030      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x734>
 80019ca:	e028      	b.n	8001a1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d023      	beq.n	8001a1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_RCC_OscConfig+0x780>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f937 	bl	8000c50 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e00c      	b.n	8001a00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f933 	bl	8000c50 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d905      	bls.n	8001a00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_RCC_OscConfig+0x7b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ec      	bne.n	80019e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_RCC_OscConfig+0x7b0>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4905      	ldr	r1, [pc, #20]	@ (8001a28 <HAL_RCC_OscConfig+0x7b0>)
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_OscConfig+0x7b4>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e001      	b.n	8001a1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	feeefffc 	.word	0xfeeefffc

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0e7      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b72      	ldr	r3, [pc, #456]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4970      	ldr	r1, [pc, #448]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cf      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b63      	ldr	r3, [pc, #396]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4960      	ldr	r1, [pc, #384]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d04c      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d121      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0a6      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4b54      	ldr	r3, [pc, #336]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d115      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e09a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e08e      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e086      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4943      	ldr	r1, [pc, #268]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b18:	f7ff f89a 	bl	8000c50 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff f896 	bl	8000c50 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e06e      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d208      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	492b      	ldr	r1, [pc, #172]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b76:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d210      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	4923      	ldr	r1, [pc, #140]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e036      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4918      	ldr	r1, [pc, #96]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d009      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4910      	ldr	r1, [pc, #64]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be4:	f000 f824 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	490b      	ldr	r1, [pc, #44]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1fc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe ff1d 	bl	8000a48 <HAL_InitTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c12:	7afb      	ldrb	r3, [r7, #11]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	080062e0 	.word	0x080062e0
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x34>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d121      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d11e      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c64:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c70:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	e004      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d134      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d003      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0xac>
 8001cd4:	e005      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd8:	617b      	str	r3, [r7, #20]
      break;
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cde:	617b      	str	r3, [r7, #20]
      break;
 8001ce0:	e002      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	fb03 f202 	mul.w	r2, r3, r2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0e5b      	lsrs	r3, r3, #25
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d28:	69bb      	ldr	r3, [r7, #24]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	080062f8 	.word	0x080062f8
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4904      	ldr	r1, [pc, #16]	@ (8001d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	080062f0 	.word	0x080062f0

08001d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d90:	f7ff ffda 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0adb      	lsrs	r3, r3, #11
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	080062f0 	.word	0x080062f0

08001db8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_RCC_GetClockConfig+0x60>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0207 	and.w	r2, r3, #7
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40022000 	.word	0x40022000

08001e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e34:	f7ff f9bc 	bl	80011b0 <HAL_PWREx_GetVoltageRange>
 8001e38:	6178      	str	r0, [r7, #20]
 8001e3a:	e014      	b.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e48:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e54:	f7ff f9ac 	bl	80011b0 <HAL_PWREx_GetVoltageRange>
 8001e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e6c:	d10b      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	@ 0x80
 8001e72:	d919      	bls.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e78:	d902      	bls.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e013      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e010      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b80      	cmp	r3, #128	@ 0x80
 8001e8a:	d902      	bls.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e00a      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	@ 0x80
 8001e96:	d102      	bne.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e004      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b70      	cmp	r3, #112	@ 0x70
 8001ea2:	d101      	bne.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 0207 	bic.w	r2, r3, #7
 8001eb0:	4909      	ldr	r1, [pc, #36]	@ (8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40022000 	.word	0x40022000

08001edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee8:	2300      	movs	r3, #0
 8001eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d041      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f00:	d02a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f06:	d824      	bhi.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f0c:	d008      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f12:	d81e      	bhi.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f1c:	d010      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f20:	4b86      	ldr	r3, [pc, #536]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a85      	ldr	r2, [pc, #532]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2c:	e015      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fabb 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3e:	e00c      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3320      	adds	r3, #32
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fba6 	bl	8002698 <RCCEx_PLLSAI2_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f50:	e003      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	74fb      	strb	r3, [r7, #19]
      break;
 8001f56:	e000      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10b      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f60:	4b76      	ldr	r3, [pc, #472]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f6e:	4973      	ldr	r1, [pc, #460]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f76:	e001      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d041      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f90:	d02a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f96:	d824      	bhi.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f9c:	d008      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fa2:	d81e      	bhi.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d010      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb0:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a61      	ldr	r2, [pc, #388]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbc:	e015      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fa73 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fce:	e00c      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3320      	adds	r3, #32
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fb5e 	bl	8002698 <RCCEx_PLLSAI2_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fe0:	e003      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe6:	e000      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ff0:	4b52      	ldr	r3, [pc, #328]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ffe:	494f      	ldr	r1, [pc, #316]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a0 	beq.w	800215a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201e:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	4a40      	ldr	r2, [pc, #256]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002040:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204c:	2301      	movs	r3, #1
 800204e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3a      	ldr	r2, [pc, #232]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800205c:	f7fe fdf8 	bl	8000c50 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002062:	e009      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7fe fdf4 	bl	8000c50 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	74fb      	strb	r3, [r7, #19]
        break;
 8002076:	e005      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ef      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d15c      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800208a:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01f      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d019      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a20      	ldr	r2, [pc, #128]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d4:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fdb3 	bl	8000c50 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	e00b      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fdaf 	bl	8000c50 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d902      	bls.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	74fb      	strb	r3, [r7, #19]
            break;
 8002104:	e006      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ec      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211a:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800212a:	4904      	ldr	r1, [pc, #16]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
 8002138:	e006      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002148:	7c7b      	ldrb	r3, [r7, #17]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b9e      	ldr	r3, [pc, #632]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a9d      	ldr	r2, [pc, #628]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002166:	4b98      	ldr	r3, [pc, #608]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f023 0203 	bic.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	4994      	ldr	r1, [pc, #592]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002188:	4b8f      	ldr	r3, [pc, #572]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f023 020c 	bic.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002196:	498c      	ldr	r1, [pc, #560]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021aa:	4b87      	ldr	r3, [pc, #540]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4983      	ldr	r1, [pc, #524]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021cc:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	497b      	ldr	r1, [pc, #492]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ee:	4b76      	ldr	r3, [pc, #472]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fc:	4972      	ldr	r1, [pc, #456]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002210:	4b6d      	ldr	r3, [pc, #436]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	496a      	ldr	r1, [pc, #424]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002232:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	4961      	ldr	r1, [pc, #388]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002254:	4b5c      	ldr	r3, [pc, #368]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	4959      	ldr	r1, [pc, #356]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002276:	4b54      	ldr	r3, [pc, #336]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002284:	4950      	ldr	r1, [pc, #320]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002298:	4b4b      	ldr	r3, [pc, #300]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	4948      	ldr	r1, [pc, #288]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ba:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	493f      	ldr	r1, [pc, #252]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d028      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022dc:	4b3a      	ldr	r3, [pc, #232]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ea:	4937      	ldr	r1, [pc, #220]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fa:	d106      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
 8002308:	e011      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002312:	d10c      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8c8 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d028      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800233a:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002340:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	491f      	ldr	r1, [pc, #124]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002358:	d106      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a1a      	ldr	r2, [pc, #104]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002364:	60d3      	str	r3, [r2, #12]
 8002366:	e011      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002370:	d10c      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	2101      	movs	r1, #1
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f899 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02b      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b6:	d109      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a02      	ldr	r2, [pc, #8]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c2:	60d3      	str	r3, [r2, #12]
 80023c4:	e014      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f867 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02f      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023fc:	4b2b      	ldr	r3, [pc, #172]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800240a:	4928      	ldr	r1, [pc, #160]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f844 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	74bb      	strb	r3, [r7, #18]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3320      	adds	r3, #32
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f925 	bl	8002698 <RCCEx_PLLSAI2_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002468:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002476:	490d      	ldr	r1, [pc, #52]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800249a:	4904      	ldr	r1, [pc, #16]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024be:	4b75      	ldr	r3, [pc, #468]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d018      	beq.n	80024fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ca:	4b72      	ldr	r3, [pc, #456]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
       ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
       ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d047      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d018      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x86>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d825      	bhi.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
 8002508:	2b01      	cmp	r3, #1
 800250a:	d002      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x62>
 800250c:	2b02      	cmp	r3, #2
 800250e:	d009      	beq.n	8002524 <RCCEx_PLLSAI1_Config+0x74>
 8002510:	e020      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002512:	4b60      	ldr	r3, [pc, #384]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002522:	e01a      	b.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002524:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e013      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002536:	4b57      	ldr	r3, [pc, #348]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002542:	4b54      	ldr	r3, [pc, #336]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002552:	e006      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e004      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002562:	bf00      	nop
    }

    if(status == HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800256a:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	430b      	orrs	r3, r1
 8002580:	4944      	ldr	r1, [pc, #272]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d17d      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800258c:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a40      	ldr	r2, [pc, #256]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe fb5a 	bl	8000c50 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800259e:	e009      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a0:	f7fe fb56 	bl	8000c50 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
        break;
 80025b2:	e005      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b4:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ef      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d160      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	0211      	lsls	r1, r2, #8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0912      	lsrs	r2, r2, #4
 80025e4:	0452      	lsls	r2, r2, #17
 80025e6:	430a      	orrs	r2, r1
 80025e8:	492a      	ldr	r1, [pc, #168]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	610b      	str	r3, [r1, #16]
 80025ee:	e027      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d112      	bne.n	800261c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f6:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6892      	ldr	r2, [r2, #8]
 8002606:	0211      	lsls	r1, r2, #8
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6912      	ldr	r2, [r2, #16]
 800260c:	0852      	lsrs	r2, r2, #1
 800260e:	3a01      	subs	r2, #1
 8002610:	0552      	lsls	r2, r2, #21
 8002612:	430a      	orrs	r2, r1
 8002614:	491f      	ldr	r1, [pc, #124]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	610b      	str	r3, [r1, #16]
 800261a:	e011      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002624:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6892      	ldr	r2, [r2, #8]
 800262c:	0211      	lsls	r1, r2, #8
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6952      	ldr	r2, [r2, #20]
 8002632:	0852      	lsrs	r2, r2, #1
 8002634:	3a01      	subs	r2, #1
 8002636:	0652      	lsls	r2, r2, #25
 8002638:	430a      	orrs	r2, r1
 800263a:	4916      	ldr	r1, [pc, #88]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800264a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fb00 	bl	8000c50 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002652:	e009      	b.n	8002668 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002654:	f7fe fafc 	bl	8000c50 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	73fb      	strb	r3, [r7, #15]
          break;
 8002666:	e005      	b.n	8002674 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026b2:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
       ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ca:	4b61      	ldr	r3, [pc, #388]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
       ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d047      	beq.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e044      	b.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d018      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x86>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d825      	bhi.n	800273c <RCCEx_PLLSAI2_Config+0xa4>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0x62>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d009      	beq.n	800270c <RCCEx_PLLSAI2_Config+0x74>
 80026f8:	e020      	b.n	800273c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026fa:	4b55      	ldr	r3, [pc, #340]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11d      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e01a      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270c:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e013      	b.n	8002746 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271e:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800273a:	e006      	b.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e004      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800274a:	bf00      	nop
    }

    if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	430b      	orrs	r3, r1
 8002768:	4939      	ldr	r1, [pc, #228]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d167      	bne.n	8002844 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002774:	4b36      	ldr	r3, [pc, #216]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a35      	ldr	r2, [pc, #212]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe fa66 	bl	8000c50 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002788:	f7fe fa62 	bl	8000c50 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800279c:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d14a      	bne.n	8002844 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b4:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	0912      	lsrs	r2, r2, #4
 80027cc:	0452      	lsls	r2, r2, #17
 80027ce:	430a      	orrs	r2, r1
 80027d0:	491f      	ldr	r1, [pc, #124]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	614b      	str	r3, [r1, #20]
 80027d6:	e011      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	0211      	lsls	r1, r2, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6912      	ldr	r2, [r2, #16]
 80027ee:	0852      	lsrs	r2, r2, #1
 80027f0:	3a01      	subs	r2, #1
 80027f2:	0652      	lsls	r2, r2, #25
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4916      	ldr	r1, [pc, #88]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a13      	ldr	r2, [pc, #76]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fa22 	bl	8000c50 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800280e:	e009      	b.n	8002824 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002810:	f7fe fa1e 	bl	8000c50 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	73fb      	strb	r3, [r7, #15]
          break;
 8002822:	e005      	b.n	8002830 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ef      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4904      	ldr	r1, [pc, #16]	@ (8002850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e049      	b.n	80028fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f841 	bl	8002902 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f9e0 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d001      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e04f      	b.n	80029d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a23      	ldr	r2, [pc, #140]	@ (80029dc <HAL_TIM_Base_Start_IT+0xc4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295a:	d018      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1e      	ldr	r2, [pc, #120]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x76>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a19      	ldr	r2, [pc, #100]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d115      	bne.n	80029ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d015      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0xb4>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a6:	d011      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	e008      	b.n	80029cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e000      	b.n	80029ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40013400 	.word	0x40013400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	00010007 	.word	0x00010007

080029f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0202 	mvn.w	r2, #2
 8002a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8e9 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8db 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8ec 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0204 	mvn.w	r2, #4
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8c3 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8b5 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f8c6 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0208 	mvn.w	r2, #8
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f89d 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f88f 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8a0 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d020      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f877 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f869 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f87a 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0201 	mvn.w	r2, #1
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd fed6 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f913 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f90b 	bl	8002dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f834 	bl	8002c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00c      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0220 	mvn.w	r2, #32
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8d3 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a46      	ldr	r2, [pc, #280]	@ (8002d84 <TIM_Base_SetConfig+0x12c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c76:	d00f      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a43      	ldr	r2, [pc, #268]	@ (8002d88 <TIM_Base_SetConfig+0x130>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a42      	ldr	r2, [pc, #264]	@ (8002d8c <TIM_Base_SetConfig+0x134>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a41      	ldr	r2, [pc, #260]	@ (8002d90 <TIM_Base_SetConfig+0x138>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a40      	ldr	r2, [pc, #256]	@ (8002d94 <TIM_Base_SetConfig+0x13c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <TIM_Base_SetConfig+0x12c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb8:	d01b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a32      	ldr	r2, [pc, #200]	@ (8002d88 <TIM_Base_SetConfig+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d017      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <TIM_Base_SetConfig+0x134>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	@ (8002d90 <TIM_Base_SetConfig+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d94 <TIM_Base_SetConfig+0x13c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d98 <TIM_Base_SetConfig+0x140>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <TIM_Base_SetConfig+0x144>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <TIM_Base_SetConfig+0x148>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <TIM_Base_SetConfig+0x12c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0xf8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <TIM_Base_SetConfig+0x13c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <TIM_Base_SetConfig+0x140>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0xf8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <TIM_Base_SetConfig+0x144>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <TIM_Base_SetConfig+0x148>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 0201 	bic.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]
  }
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40013400 	.word	0x40013400
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e040      	b.n	8002e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fdc4 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fae0 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f825 	bl	8002e7c <UART_SetConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01b      	b.n	8002e74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb5f 	bl	8003530 <UART_CheckIdleState>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b08a      	sub	sp, #40	@ 0x28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4ba4      	ldr	r3, [pc, #656]	@ (800313c <UART_SetConfig+0x2c0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a99      	ldr	r2, [pc, #612]	@ (8003140 <UART_SetConfig+0x2c4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a90      	ldr	r2, [pc, #576]	@ (8003144 <UART_SetConfig+0x2c8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d126      	bne.n	8002f54 <UART_SetConfig+0xd8>
 8002f06:	4b90      	ldr	r3, [pc, #576]	@ (8003148 <UART_SetConfig+0x2cc>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d81b      	bhi.n	8002f4c <UART_SetConfig+0xd0>
 8002f14:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <UART_SetConfig+0xa0>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f3d 	.word	0x08002f3d
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f32:	e116      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f34:	2302      	movs	r3, #2
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3a:	e112      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f42:	e10e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f44:	2308      	movs	r3, #8
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4a:	e10a      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f52:	e106      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7c      	ldr	r2, [pc, #496]	@ (800314c <UART_SetConfig+0x2d0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d138      	bne.n	8002fd0 <UART_SetConfig+0x154>
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003148 <UART_SetConfig+0x2cc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d82d      	bhi.n	8002fc8 <UART_SetConfig+0x14c>
 8002f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <UART_SetConfig+0xf8>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fc9 	.word	0x08002fc9
 8002f7c:	08002fc9 	.word	0x08002fc9
 8002f80:	08002fc9 	.word	0x08002fc9
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	08002fb1 	.word	0x08002fb1
 8002f98:	08002fc9 	.word	0x08002fc9
 8002f9c:	08002fc9 	.word	0x08002fc9
 8002fa0:	08002fc9 	.word	0x08002fc9
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e0d8      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e0d4      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e0d0      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e0cc      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e0c8      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8003150 <UART_SetConfig+0x2d4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d125      	bne.n	8003026 <UART_SetConfig+0x1aa>
 8002fda:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <UART_SetConfig+0x2cc>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fe4:	2b30      	cmp	r3, #48	@ 0x30
 8002fe6:	d016      	beq.n	8003016 <UART_SetConfig+0x19a>
 8002fe8:	2b30      	cmp	r3, #48	@ 0x30
 8002fea:	d818      	bhi.n	800301e <UART_SetConfig+0x1a2>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d00a      	beq.n	8003006 <UART_SetConfig+0x18a>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d814      	bhi.n	800301e <UART_SetConfig+0x1a2>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <UART_SetConfig+0x182>
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d008      	beq.n	800300e <UART_SetConfig+0x192>
 8002ffc:	e00f      	b.n	800301e <UART_SetConfig+0x1a2>
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003004:	e0ad      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003006:	2302      	movs	r3, #2
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300c:	e0a9      	b.n	8003162 <UART_SetConfig+0x2e6>
 800300e:	2304      	movs	r3, #4
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003014:	e0a5      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003016:	2308      	movs	r3, #8
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301c:	e0a1      	b.n	8003162 <UART_SetConfig+0x2e6>
 800301e:	2310      	movs	r3, #16
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003024:	e09d      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <UART_SetConfig+0x2d8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d125      	bne.n	800307c <UART_SetConfig+0x200>
 8003030:	4b45      	ldr	r3, [pc, #276]	@ (8003148 <UART_SetConfig+0x2cc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800303a:	2bc0      	cmp	r3, #192	@ 0xc0
 800303c:	d016      	beq.n	800306c <UART_SetConfig+0x1f0>
 800303e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003040:	d818      	bhi.n	8003074 <UART_SetConfig+0x1f8>
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d00a      	beq.n	800305c <UART_SetConfig+0x1e0>
 8003046:	2b80      	cmp	r3, #128	@ 0x80
 8003048:	d814      	bhi.n	8003074 <UART_SetConfig+0x1f8>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <UART_SetConfig+0x1d8>
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d008      	beq.n	8003064 <UART_SetConfig+0x1e8>
 8003052:	e00f      	b.n	8003074 <UART_SetConfig+0x1f8>
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305a:	e082      	b.n	8003162 <UART_SetConfig+0x2e6>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003062:	e07e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306a:	e07a      	b.n	8003162 <UART_SetConfig+0x2e6>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e076      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e072      	b.n	8003162 <UART_SetConfig+0x2e6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <UART_SetConfig+0x2dc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12a      	bne.n	80030dc <UART_SetConfig+0x260>
 8003086:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <UART_SetConfig+0x2cc>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003094:	d01a      	beq.n	80030cc <UART_SetConfig+0x250>
 8003096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800309a:	d81b      	bhi.n	80030d4 <UART_SetConfig+0x258>
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d00c      	beq.n	80030bc <UART_SetConfig+0x240>
 80030a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a6:	d815      	bhi.n	80030d4 <UART_SetConfig+0x258>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <UART_SetConfig+0x238>
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b0:	d008      	beq.n	80030c4 <UART_SetConfig+0x248>
 80030b2:	e00f      	b.n	80030d4 <UART_SetConfig+0x258>
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e052      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c2:	e04e      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e04a      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030cc:	2308      	movs	r3, #8
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d2:	e046      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030da:	e042      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a17      	ldr	r2, [pc, #92]	@ (8003140 <UART_SetConfig+0x2c4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d13a      	bne.n	800315c <UART_SetConfig+0x2e0>
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <UART_SetConfig+0x2cc>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030f4:	d01a      	beq.n	800312c <UART_SetConfig+0x2b0>
 80030f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030fa:	d81b      	bhi.n	8003134 <UART_SetConfig+0x2b8>
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003100:	d00c      	beq.n	800311c <UART_SetConfig+0x2a0>
 8003102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003106:	d815      	bhi.n	8003134 <UART_SetConfig+0x2b8>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <UART_SetConfig+0x298>
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003110:	d008      	beq.n	8003124 <UART_SetConfig+0x2a8>
 8003112:	e00f      	b.n	8003134 <UART_SetConfig+0x2b8>
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e022      	b.n	8003162 <UART_SetConfig+0x2e6>
 800311c:	2302      	movs	r3, #2
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003122:	e01e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003124:	2304      	movs	r3, #4
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e01a      	b.n	8003162 <UART_SetConfig+0x2e6>
 800312c:	2308      	movs	r3, #8
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e016      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003134:	2310      	movs	r3, #16
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e012      	b.n	8003162 <UART_SetConfig+0x2e6>
 800313c:	efff69f3 	.word	0xefff69f3
 8003140:	40008000 	.word	0x40008000
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40004400 	.word	0x40004400
 8003150:	40004800 	.word	0x40004800
 8003154:	40004c00 	.word	0x40004c00
 8003158:	40005000 	.word	0x40005000
 800315c:	2310      	movs	r3, #16
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a9f      	ldr	r2, [pc, #636]	@ (80033e4 <UART_SetConfig+0x568>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d17a      	bne.n	8003262 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800316c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003170:	2b08      	cmp	r3, #8
 8003172:	d824      	bhi.n	80031be <UART_SetConfig+0x342>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x300>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031bf 	.word	0x080031bf
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031bf 	.word	0x080031bf
 800318c:	080031af 	.word	0x080031af
 8003190:	080031bf 	.word	0x080031bf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031bf 	.word	0x080031bf
 800319c:	080031b7 	.word	0x080031b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe fdde 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 80031a4:	61f8      	str	r0, [r7, #28]
        break;
 80031a6:	e010      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a8:	4b8f      	ldr	r3, [pc, #572]	@ (80033e8 <UART_SetConfig+0x56c>)
 80031aa:	61fb      	str	r3, [r7, #28]
        break;
 80031ac:	e00d      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ae:	f7fe fd3f 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 80031b2:	61f8      	str	r0, [r7, #28]
        break;
 80031b4:	e009      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ba:	61fb      	str	r3, [r7, #28]
        break;
 80031bc:	e005      	b.n	80031ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80fb 	beq.w	80033c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d305      	bcc.n	80031ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d903      	bls.n	80031f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031f4:	e0e8      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2200      	movs	r2, #0
 80031fa:	461c      	mov	r4, r3
 80031fc:	4615      	mov	r5, r2
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	022b      	lsls	r3, r5, #8
 8003208:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800320c:	0222      	lsls	r2, r4, #8
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	6849      	ldr	r1, [r1, #4]
 8003212:	0849      	lsrs	r1, r1, #1
 8003214:	2000      	movs	r0, #0
 8003216:	4688      	mov	r8, r1
 8003218:	4681      	mov	r9, r0
 800321a:	eb12 0a08 	adds.w	sl, r2, r8
 800321e:	eb43 0b09 	adc.w	fp, r3, r9
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003230:	4650      	mov	r0, sl
 8003232:	4659      	mov	r1, fp
 8003234:	f7fc ffcc 	bl	80001d0 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003246:	d308      	bcc.n	800325a <UART_SetConfig+0x3de>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324e:	d204      	bcs.n	800325a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	e0b6      	b.n	80033c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003260:	e0b2      	b.n	80033c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d15e      	bne.n	800332a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800326c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003270:	2b08      	cmp	r3, #8
 8003272:	d828      	bhi.n	80032c6 <UART_SetConfig+0x44a>
 8003274:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <UART_SetConfig+0x400>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032c7 	.word	0x080032c7
 800328c:	080032b7 	.word	0x080032b7
 8003290:	080032c7 	.word	0x080032c7
 8003294:	080032c7 	.word	0x080032c7
 8003298:	080032c7 	.word	0x080032c7
 800329c:	080032bf 	.word	0x080032bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7fe fd5e 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
        break;
 80032a6:	e014      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a8:	f7fe fd70 	bl	8001d8c <HAL_RCC_GetPCLK2Freq>
 80032ac:	61f8      	str	r0, [r7, #28]
        break;
 80032ae:	e010      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b0:	4b4d      	ldr	r3, [pc, #308]	@ (80033e8 <UART_SetConfig+0x56c>)
 80032b2:	61fb      	str	r3, [r7, #28]
        break;
 80032b4:	e00d      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b6:	f7fe fcbb 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 80032ba:	61f8      	str	r0, [r7, #28]
        break;
 80032bc:	e009      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c2:	61fb      	str	r3, [r7, #28]
        break;
 80032c4:	e005      	b.n	80032d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d077      	beq.n	80033c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005a      	lsls	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d916      	bls.n	8003322 <UART_SetConfig+0x4a6>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fa:	d212      	bcs.n	8003322 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	b29a      	uxth	r2, r3
 8003312:	8afb      	ldrh	r3, [r7, #22]
 8003314:	4313      	orrs	r3, r2
 8003316:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	8afa      	ldrh	r2, [r7, #22]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e052      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003328:	e04e      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800332e:	2b08      	cmp	r3, #8
 8003330:	d827      	bhi.n	8003382 <UART_SetConfig+0x506>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <UART_SetConfig+0x4bc>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003383 	.word	0x08003383
 8003348:	08003373 	.word	0x08003373
 800334c:	08003383 	.word	0x08003383
 8003350:	08003383 	.word	0x08003383
 8003354:	08003383 	.word	0x08003383
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe fd00 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8003360:	61f8      	str	r0, [r7, #28]
        break;
 8003362:	e014      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe fd12 	bl	8001d8c <HAL_RCC_GetPCLK2Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b1e      	ldr	r3, [pc, #120]	@ (80033e8 <UART_SetConfig+0x56c>)
 800336e:	61fb      	str	r3, [r7, #28]
        break;
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fc5d 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8003376:	61f8      	str	r0, [r7, #28]
        break;
 8003378:	e009      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e005      	b.n	800338e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800338c:	bf00      	nop
    }

    if (pclk != 0U)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d019      	beq.n	80033c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	085a      	lsrs	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d909      	bls.n	80033c2 <UART_SetConfig+0x546>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d205      	bcs.n	80033c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e002      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3728      	adds	r7, #40	@ 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e2:	bf00      	nop
 80033e4:	40008000 	.word	0x40008000
 80033e8:	00f42400 	.word	0x00f42400

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01a      	beq.n	8003502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ea:	d10a      	bne.n	8003502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b098      	sub	sp, #96	@ 0x60
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fb86 	bl	8000c50 <HAL_GetTick>
 8003544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d12e      	bne.n	80035b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f88c 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d021      	beq.n	80035b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003582:	653b      	str	r3, [r7, #80]	@ 0x50
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
 800358e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800359a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e6      	bne.n	800356e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e062      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d149      	bne.n	8003654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f856 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d03c      	beq.n	8003654 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	623b      	str	r3, [r7, #32]
   return(result);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60fb      	str	r3, [r7, #12]
   return(result);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	617b      	str	r3, [r7, #20]
   return(result);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e011      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3758      	adds	r7, #88	@ 0x58
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e04f      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d04b      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fd fad9 	bl	8000c50 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e04e      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d037      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d034      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d031      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d110      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f838 	bl	800375a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2208      	movs	r2, #8
 80036ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e029      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800370c:	d111      	bne.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f81e 	bl	800375a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	429a      	cmp	r2, r3
 800374e:	d0a0      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375a:	b480      	push	{r7}
 800375c:	b095      	sub	sp, #84	@ 0x54
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003780:	643b      	str	r3, [r7, #64]	@ 0x40
 8003782:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d118      	bne.n	8003802 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0310 	bic.w	r3, r3, #16
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	613b      	str	r3, [r7, #16]
   return(result);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003816:	bf00      	nop
 8003818:	3754      	adds	r7, #84	@ 0x54
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003834:	2b84      	cmp	r3, #132	@ 0x84
 8003836:	d005      	beq.n	8003844 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003838:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	3303      	adds	r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003858:	f3ef 8305 	mrs	r3, IPSR
 800385c:	607b      	str	r3, [r7, #4]
  return(result);
 800385e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800387a:	f001 f973 	bl	8004b64 <vTaskStartScheduler>
  
  return osOK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}

08003884 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af04      	add	r7, sp, #16
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <osThreadCreate+0x54>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01c      	beq.n	80038d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685c      	ldr	r4, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691e      	ldr	r6, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ffb6 	bl	8003822 <makeFreeRtosPriority>
 80038b6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038c0:	9202      	str	r2, [sp, #8]
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	9100      	str	r1, [sp, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4632      	mov	r2, r6
 80038ca:	4629      	mov	r1, r5
 80038cc:	4620      	mov	r0, r4
 80038ce:	f000 ff63 	bl	8004798 <xTaskCreateStatic>
 80038d2:	4603      	mov	r3, r0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e01c      	b.n	8003912 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685c      	ldr	r4, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038e4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff98 	bl	8003822 <makeFreeRtosPriority>
 80038f2:	4602      	mov	r2, r0
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	9200      	str	r2, [sp, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4632      	mov	r2, r6
 8003900:	4629      	mov	r1, r5
 8003902:	4620      	mov	r0, r4
 8003904:	f000 ffa8 	bl	8004858 <xTaskCreate>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800391c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <osDelay+0x16>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	e000      	b.n	8003934 <osDelay+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f8df 	bl	8004af8 <vTaskDelay>
  
  return osOK;
 800393a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	2001      	movs	r0, #1
 800395c:	f000 fab5 	bl	8003eca <xQueueCreateMutexStatic>
 8003960:	4603      	mov	r3, r0
 8003962:	e003      	b.n	800396c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003964:	2001      	movs	r0, #1
 8003966:	f000 fa98 	bl	8003e9a <xQueueCreateMutex>
 800396a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <osMutexWait+0x18>
    return osErrorParameter;
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	e03a      	b.n	8003a02 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d103      	bne.n	80039a0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e009      	b.n	80039b4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <osMutexWait+0x40>
      ticks = 1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80039b4:	f7ff ff4d 	bl	8003852 <inHandlerMode>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d017      	beq.n	80039ee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	461a      	mov	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fd3c 	bl	8004444 <xQueueReceiveFromISR>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d001      	beq.n	80039d6 <osMutexWait+0x62>
      return osErrorOS;
 80039d2:	23ff      	movs	r3, #255	@ 0xff
 80039d4:	e015      	b.n	8003a02 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <osMutexWait+0x8c>
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <osMutexWait+0x98>)
 80039de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	e008      	b.n	8003a00 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fc17 	bl	8004224 <xQueueSemaphoreTake>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <osMutexWait+0x8c>
    return osErrorOS;
 80039fc:	23ff      	movs	r3, #255	@ 0xff
 80039fe:	e000      	b.n	8003a02 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003a20:	f7ff ff17 	bl	8003852 <inHandlerMode>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb67 	bl	8004104 <xQueueGiveFromISR>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <osMutexRelease+0x30>
      return osErrorOS;
 8003a3c:	23ff      	movs	r3, #255	@ 0xff
 8003a3e:	e017      	b.n	8003a70 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <osMutexRelease+0x5e>
 8003a46:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <osMutexRelease+0x68>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	e00a      	b.n	8003a6e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa4e 	bl	8003f00 <xQueueGenericSend>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003a6a:	23ff      	movs	r3, #255	@ 0xff
 8003a6c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f103 0208 	add.w	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f103 0208 	add.w	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f103 0208 	add.w	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d103      	bne.n	8003b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e00c      	b.n	8003b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3308      	adds	r3, #8
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e002      	b.n	8003b4c <vListInsert+0x2e>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d2f6      	bcs.n	8003b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d103      	bne.n	8003bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1e5a      	subs	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c10:	f001 ff22 	bl	8005a58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	3b01      	subs	r3, #1
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	22ff      	movs	r2, #255	@ 0xff
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	22ff      	movs	r2, #255	@ 0xff
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01a      	beq.n	8003ca4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3310      	adds	r3, #16
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 f9d0 	bl	8005018 <xTaskRemoveFromEventList>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <xQueueGenericReset+0xd0>)
 8003c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	e009      	b.n	8003ca4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3310      	adds	r3, #16
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fef1 	bl	8003a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3324      	adds	r3, #36	@ 0x24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff feec 	bl	8003a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ca4:	f001 ff0a 	bl	8005abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ca8:	2301      	movs	r3, #1
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <xQueueGenericCreateStatic+0x56>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <xQueueGenericCreateStatic+0x5a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueGenericCreateStatic+0x5c>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	623b      	str	r3, [r7, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xQueueGenericCreateStatic+0x84>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueGenericCreateStatic+0x88>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueGenericCreateStatic+0x8a>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d5e:	2348      	movs	r3, #72	@ 0x48
 8003d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b48      	cmp	r3, #72	@ 0x48
 8003d66:	d00b      	beq.n	8003d80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	61bb      	str	r3, [r7, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f840 	bl	8003e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3730      	adds	r7, #48	@ 0x30
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08a      	sub	sp, #40	@ 0x28
 8003db6:	af02      	add	r7, sp, #8
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <xQueueGenericCreate+0x2c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	613b      	str	r3, [r7, #16]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3348      	adds	r3, #72	@ 0x48
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 ff55 	bl	8005c9c <pvPortMalloc>
 8003df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3348      	adds	r3, #72	@ 0x48
 8003e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f805 	bl	8003e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e002      	b.n	8003e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e56:	2101      	movs	r1, #1
 8003e58:	69b8      	ldr	r0, [r7, #24]
 8003e5a:	f7ff fec3 	bl	8003be4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e86:	2300      	movs	r3, #0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f837 	bl	8003f00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff7d 	bl	8003db2 <xQueueGenericCreate>
 8003eb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ffd3 	bl	8003e66 <prvInitialiseMutex>

		return xNewQueue;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	6039      	str	r1, [r7, #0]
 8003ed4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	6978      	ldr	r0, [r7, #20]
 8003eea:	f7ff fee5 	bl	8003cb8 <xQueueGenericCreateStatic>
 8003eee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff ffb8 	bl	8003e66 <prvInitialiseMutex>

		return xNewQueue;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
	}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	@ 0x38
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <xQueueGenericSend+0x34>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <xQueueGenericSend+0x42>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <xQueueGenericSend+0x46>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueGenericSend+0x48>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <xQueueGenericSend+0x64>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d103      	bne.n	8003f72 <xQueueGenericSend+0x72>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <xQueueGenericSend+0x76>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <xQueueGenericSend+0x78>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <xQueueGenericSend+0x94>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	623b      	str	r3, [r7, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f94:	f001 fa06 	bl	80053a4 <xTaskGetSchedulerState>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <xQueueGenericSend+0xa4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <xQueueGenericSend+0xa8>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <xQueueGenericSend+0xaa>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	61fb      	str	r3, [r7, #28]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fc6:	f001 fd47 	bl	8005a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <xQueueGenericSend+0xdc>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d129      	bne.n	8004030 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fe2:	f000 fac9 	bl	8004578 <prvCopyDataToQueue>
 8003fe6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	3324      	adds	r3, #36	@ 0x24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f80f 	bl	8005018 <xTaskRemoveFromEventList>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004000:	4b3f      	ldr	r3, [pc, #252]	@ (8004100 <xQueueGenericSend+0x200>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	e00a      	b.n	8004028 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004018:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <xQueueGenericSend+0x200>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004028:	f001 fd48 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 800402c:	2301      	movs	r3, #1
 800402e:	e063      	b.n	80040f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004036:	f001 fd41 	bl	8005abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800403a:	2300      	movs	r3, #0
 800403c:	e05c      	b.n	80040f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800403e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f849 	bl	80050e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004052:	f001 fd33 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004056:	f000 fdef 	bl	8004c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800405a:	f001 fcfd 	bl	8005a58 <vPortEnterCritical>
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004064:	b25b      	sxtb	r3, r3
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d103      	bne.n	8004074 <xQueueGenericSend+0x174>
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800407a:	b25b      	sxtb	r3, r3
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d103      	bne.n	800408a <xQueueGenericSend+0x18a>
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800408a:	f001 fd17 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800408e:	1d3a      	adds	r2, r7, #4
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f001 f838 	bl	800510c <xTaskCheckForTimeOut>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d124      	bne.n	80040ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a4:	f000 fb60 	bl	8004768 <prvIsQueueFull>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	3310      	adds	r3, #16
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 ff88 	bl	8004fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040be:	f000 faeb 	bl	8004698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040c2:	f000 fdc7 	bl	8004c54 <xTaskResumeAll>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f47f af7c 	bne.w	8003fc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004100 <xQueueGenericSend+0x200>)
 80040d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	e772      	b.n	8003fc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040e2:	f000 fad9 	bl	8004698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040e6:	f000 fdb5 	bl	8004c54 <xTaskResumeAll>
 80040ea:	e76c      	b.n	8003fc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ee:	f000 fad3 	bl	8004698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040f2:	f000 fdaf 	bl	8004c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3738      	adds	r7, #56	@ 0x38
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08e      	sub	sp, #56	@ 0x38
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	623b      	str	r3, [r7, #32]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	61fb      	str	r3, [r7, #28]
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <xQueueGiveFromISR+0x5c>
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <xQueueGiveFromISR+0x60>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <xQueueGiveFromISR+0x62>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	61bb      	str	r3, [r7, #24]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004182:	f001 fd49 	bl	8005c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004186:	f3ef 8211 	mrs	r2, BASEPRI
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800419e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d22b      	bcs.n	800420a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d112      	bne.n	80041f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	3324      	adds	r3, #36	@ 0x24
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff1c 	bl	8005018 <xTaskRemoveFromEventList>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00b      	beq.n	8004204 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e007      	b.n	8004204 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041f8:	3301      	adds	r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	b25a      	sxtb	r2, r3
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004204:	2301      	movs	r3, #1
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
 8004208:	e001      	b.n	800420e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800421a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800421c:	4618      	mov	r0, r3
 800421e:	3738      	adds	r7, #56	@ 0x38
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	@ 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61fb      	str	r3, [r7, #28]
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004278:	f001 f894 	bl	80053a4 <xTaskGetSchedulerState>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <xQueueSemaphoreTake+0x64>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <xQueueSemaphoreTake+0x68>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <xQueueSemaphoreTake+0x6a>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61bb      	str	r3, [r7, #24]
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042aa:	f001 fbd5 	bl	8005a58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042ca:	f001 fa17 	bl	80056fc <pvTaskIncrementMutexHeldCount>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00f      	beq.n	80042fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fe99 	bl	8005018 <xTaskRemoveFromEventList>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042ec:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <xQueueSemaphoreTake+0x21c>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042fc:	f001 fbde 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 8004300:	2301      	movs	r3, #1
 8004302:	e098      	b.n	8004436 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d112      	bne.n	8004330 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	617b      	str	r3, [r7, #20]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004328:	f001 fbc8 	bl	8005abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800432c:	2300      	movs	r3, #0
 800432e:	e082      	b.n	8004436 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fed0 	bl	80050e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004344:	f001 fbba 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004348:	f000 fc76 	bl	8004c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800434c:	f001 fb84 	bl	8005a58 <vPortEnterCritical>
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d103      	bne.n	8004366 <xQueueSemaphoreTake+0x142>
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800436c:	b25b      	sxtb	r3, r3
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d103      	bne.n	800437c <xQueueSemaphoreTake+0x158>
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800437c:	f001 fb9e 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004380:	463a      	mov	r2, r7
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 febf 	bl	800510c <xTaskCheckForTimeOut>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d132      	bne.n	80043fa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004396:	f000 f9d1 	bl	800473c <prvIsQueueEmpty>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d026      	beq.n	80043ee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80043a8:	f001 fb56 	bl	8005a58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f815 	bl	80053e0 <xTaskPriorityInherit>
 80043b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80043b8:	f001 fb80 	bl	8005abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043be:	3324      	adds	r3, #36	@ 0x24
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe01 	bl	8004fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043cc:	f000 f964 	bl	8004698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043d0:	f000 fc40 	bl	8004c54 <xTaskResumeAll>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f af67 	bne.w	80042aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80043dc:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <xQueueSemaphoreTake+0x21c>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	e75d      	b.n	80042aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043f0:	f000 f952 	bl	8004698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043f4:	f000 fc2e 	bl	8004c54 <xTaskResumeAll>
 80043f8:	e757      	b.n	80042aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043fc:	f000 f94c 	bl	8004698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004400:	f000 fc28 	bl	8004c54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004404:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004406:	f000 f999 	bl	800473c <prvIsQueueEmpty>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f43f af4c 	beq.w	80042aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004418:	f001 fb1e 	bl	8005a58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800441c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800441e:	f000 f893 	bl	8004548 <prvGetDisinheritPriorityAfterTimeout>
 8004422:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f8d6 	bl	80055dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004430:	f001 fb44 	bl	8005abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004434:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004436:	4618      	mov	r0, r3
 8004438:	3738      	adds	r7, #56	@ 0x38
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	@ 0x38
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	623b      	str	r3, [r7, #32]
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <xQueueReceiveFromISR+0x3c>
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <xQueueReceiveFromISR+0x40>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <xQueueReceiveFromISR+0x42>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	61fb      	str	r3, [r7, #28]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a2:	f001 fbb9 	bl	8005c18 <vPortValidateInterruptPriority>
	__asm volatile
 80044a6:	f3ef 8211 	mrs	r2, BASEPRI
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61ba      	str	r2, [r7, #24]
 80044bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d02f      	beq.n	800452e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044dc:	f000 f8b6 	bl	800464c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d112      	bne.n	8004518 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	3310      	adds	r3, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd8a 	bl	8005018 <xTaskRemoveFromEventList>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e007      	b.n	8004528 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800451c:	3301      	adds	r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	b25a      	sxtb	r2, r3
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
 800452c:	e001      	b.n	8004532 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f383 8811 	msr	BASEPRI, r3
}
 800453c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004540:	4618      	mov	r0, r3
 8004542:	3738      	adds	r7, #56	@ 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e001      	b.n	800456a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800456a:	68fb      	ldr	r3, [r7, #12]
	}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d14d      	bne.n	800463a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ff92 	bl	80054cc <xTaskPriorityDisinherit>
 80045a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	e043      	b.n	800463a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d119      	bne.n	80045ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6858      	ldr	r0, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	461a      	mov	r2, r3
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	f001 fddc 	bl	8006180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	441a      	add	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d32b      	bcc.n	800463a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	e026      	b.n	800463a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68d8      	ldr	r0, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	461a      	mov	r2, r3
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	f001 fdc2 	bl	8006180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	425b      	negs	r3, r3
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d207      	bcs.n	8004628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	425b      	negs	r3, r3
 8004622:	441a      	add	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d105      	bne.n	800463a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3b01      	subs	r3, #1
 8004638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004642:	697b      	ldr	r3, [r7, #20]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d303      	bcc.n	8004680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68d9      	ldr	r1, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	461a      	mov	r2, r3
 800468a:	6838      	ldr	r0, [r7, #0]
 800468c:	f001 fd78 	bl	8006180 <memcpy>
	}
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046a0:	f001 f9da 	bl	8005a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046ac:	e011      	b.n	80046d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3324      	adds	r3, #36	@ 0x24
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fcac 	bl	8005018 <xTaskRemoveFromEventList>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046c6:	f000 fd85 	bl	80051d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dce9      	bgt.n	80046ae <prvUnlockQueue+0x16>
 80046da:	e000      	b.n	80046de <prvUnlockQueue+0x46>
					break;
 80046dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	22ff      	movs	r2, #255	@ 0xff
 80046e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046e6:	f001 f9e9 	bl	8005abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ea:	f001 f9b5 	bl	8005a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046f6:	e011      	b.n	800471c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3310      	adds	r3, #16
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc87 	bl	8005018 <xTaskRemoveFromEventList>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004710:	f000 fd60 	bl	80051d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004714:	7bbb      	ldrb	r3, [r7, #14]
 8004716:	3b01      	subs	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800471c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004720:	2b00      	cmp	r3, #0
 8004722:	dce9      	bgt.n	80046f8 <prvUnlockQueue+0x60>
 8004724:	e000      	b.n	8004728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22ff      	movs	r2, #255	@ 0xff
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004730:	f001 f9c4 	bl	8005abc <vPortExitCritical>
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004744:	f001 f988 	bl	8005a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004750:	2301      	movs	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e001      	b.n	800475a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800475a:	f001 f9af 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004770:	f001 f972 	bl	8005a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	429a      	cmp	r2, r3
 800477e:	d102      	bne.n	8004786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e001      	b.n	800478a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800478a:	f001 f997 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	@ 0x38
 800479c:	af04      	add	r7, sp, #16
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	61fb      	str	r3, [r7, #28]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047e2:	23a0      	movs	r3, #160	@ 0xa0
 80047e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80047ea:	d00b      	beq.n	8004804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	61bb      	str	r3, [r7, #24]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <xTaskCreateStatic+0xb2>
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	2202      	movs	r2, #2
 8004820:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004824:	2300      	movs	r3, #0
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f851 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004844:	f000 f8ee 	bl	8004a24 <prvAddNewTaskToReadyList>
 8004848:	e001      	b.n	800484e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800484e:	697b      	ldr	r3, [r7, #20]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	@ 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af04      	add	r7, sp, #16
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fa15 	bl	8005c9c <pvPortMalloc>
 8004872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800487a:	20a0      	movs	r0, #160	@ 0xa0
 800487c:	f001 fa0e 	bl	8005c9c <pvPortMalloc>
 8004880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
 800488e:	e005      	b.n	800489c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f001 fad1 	bl	8005e38 <vPortFree>
 8004896:	e001      	b.n	800489c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f80f 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c6:	69f8      	ldr	r0, [r7, #28]
 80048c8:	f000 f8ac 	bl	8004a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e002      	b.n	80048d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048d8:	69bb      	ldr	r3, [r7, #24]
	}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048fc:	3b01      	subs	r3, #1
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	617b      	str	r3, [r7, #20]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01f      	beq.n	8004974 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e012      	b.n	8004960 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	4413      	add	r3, r2
 8004940:	7819      	ldrb	r1, [r3, #0]
 8004942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	3334      	adds	r3, #52	@ 0x34
 800494a:	460a      	mov	r2, r1
 800494c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d9e9      	bls.n	800493a <prvInitialiseNewTask+0x56>
 8004966:	e000      	b.n	800496a <prvInitialiseNewTask+0x86>
			{
				break;
 8004968:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004972:	e003      	b.n	800497c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	2b06      	cmp	r3, #6
 8004980:	d901      	bls.n	8004986 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004982:	2306      	movs	r3, #6
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	3304      	adds	r3, #4
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff f88d 	bl	8003abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	3318      	adds	r3, #24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f888 	bl	8003abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	f1c3 0207 	rsb	r2, r3, #7
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	334c      	adds	r3, #76	@ 0x4c
 80049d6:	224c      	movs	r2, #76	@ 0x4c
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fb4c 	bl	8006078 <memset>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a18 <prvInitialiseNewTask+0x134>)
 80049e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <prvInitialiseNewTask+0x138>)
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <prvInitialiseNewTask+0x13c>)
 80049f0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	69b8      	ldr	r0, [r7, #24]
 80049f8:	f000 fefa 	bl	80057f0 <pxPortInitialiseStack>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a0e:	bf00      	nop
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20001118 	.word	0x20001118
 8004a1c:	20001180 	.word	0x20001180
 8004a20:	200011e8 	.word	0x200011e8

08004a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a2c:	f001 f814 	bl	8005a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a30:	4b2a      	ldr	r3, [pc, #168]	@ (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a29      	ldr	r2, [pc, #164]	@ (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a3a:	4b29      	ldr	r3, [pc, #164]	@ (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a42:	4a27      	ldr	r2, [pc, #156]	@ (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a48:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d110      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a50:	f000 fbe4 	bl	800521c <prvInitialiseTaskLists>
 8004a54:	e00d      	b.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a56:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <prvAddNewTaskToReadyList+0xc0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d802      	bhi.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4a15      	ldr	r2, [pc, #84]	@ (8004af0 <prvAddNewTaskToReadyList+0xcc>)
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7ff f816 	bl	8003ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004aaa:	f001 f807 	bl	8005abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <prvAddNewTaskToReadyList+0xc0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	2000050c 	.word	0x2000050c
 8004ae0:	2000040c 	.word	0x2000040c
 8004ae4:	20000518 	.word	0x20000518
 8004ae8:	20000528 	.word	0x20000528
 8004aec:	20000514 	.word	0x20000514
 8004af0:	20000410 	.word	0x20000410
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b0a:	4b14      	ldr	r3, [pc, #80]	@ (8004b5c <vTaskDelay+0x64>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <vTaskDelay+0x32>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b2a:	f000 f885 	bl	8004c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b2e:	2100      	movs	r1, #0
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fdf7 	bl	8005724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b36:	f000 f88d 	bl	8004c54 <xTaskResumeAll>
 8004b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d107      	bne.n	8004b52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b42:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <vTaskDelay+0x68>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000534 	.word	0x20000534
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b72:	463a      	mov	r2, r7
 8004b74:	1d39      	adds	r1, r7, #4
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fb fcee 	bl	800055c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	9202      	str	r2, [sp, #8]
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	460a      	mov	r2, r1
 8004b92:	4921      	ldr	r1, [pc, #132]	@ (8004c18 <vTaskStartScheduler+0xb4>)
 8004b94:	4821      	ldr	r0, [pc, #132]	@ (8004c1c <vTaskStartScheduler+0xb8>)
 8004b96:	f7ff fdff 	bl	8004798 <xTaskCreateStatic>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4a20      	ldr	r2, [pc, #128]	@ (8004c20 <vTaskStartScheduler+0xbc>)
 8004b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <vTaskStartScheduler+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e001      	b.n	8004bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d11b      	bne.n	8004bf0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	613b      	str	r3, [r7, #16]
}
 8004bca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bcc:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <vTaskStartScheduler+0xc0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	334c      	adds	r3, #76	@ 0x4c
 8004bd2:	4a15      	ldr	r2, [pc, #84]	@ (8004c28 <vTaskStartScheduler+0xc4>)
 8004bd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <vTaskStartScheduler+0xc8>)
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bde:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <vTaskStartScheduler+0xcc>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <vTaskStartScheduler+0xd0>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bea:	f000 fe91 	bl	8005910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bee:	e00f      	b.n	8004c10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d10b      	bne.n	8004c10 <vTaskStartScheduler+0xac>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <vTaskStartScheduler+0xa8>
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	080062d8 	.word	0x080062d8
 8004c1c:	080051ed 	.word	0x080051ed
 8004c20:	20000530 	.word	0x20000530
 8004c24:	2000040c 	.word	0x2000040c
 8004c28:	20000010 	.word	0x20000010
 8004c2c:	2000052c 	.word	0x2000052c
 8004c30:	20000518 	.word	0x20000518
 8004c34:	20000510 	.word	0x20000510

08004c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <vTaskSuspendAll+0x18>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4a03      	ldr	r2, [pc, #12]	@ (8004c50 <vTaskSuspendAll+0x18>)
 8004c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20000534 	.word	0x20000534

08004c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c62:	4b42      	ldr	r3, [pc, #264]	@ (8004d6c <xTaskResumeAll+0x118>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	603b      	str	r3, [r7, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c82:	f000 fee9 	bl	8005a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c86:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <xTaskResumeAll+0x118>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4a37      	ldr	r2, [pc, #220]	@ (8004d6c <xTaskResumeAll+0x118>)
 8004c8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c90:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <xTaskResumeAll+0x118>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d161      	bne.n	8004d5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c98:	4b35      	ldr	r3, [pc, #212]	@ (8004d70 <xTaskResumeAll+0x11c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d05d      	beq.n	8004d5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ca0:	e02e      	b.n	8004d00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca2:	4b34      	ldr	r3, [pc, #208]	@ (8004d74 <xTaskResumeAll+0x120>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3318      	adds	r3, #24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ff6e 	bl	8003b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe ff69 	bl	8003b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d78 <xTaskResumeAll+0x124>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <xTaskResumeAll+0x124>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a27      	ldr	r2, [pc, #156]	@ (8004d7c <xTaskResumeAll+0x128>)
 8004cde:	441a      	add	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe fef5 	bl	8003ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <xTaskResumeAll+0x12c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cfa:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <xTaskResumeAll+0x130>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	4b1c      	ldr	r3, [pc, #112]	@ (8004d74 <xTaskResumeAll+0x120>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1cc      	bne.n	8004ca2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d0e:	f000 fb29 	bl	8005364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d12:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <xTaskResumeAll+0x134>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d010      	beq.n	8004d40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d1e:	f000 f837 	bl	8004d90 <xTaskIncrementTick>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d28:	4b16      	ldr	r3, [pc, #88]	@ (8004d84 <xTaskResumeAll+0x130>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f1      	bne.n	8004d1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d3a:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <xTaskResumeAll+0x134>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d40:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <xTaskResumeAll+0x130>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d8c <xTaskResumeAll+0x138>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d5c:	f000 feae 	bl	8005abc <vPortExitCritical>

	return xAlreadyYielded;
 8004d60:	68bb      	ldr	r3, [r7, #8]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000534 	.word	0x20000534
 8004d70:	2000050c 	.word	0x2000050c
 8004d74:	200004cc 	.word	0x200004cc
 8004d78:	20000514 	.word	0x20000514
 8004d7c:	20000410 	.word	0x20000410
 8004d80:	2000040c 	.word	0x2000040c
 8004d84:	20000520 	.word	0x20000520
 8004d88:	2000051c 	.word	0x2000051c
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed8 <xTaskIncrementTick+0x148>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 808f 	bne.w	8004ec2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004da4:	4b4d      	ldr	r3, [pc, #308]	@ (8004edc <xTaskIncrementTick+0x14c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dac:	4a4b      	ldr	r2, [pc, #300]	@ (8004edc <xTaskIncrementTick+0x14c>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d121      	bne.n	8004dfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004db8:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <xTaskIncrementTick+0x150>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <xTaskIncrementTick+0x4a>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <xTaskIncrementTick+0x46>
 8004dda:	4b41      	ldr	r3, [pc, #260]	@ (8004ee0 <xTaskIncrementTick+0x150>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	4b40      	ldr	r3, [pc, #256]	@ (8004ee4 <xTaskIncrementTick+0x154>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ee0 <xTaskIncrementTick+0x150>)
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ee4 <xTaskIncrementTick+0x154>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <xTaskIncrementTick+0x158>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee8 <xTaskIncrementTick+0x158>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	f000 fab4 	bl	8005364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <xTaskIncrementTick+0x15c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d348      	bcc.n	8004e98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e06:	4b36      	ldr	r3, [pc, #216]	@ (8004ee0 <xTaskIncrementTick+0x150>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e10:	4b36      	ldr	r3, [pc, #216]	@ (8004eec <xTaskIncrementTick+0x15c>)
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	601a      	str	r2, [r3, #0]
					break;
 8004e18:	e03e      	b.n	8004e98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ee0 <xTaskIncrementTick+0x150>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e32:	4a2e      	ldr	r2, [pc, #184]	@ (8004eec <xTaskIncrementTick+0x15c>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e38:	e02e      	b.n	8004e98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fea6 	bl	8003b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3318      	adds	r3, #24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fe9d 	bl	8003b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <xTaskIncrementTick+0x160>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <xTaskIncrementTick+0x160>)
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <xTaskIncrementTick+0x164>)
 8004e76:	441a      	add	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fe fe29 	bl	8003ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef8 <xTaskIncrementTick+0x168>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3b9      	bcc.n	8004e06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e96:	e7b6      	b.n	8004e06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e98:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <xTaskIncrementTick+0x168>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9e:	4915      	ldr	r1, [pc, #84]	@ (8004ef4 <xTaskIncrementTick+0x164>)
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d901      	bls.n	8004eb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004eb4:	4b11      	ldr	r3, [pc, #68]	@ (8004efc <xTaskIncrementTick+0x16c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e004      	b.n	8004ecc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f00 <xTaskIncrementTick+0x170>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f00 <xTaskIncrementTick+0x170>)
 8004eca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000534 	.word	0x20000534
 8004edc:	20000510 	.word	0x20000510
 8004ee0:	200004c4 	.word	0x200004c4
 8004ee4:	200004c8 	.word	0x200004c8
 8004ee8:	20000524 	.word	0x20000524
 8004eec:	2000052c 	.word	0x2000052c
 8004ef0:	20000514 	.word	0x20000514
 8004ef4:	20000410 	.word	0x20000410
 8004ef8:	2000040c 	.word	0x2000040c
 8004efc:	20000520 	.word	0x20000520
 8004f00:	2000051c 	.word	0x2000051c

08004f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb4 <vTaskSwitchContext+0xb0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f12:	4b29      	ldr	r3, [pc, #164]	@ (8004fb8 <vTaskSwitchContext+0xb4>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f18:	e045      	b.n	8004fa6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004f1a:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <vTaskSwitchContext+0xb4>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f20:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <vTaskSwitchContext+0xb8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f1c3 031f 	rsb	r3, r3, #31
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	4922      	ldr	r1, [pc, #136]	@ (8004fc0 <vTaskSwitchContext+0xbc>)
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <vTaskSwitchContext+0x5a>
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <vTaskSwitchContext+0xbc>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	3308      	adds	r3, #8
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d104      	bne.n	8004f92 <vTaskSwitchContext+0x8e>
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <vTaskSwitchContext+0xc0>)
 8004f9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f9c:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <vTaskSwitchContext+0xc0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	334c      	adds	r3, #76	@ 0x4c
 8004fa2:	4a09      	ldr	r2, [pc, #36]	@ (8004fc8 <vTaskSwitchContext+0xc4>)
 8004fa4:	6013      	str	r3, [r2, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000534 	.word	0x20000534
 8004fb8:	20000520 	.word	0x20000520
 8004fbc:	20000514 	.word	0x20000514
 8004fc0:	20000410 	.word	0x20000410
 8004fc4:	2000040c 	.word	0x2000040c
 8004fc8:	20000010 	.word	0x20000010

08004fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60fb      	str	r3, [r7, #12]
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ff4:	4b07      	ldr	r3, [pc, #28]	@ (8005014 <vTaskPlaceOnEventList+0x48>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3318      	adds	r3, #24
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fe fd8e 	bl	8003b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005002:	2101      	movs	r1, #1
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f000 fb8d 	bl	8005724 <prvAddCurrentTaskToDelayedList>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000040c 	.word	0x2000040c

08005018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	60fb      	str	r3, [r7, #12]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3318      	adds	r3, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fda0 	bl	8003b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <xTaskRemoveFromEventList+0xb0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11c      	bne.n	8005092 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3304      	adds	r3, #4
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fd97 	bl	8003b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	4b18      	ldr	r3, [pc, #96]	@ (80050cc <xTaskRemoveFromEventList+0xb4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <xTaskRemoveFromEventList+0xb4>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a13      	ldr	r2, [pc, #76]	@ (80050d0 <xTaskRemoveFromEventList+0xb8>)
 8005082:	441a      	add	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fe fd23 	bl	8003ad6 <vListInsertEnd>
 8005090:	e005      	b.n	800509e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3318      	adds	r3, #24
 8005096:	4619      	mov	r1, r3
 8005098:	480e      	ldr	r0, [pc, #56]	@ (80050d4 <xTaskRemoveFromEventList+0xbc>)
 800509a:	f7fe fd1c 	bl	8003ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a2:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <xTaskRemoveFromEventList+0xc0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d905      	bls.n	80050b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <xTaskRemoveFromEventList+0xc4>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e001      	b.n	80050bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000534 	.word	0x20000534
 80050cc:	20000514 	.word	0x20000514
 80050d0:	20000410 	.word	0x20000410
 80050d4:	200004cc 	.word	0x200004cc
 80050d8:	2000040c 	.word	0x2000040c
 80050dc:	20000520 	.word	0x20000520

080050e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <vTaskInternalSetTimeOutState+0x24>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <vTaskInternalSetTimeOutState+0x28>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	605a      	str	r2, [r3, #4]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000524 	.word	0x20000524
 8005108:	20000510 	.word	0x20000510

0800510c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60fb      	str	r3, [r7, #12]
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	e7fd      	b.n	800514e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005152:	f000 fc81 	bl	8005a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005156:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <xTaskCheckForTimeOut+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d102      	bne.n	8005176 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e023      	b.n	80051be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <xTaskCheckForTimeOut+0xc4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d007      	beq.n	8005192 <xTaskCheckForTimeOut+0x86>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e015      	b.n	80051be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	429a      	cmp	r2, r3
 800519a:	d20b      	bcs.n	80051b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff99 	bl	80050e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e004      	b.n	80051be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051be:	f000 fc7d 	bl	8005abc <vPortExitCritical>

	return xReturn;
 80051c2:	69fb      	ldr	r3, [r7, #28]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000510 	.word	0x20000510
 80051d0:	20000524 	.word	0x20000524

080051d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <vTaskMissedYield+0x14>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000520 	.word	0x20000520

080051ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051f4:	f000 f852 	bl	800529c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051f8:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <prvIdleTask+0x28>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d9f9      	bls.n	80051f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <prvIdleTask+0x2c>)
 8005202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005210:	e7f0      	b.n	80051f4 <prvIdleTask+0x8>
 8005212:	bf00      	nop
 8005214:	20000410 	.word	0x20000410
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	e00c      	b.n	8005242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4a12      	ldr	r2, [pc, #72]	@ (800527c <prvInitialiseTaskLists+0x60>)
 8005234:	4413      	add	r3, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fc20 	bl	8003a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3301      	adds	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b06      	cmp	r3, #6
 8005246:	d9ef      	bls.n	8005228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005248:	480d      	ldr	r0, [pc, #52]	@ (8005280 <prvInitialiseTaskLists+0x64>)
 800524a:	f7fe fc17 	bl	8003a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800524e:	480d      	ldr	r0, [pc, #52]	@ (8005284 <prvInitialiseTaskLists+0x68>)
 8005250:	f7fe fc14 	bl	8003a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005254:	480c      	ldr	r0, [pc, #48]	@ (8005288 <prvInitialiseTaskLists+0x6c>)
 8005256:	f7fe fc11 	bl	8003a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800525a:	480c      	ldr	r0, [pc, #48]	@ (800528c <prvInitialiseTaskLists+0x70>)
 800525c:	f7fe fc0e 	bl	8003a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005260:	480b      	ldr	r0, [pc, #44]	@ (8005290 <prvInitialiseTaskLists+0x74>)
 8005262:	f7fe fc0b 	bl	8003a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <prvInitialiseTaskLists+0x78>)
 8005268:	4a05      	ldr	r2, [pc, #20]	@ (8005280 <prvInitialiseTaskLists+0x64>)
 800526a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <prvInitialiseTaskLists+0x7c>)
 800526e:	4a05      	ldr	r2, [pc, #20]	@ (8005284 <prvInitialiseTaskLists+0x68>)
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000410 	.word	0x20000410
 8005280:	2000049c 	.word	0x2000049c
 8005284:	200004b0 	.word	0x200004b0
 8005288:	200004cc 	.word	0x200004cc
 800528c:	200004e0 	.word	0x200004e0
 8005290:	200004f8 	.word	0x200004f8
 8005294:	200004c4 	.word	0x200004c4
 8005298:	200004c8 	.word	0x200004c8

0800529c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a2:	e019      	b.n	80052d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052a4:	f000 fbd8 	bl	8005a58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a8:	4b10      	ldr	r3, [pc, #64]	@ (80052ec <prvCheckTasksWaitingTermination+0x50>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fc6b 	bl	8003b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <prvCheckTasksWaitingTermination+0x54>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	4a0b      	ldr	r2, [pc, #44]	@ (80052f0 <prvCheckTasksWaitingTermination+0x54>)
 80052c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	4a0a      	ldr	r2, [pc, #40]	@ (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052ce:	f000 fbf5 	bl	8005abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f810 	bl	80052f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e1      	bne.n	80052a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200004e0 	.word	0x200004e0
 80052f0:	2000050c 	.word	0x2000050c
 80052f4:	200004f4 	.word	0x200004f4

080052f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	334c      	adds	r3, #76	@ 0x4c
 8005304:	4618      	mov	r0, r3
 8005306:	f000 febf 	bl	8006088 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fd8d 	bl	8005e38 <vPortFree>
				vPortFree( pxTCB );
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fd8a 	bl	8005e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005324:	e019      	b.n	800535a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800532c:	2b01      	cmp	r3, #1
 800532e:	d103      	bne.n	8005338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fd81 	bl	8005e38 <vPortFree>
	}
 8005336:	e010      	b.n	800535a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800533e:	2b02      	cmp	r3, #2
 8005340:	d00b      	beq.n	800535a <prvDeleteTCB+0x62>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <prvDeleteTCB+0x5e>
	}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800536a:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <prvResetNextTaskUnblockTime+0x38>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005376:	f04f 32ff 	mov.w	r2, #4294967295
 800537a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800537c:	e008      	b.n	8005390 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <prvResetNextTaskUnblockTime+0x38>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a04      	ldr	r2, [pc, #16]	@ (80053a0 <prvResetNextTaskUnblockTime+0x3c>)
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	200004c4 	.word	0x200004c4
 80053a0:	2000052c 	.word	0x2000052c

080053a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053aa:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <xTaskGetSchedulerState+0x34>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053b2:	2301      	movs	r3, #1
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	e008      	b.n	80053ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b8:	4b08      	ldr	r3, [pc, #32]	@ (80053dc <xTaskGetSchedulerState+0x38>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053c0:	2302      	movs	r3, #2
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	e001      	b.n	80053ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ca:	687b      	ldr	r3, [r7, #4]
	}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000518 	.word	0x20000518
 80053dc:	20000534 	.word	0x20000534

080053e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d05e      	beq.n	80054b4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fa:	4b31      	ldr	r3, [pc, #196]	@ (80054c0 <xTaskPriorityInherit+0xe0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d24e      	bcs.n	80054a2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db06      	blt.n	800541a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540c:	4b2c      	ldr	r3, [pc, #176]	@ (80054c0 <xTaskPriorityInherit+0xe0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f1c3 0207 	rsb	r2, r3, #7
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6959      	ldr	r1, [r3, #20]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <xTaskPriorityInherit+0xe4>)
 800542c:	4413      	add	r3, r2
 800542e:	4299      	cmp	r1, r3
 8005430:	d12f      	bne.n	8005492 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3304      	adds	r3, #4
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fbaa 	bl	8003b90 <uxListRemove>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	2201      	movs	r2, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	43da      	mvns	r2, r3
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <xTaskPriorityInherit+0xe8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <xTaskPriorityInherit+0xe8>)
 8005456:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005458:	4b19      	ldr	r3, [pc, #100]	@ (80054c0 <xTaskPriorityInherit+0xe0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	2201      	movs	r2, #1
 8005468:	409a      	lsls	r2, r3
 800546a:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <xTaskPriorityInherit+0xe8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	4a15      	ldr	r2, [pc, #84]	@ (80054c8 <xTaskPriorityInherit+0xe8>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4a10      	ldr	r2, [pc, #64]	@ (80054c4 <xTaskPriorityInherit+0xe4>)
 8005482:	441a      	add	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fe fb23 	bl	8003ad6 <vListInsertEnd>
 8005490:	e004      	b.n	800549c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <xTaskPriorityInherit+0xe0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	e008      	b.n	80054b4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <xTaskPriorityInherit+0xe0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d201      	bcs.n	80054b4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054b4:	68fb      	ldr	r3, [r7, #12]
	}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2000040c 	.word	0x2000040c
 80054c4:	20000410 	.word	0x20000410
 80054c8:	20000514 	.word	0x20000514

080054cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d070      	beq.n	80055c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054e2:	4b3b      	ldr	r3, [pc, #236]	@ (80055d0 <xTaskPriorityDisinherit+0x104>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d00b      	beq.n	8005504 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60bb      	str	r3, [r7, #8]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	429a      	cmp	r2, r3
 8005538:	d044      	beq.n	80055c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553e:	2b00      	cmp	r3, #0
 8005540:	d140      	bne.n	80055c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3304      	adds	r3, #4
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe fb22 	bl	8003b90 <uxListRemove>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d115      	bne.n	800557e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	491f      	ldr	r1, [pc, #124]	@ (80055d4 <xTaskPriorityDisinherit+0x108>)
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xTaskPriorityDisinherit+0xb2>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	2201      	movs	r2, #1
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43da      	mvns	r2, r3
 8005574:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <xTaskPriorityDisinherit+0x10c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4013      	ands	r3, r2
 800557a:	4a17      	ldr	r2, [pc, #92]	@ (80055d8 <xTaskPriorityDisinherit+0x10c>)
 800557c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f1c3 0207 	rsb	r2, r3, #7
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	2201      	movs	r2, #1
 8005598:	409a      	lsls	r2, r3
 800559a:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <xTaskPriorityDisinherit+0x10c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4313      	orrs	r3, r2
 80055a0:	4a0d      	ldr	r2, [pc, #52]	@ (80055d8 <xTaskPriorityDisinherit+0x10c>)
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4a08      	ldr	r2, [pc, #32]	@ (80055d4 <xTaskPriorityDisinherit+0x108>)
 80055b2:	441a      	add	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fe fa8b 	bl	8003ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055c4:	697b      	ldr	r3, [r7, #20]
	}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	2000040c 	.word	0x2000040c
 80055d4:	20000410 	.word	0x20000410
 80055d8:	20000514 	.word	0x20000514

080055dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d079      	beq.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	60fb      	str	r3, [r7, #12]
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d902      	bls.n	8005624 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e002      	b.n	800562a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	d059      	beq.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	429a      	cmp	r2, r3
 800563c:	d154      	bne.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800563e:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d10b      	bne.n	8005660 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60bb      	str	r3, [r7, #8]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	db04      	blt.n	800567e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f1c3 0207 	rsb	r2, r3, #7
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	6959      	ldr	r1, [r3, #20]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a19      	ldr	r2, [pc, #100]	@ (80056f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800568e:	4413      	add	r3, r2
 8005690:	4299      	cmp	r1, r3
 8005692:	d129      	bne.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3304      	adds	r3, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fa79 	bl	8003b90 <uxListRemove>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	2201      	movs	r2, #1
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4013      	ands	r3, r2
 80056b6:	4a10      	ldr	r2, [pc, #64]	@ (80056f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	2201      	movs	r2, #1
 80056c0:	409a      	lsls	r2, r3
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	4a0b      	ldr	r2, [pc, #44]	@ (80056f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4a06      	ldr	r2, [pc, #24]	@ (80056f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056da:	441a      	add	r2, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe f9f7 	bl	8003ad6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056e8:	bf00      	nop
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	2000040c 	.word	0x2000040c
 80056f4:	20000410 	.word	0x20000410
 80056f8:	20000514 	.word	0x20000514

080056fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005700:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <pvTaskIncrementMutexHeldCount+0x24>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005708:	4b05      	ldr	r3, [pc, #20]	@ (8005720 <pvTaskIncrementMutexHeldCount+0x24>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800570e:	3201      	adds	r2, #1
 8005710:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005712:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <pvTaskIncrementMutexHeldCount+0x24>)
 8005714:	681b      	ldr	r3, [r3, #0]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	2000040c 	.word	0x2000040c

08005724 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800572e:	4b29      	ldr	r3, [pc, #164]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005734:	4b28      	ldr	r3, [pc, #160]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3304      	adds	r3, #4
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fa28 	bl	8003b90 <uxListRemove>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	2201      	movs	r2, #1
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	4b21      	ldr	r3, [pc, #132]	@ (80057dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	4a20      	ldr	r2, [pc, #128]	@ (80057dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800575c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d10a      	bne.n	800577c <prvAddCurrentTaskToDelayedList+0x58>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3304      	adds	r3, #4
 8005772:	4619      	mov	r1, r3
 8005774:	481a      	ldr	r0, [pc, #104]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005776:	f7fe f9ae 	bl	8003ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800577a:	e026      	b.n	80057ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005784:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	429a      	cmp	r2, r3
 8005792:	d209      	bcs.n	80057a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005794:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7fe f9bc 	bl	8003b1e <vListInsert>
}
 80057a6:	e010      	b.n	80057ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f7fe f9b2 	bl	8003b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057ba:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d202      	bcs.n	80057ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057c4:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6013      	str	r3, [r2, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000510 	.word	0x20000510
 80057d8:	2000040c 	.word	0x2000040c
 80057dc:	20000514 	.word	0x20000514
 80057e0:	200004f8 	.word	0x200004f8
 80057e4:	200004c8 	.word	0x200004c8
 80057e8:	200004c4 	.word	0x200004c4
 80057ec:	2000052c 	.word	0x2000052c

080057f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b04      	subs	r3, #4
 8005800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b04      	subs	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b04      	subs	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005820:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <pxPortInitialiseStack+0x64>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3b14      	subs	r3, #20
 800582a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b04      	subs	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f06f 0202 	mvn.w	r2, #2
 800583e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3b20      	subs	r3, #32
 8005844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	08005859 	.word	0x08005859

08005858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005862:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <prvTaskExitError+0x58>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d00b      	beq.n	8005884 <prvTaskExitError+0x2c>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <prvTaskExitError+0x28>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60bb      	str	r3, [r7, #8]
}
 8005896:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005898:	bf00      	nop
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0fc      	beq.n	800589a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	2000000c 	.word	0x2000000c
	...

080058c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058c0:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <pxCurrentTCBConst2>)
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	6808      	ldr	r0, [r1, #0]
 80058c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	f380 8809 	msr	PSP, r0
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8811 	msr	BASEPRI, r0
 80058da:	4770      	bx	lr
 80058dc:	f3af 8000 	nop.w

080058e0 <pxCurrentTCBConst2>:
 80058e0:	2000040c 	.word	0x2000040c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop

080058e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058e8:	4808      	ldr	r0, [pc, #32]	@ (800590c <prvPortStartFirstTask+0x24>)
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	6800      	ldr	r0, [r0, #0]
 80058ee:	f380 8808 	msr	MSP, r0
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8814 	msr	CONTROL, r0
 80058fa:	b662      	cpsie	i
 80058fc:	b661      	cpsie	f
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	df00      	svc	0
 8005908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800590a:	bf00      	nop
 800590c:	e000ed08 	.word	0xe000ed08

08005910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005916:	4b47      	ldr	r3, [pc, #284]	@ (8005a34 <xPortStartScheduler+0x124>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a47      	ldr	r2, [pc, #284]	@ (8005a38 <xPortStartScheduler+0x128>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10b      	bne.n	8005938 <xPortStartScheduler+0x28>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <xPortStartScheduler+0x124>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a3c <xPortStartScheduler+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10b      	bne.n	800595a <xPortStartScheduler+0x4a>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800595a:	4b39      	ldr	r3, [pc, #228]	@ (8005a40 <xPortStartScheduler+0x130>)
 800595c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	22ff      	movs	r2, #255	@ 0xff
 800596a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4b31      	ldr	r3, [pc, #196]	@ (8005a44 <xPortStartScheduler+0x134>)
 8005980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005982:	4b31      	ldr	r3, [pc, #196]	@ (8005a48 <xPortStartScheduler+0x138>)
 8005984:	2207      	movs	r2, #7
 8005986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005988:	e009      	b.n	800599e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800598a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a48 <xPortStartScheduler+0x138>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	4a2d      	ldr	r2, [pc, #180]	@ (8005a48 <xPortStartScheduler+0x138>)
 8005992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b80      	cmp	r3, #128	@ 0x80
 80059a8:	d0ef      	beq.n	800598a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059aa:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1c3 0307 	rsb	r3, r3, #7
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d00b      	beq.n	80059ce <xPortStartScheduler+0xbe>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059e0:	4a19      	ldr	r2, [pc, #100]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ec:	4b17      	ldr	r3, [pc, #92]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a16      	ldr	r2, [pc, #88]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059f8:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a04:	f000 f8da 	bl	8005bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a08:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <xPortStartScheduler+0x140>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a0e:	f000 f8f9 	bl	8005c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a12:	4b10      	ldr	r3, [pc, #64]	@ (8005a54 <xPortStartScheduler+0x144>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <xPortStartScheduler+0x144>)
 8005a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a1e:	f7ff ff63 	bl	80058e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a22:	f7ff fa6f 	bl	8004f04 <vTaskSwitchContext>
	prvTaskExitError();
 8005a26:	f7ff ff17 	bl	8005858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed00 	.word	0xe000ed00
 8005a38:	410fc271 	.word	0x410fc271
 8005a3c:	410fc270 	.word	0x410fc270
 8005a40:	e000e400 	.word	0xe000e400
 8005a44:	20000538 	.word	0x20000538
 8005a48:	2000053c 	.word	0x2000053c
 8005a4c:	e000ed20 	.word	0xe000ed20
 8005a50:	2000000c 	.word	0x2000000c
 8005a54:	e000ef34 	.word	0xe000ef34

08005a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d110      	bne.n	8005aa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a84:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <vPortEnterCritical+0x60>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	603b      	str	r3, [r7, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vPortEnterCritical+0x4a>
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ac2:	4b12      	ldr	r3, [pc, #72]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <vPortExitCritical+0x26>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4a08      	ldr	r2, [pc, #32]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <vPortExitCritical+0x44>
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b10:	f3ef 8009 	mrs	r0, PSP
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <pxCurrentTCBConst>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	f01e 0f10 	tst.w	lr, #16
 8005b20:	bf08      	it	eq
 8005b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2a:	6010      	str	r0, [r2, #0]
 8005b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b34:	f380 8811 	msr	BASEPRI, r0
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f7ff f9e0 	bl	8004f04 <vTaskSwitchContext>
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f380 8811 	msr	BASEPRI, r0
 8005b4c:	bc09      	pop	{r0, r3}
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	6808      	ldr	r0, [r1, #0]
 8005b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b56:	f01e 0f10 	tst.w	lr, #16
 8005b5a:	bf08      	it	eq
 8005b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b60:	f380 8809 	msr	PSP, r0
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst>:
 8005b70:	2000040c 	.word	0x2000040c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f7ff f8fd 	bl	8004d90 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <SysTick_Handler+0x40>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f383 8811 	msr	BASEPRI, r3
}
 8005bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <vPortSetupTimerInterrupt+0x34>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <vPortSetupTimerInterrupt+0x38>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <vPortSetupTimerInterrupt+0x3c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bfc <vPortSetupTimerInterrupt+0x40>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <vPortSetupTimerInterrupt+0x44>)
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <vPortSetupTimerInterrupt+0x34>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e010 	.word	0xe000e010
 8005bf4:	e000e018 	.word	0xe000e018
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	10624dd3 	.word	0x10624dd3
 8005c00:	e000e014 	.word	0xe000e014

08005c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c14 <vPortEnableVFP+0x10>
 8005c08:	6801      	ldr	r1, [r0, #0]
 8005c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c0e:	6001      	str	r1, [r0, #0]
 8005c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c12:	bf00      	nop
 8005c14:	e000ed88 	.word	0xe000ed88

08005c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c1e:	f3ef 8305 	mrs	r3, IPSR
 8005c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	d915      	bls.n	8005c56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <vPortValidateInterruptPriority+0x74>)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c34:	4b16      	ldr	r3, [pc, #88]	@ (8005c90 <vPortValidateInterruptPriority+0x78>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	7afa      	ldrb	r2, [r7, #11]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20b      	bcs.n	8005c56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c56:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <vPortValidateInterruptPriority+0x7c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <vPortValidateInterruptPriority+0x80>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d90b      	bls.n	8005c7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	603b      	str	r3, [r7, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <vPortValidateInterruptPriority+0x62>
	}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	e000e3f0 	.word	0xe000e3f0
 8005c90:	20000538 	.word	0x20000538
 8005c94:	e000ed0c 	.word	0xe000ed0c
 8005c98:	2000053c 	.word	0x2000053c

08005c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	@ 0x28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ca8:	f7fe ffc6 	bl	8004c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cac:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <pvPortMalloc+0x184>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cb4:	f000 f924 	bl	8005f00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e24 <pvPortMalloc+0x188>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 8095 	bne.w	8005df0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ccc:	2208      	movs	r2, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d015      	beq.n	8005d0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <pvPortMalloc+0x6e>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	617b      	str	r3, [r7, #20]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d06f      	beq.n	8005df0 <pvPortMalloc+0x154>
 8005d10:	4b45      	ldr	r3, [pc, #276]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d86a      	bhi.n	8005df0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d1a:	4b44      	ldr	r3, [pc, #272]	@ (8005e2c <pvPortMalloc+0x190>)
 8005d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d1e:	4b43      	ldr	r3, [pc, #268]	@ (8005e2c <pvPortMalloc+0x190>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d24:	e004      	b.n	8005d30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d903      	bls.n	8005d42 <pvPortMalloc+0xa6>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f1      	bne.n	8005d26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d42:	4b37      	ldr	r3, [pc, #220]	@ (8005e20 <pvPortMalloc+0x184>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d051      	beq.n	8005df0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2208      	movs	r2, #8
 8005d52:	4413      	add	r3, r2
 8005d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	1ad2      	subs	r2, r2, r3
 8005d66:	2308      	movs	r3, #8
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d920      	bls.n	8005db0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <pvPortMalloc+0xfc>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005daa:	69b8      	ldr	r0, [r7, #24]
 8005dac:	f000 f90a 	bl	8005fc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <pvPortMalloc+0x194>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d203      	bcs.n	8005dd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dca:	4b17      	ldr	r3, [pc, #92]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <pvPortMalloc+0x194>)
 8005dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <pvPortMalloc+0x188>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005de6:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <pvPortMalloc+0x198>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a11      	ldr	r2, [pc, #68]	@ (8005e34 <pvPortMalloc+0x198>)
 8005dee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005df0:	f7fe ff30 	bl	8004c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <pvPortMalloc+0x17a>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	e7fd      	b.n	8005e12 <pvPortMalloc+0x176>
	return pvReturn;
 8005e16:	69fb      	ldr	r3, [r7, #28]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	@ 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20001100 	.word	0x20001100
 8005e24:	20001114 	.word	0x20001114
 8005e28:	20001104 	.word	0x20001104
 8005e2c:	200010f8 	.word	0x200010f8
 8005e30:	20001108 	.word	0x20001108
 8005e34:	2000110c 	.word	0x2000110c

08005e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04f      	beq.n	8005eea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	425b      	negs	r3, r3
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ef4 <vPortFree+0xbc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <vPortFree+0x46>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60fb      	str	r3, [r7, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <vPortFree+0x66>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	4b14      	ldr	r3, [pc, #80]	@ (8005ef4 <vPortFree+0xbc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01e      	beq.n	8005eea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11a      	bne.n	8005eea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <vPortFree+0xbc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ec4:	f7fe feb8 	bl	8004c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <vPortFree+0xc0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4a09      	ldr	r2, [pc, #36]	@ (8005ef8 <vPortFree+0xc0>)
 8005ed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ed6:	6938      	ldr	r0, [r7, #16]
 8005ed8:	f000 f874 	bl	8005fc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <vPortFree+0xc4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a06      	ldr	r2, [pc, #24]	@ (8005efc <vPortFree+0xc4>)
 8005ee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ee6:	f7fe feb5 	bl	8004c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20001114 	.word	0x20001114
 8005ef8:	20001104 	.word	0x20001104
 8005efc:	20001110 	.word	0x20001110

08005f00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005f0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f0c:	4b27      	ldr	r3, [pc, #156]	@ (8005fac <prvHeapInit+0xac>)
 8005f0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3307      	adds	r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <prvHeapInit+0xac>)
 8005f30:	4413      	add	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f38:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <prvHeapInit+0xb0>)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <prvHeapInit+0xb0>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2200      	movs	r2, #0
 8005f68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f6a:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f80:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb8 <prvHeapInit+0xb8>)
 8005f8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <prvHeapInit+0xbc>)
 8005f96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <prvHeapInit+0xc0>)
 8005f9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f9e:	601a      	str	r2, [r3, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000540 	.word	0x20000540
 8005fb0:	200010f8 	.word	0x200010f8
 8005fb4:	20001100 	.word	0x20001100
 8005fb8:	20001108 	.word	0x20001108
 8005fbc:	20001104 	.word	0x20001104
 8005fc0:	20001114 	.word	0x20001114

08005fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fcc:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <prvInsertBlockIntoFreeList+0xac>)
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x14>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d8f7      	bhi.n	8005fd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d108      	bne.n	8006006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d118      	bne.n	800604c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <prvInsertBlockIntoFreeList+0xb0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d00d      	beq.n	8006042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e008      	b.n	8006054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006042:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvInsertBlockIntoFreeList+0xb0>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e003      	b.n	8006054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d002      	beq.n	8006062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	200010f8 	.word	0x200010f8
 8006074:	20001100 	.word	0x20001100

08006078 <memset>:
 8006078:	4402      	add	r2, r0
 800607a:	4603      	mov	r3, r0
 800607c:	4293      	cmp	r3, r2
 800607e:	d100      	bne.n	8006082 <memset+0xa>
 8006080:	4770      	bx	lr
 8006082:	f803 1b01 	strb.w	r1, [r3], #1
 8006086:	e7f9      	b.n	800607c <memset+0x4>

08006088 <_reclaim_reent>:
 8006088:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <_reclaim_reent+0xa8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4283      	cmp	r3, r0
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	4604      	mov	r4, r0
 8006092:	d04b      	beq.n	800612c <_reclaim_reent+0xa4>
 8006094:	69c3      	ldr	r3, [r0, #28]
 8006096:	b1ab      	cbz	r3, 80060c4 <_reclaim_reent+0x3c>
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	b16b      	cbz	r3, 80060b8 <_reclaim_reent+0x30>
 800609c:	2500      	movs	r5, #0
 800609e:	69e3      	ldr	r3, [r4, #28]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	5959      	ldr	r1, [r3, r5]
 80060a4:	2900      	cmp	r1, #0
 80060a6:	d13b      	bne.n	8006120 <_reclaim_reent+0x98>
 80060a8:	3504      	adds	r5, #4
 80060aa:	2d80      	cmp	r5, #128	@ 0x80
 80060ac:	d1f7      	bne.n	800609e <_reclaim_reent+0x16>
 80060ae:	69e3      	ldr	r3, [r4, #28]
 80060b0:	4620      	mov	r0, r4
 80060b2:	68d9      	ldr	r1, [r3, #12]
 80060b4:	f000 f872 	bl	800619c <_free_r>
 80060b8:	69e3      	ldr	r3, [r4, #28]
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	b111      	cbz	r1, 80060c4 <_reclaim_reent+0x3c>
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 f86c 	bl	800619c <_free_r>
 80060c4:	6961      	ldr	r1, [r4, #20]
 80060c6:	b111      	cbz	r1, 80060ce <_reclaim_reent+0x46>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f867 	bl	800619c <_free_r>
 80060ce:	69e1      	ldr	r1, [r4, #28]
 80060d0:	b111      	cbz	r1, 80060d8 <_reclaim_reent+0x50>
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f862 	bl	800619c <_free_r>
 80060d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060da:	b111      	cbz	r1, 80060e2 <_reclaim_reent+0x5a>
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 f85d 	bl	800619c <_free_r>
 80060e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060e4:	b111      	cbz	r1, 80060ec <_reclaim_reent+0x64>
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f858 	bl	800619c <_free_r>
 80060ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060ee:	b111      	cbz	r1, 80060f6 <_reclaim_reent+0x6e>
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 f853 	bl	800619c <_free_r>
 80060f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060f8:	b111      	cbz	r1, 8006100 <_reclaim_reent+0x78>
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f84e 	bl	800619c <_free_r>
 8006100:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006102:	b111      	cbz	r1, 800610a <_reclaim_reent+0x82>
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f849 	bl	800619c <_free_r>
 800610a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800610c:	b111      	cbz	r1, 8006114 <_reclaim_reent+0x8c>
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f844 	bl	800619c <_free_r>
 8006114:	6a23      	ldr	r3, [r4, #32]
 8006116:	b14b      	cbz	r3, 800612c <_reclaim_reent+0xa4>
 8006118:	4620      	mov	r0, r4
 800611a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800611e:	4718      	bx	r3
 8006120:	680e      	ldr	r6, [r1, #0]
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f83a 	bl	800619c <_free_r>
 8006128:	4631      	mov	r1, r6
 800612a:	e7bb      	b.n	80060a4 <_reclaim_reent+0x1c>
 800612c:	bd70      	pop	{r4, r5, r6, pc}
 800612e:	bf00      	nop
 8006130:	20000010 	.word	0x20000010

08006134 <__libc_init_array>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	4d0d      	ldr	r5, [pc, #52]	@ (800616c <__libc_init_array+0x38>)
 8006138:	4c0d      	ldr	r4, [pc, #52]	@ (8006170 <__libc_init_array+0x3c>)
 800613a:	1b64      	subs	r4, r4, r5
 800613c:	10a4      	asrs	r4, r4, #2
 800613e:	2600      	movs	r6, #0
 8006140:	42a6      	cmp	r6, r4
 8006142:	d109      	bne.n	8006158 <__libc_init_array+0x24>
 8006144:	4d0b      	ldr	r5, [pc, #44]	@ (8006174 <__libc_init_array+0x40>)
 8006146:	4c0c      	ldr	r4, [pc, #48]	@ (8006178 <__libc_init_array+0x44>)
 8006148:	f000 f87e 	bl	8006248 <_init>
 800614c:	1b64      	subs	r4, r4, r5
 800614e:	10a4      	asrs	r4, r4, #2
 8006150:	2600      	movs	r6, #0
 8006152:	42a6      	cmp	r6, r4
 8006154:	d105      	bne.n	8006162 <__libc_init_array+0x2e>
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	f855 3b04 	ldr.w	r3, [r5], #4
 800615c:	4798      	blx	r3
 800615e:	3601      	adds	r6, #1
 8006160:	e7ee      	b.n	8006140 <__libc_init_array+0xc>
 8006162:	f855 3b04 	ldr.w	r3, [r5], #4
 8006166:	4798      	blx	r3
 8006168:	3601      	adds	r6, #1
 800616a:	e7f2      	b.n	8006152 <__libc_init_array+0x1e>
 800616c:	08006330 	.word	0x08006330
 8006170:	08006330 	.word	0x08006330
 8006174:	08006330 	.word	0x08006330
 8006178:	08006334 	.word	0x08006334

0800617c <__retarget_lock_acquire_recursive>:
 800617c:	4770      	bx	lr

0800617e <__retarget_lock_release_recursive>:
 800617e:	4770      	bx	lr

08006180 <memcpy>:
 8006180:	440a      	add	r2, r1
 8006182:	4291      	cmp	r1, r2
 8006184:	f100 33ff 	add.w	r3, r0, #4294967295
 8006188:	d100      	bne.n	800618c <memcpy+0xc>
 800618a:	4770      	bx	lr
 800618c:	b510      	push	{r4, lr}
 800618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006196:	4291      	cmp	r1, r2
 8006198:	d1f9      	bne.n	800618e <memcpy+0xe>
 800619a:	bd10      	pop	{r4, pc}

0800619c <_free_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4605      	mov	r5, r0
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d041      	beq.n	8006228 <_free_r+0x8c>
 80061a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a8:	1f0c      	subs	r4, r1, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfb8      	it	lt
 80061ae:	18e4      	addlt	r4, r4, r3
 80061b0:	f000 f83e 	bl	8006230 <__malloc_lock>
 80061b4:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <_free_r+0x90>)
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	b933      	cbnz	r3, 80061c8 <_free_r+0x2c>
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	6014      	str	r4, [r2, #0]
 80061be:	4628      	mov	r0, r5
 80061c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c4:	f000 b83a 	b.w	800623c <__malloc_unlock>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d908      	bls.n	80061de <_free_r+0x42>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	1821      	adds	r1, r4, r0
 80061d0:	428b      	cmp	r3, r1
 80061d2:	bf01      	itttt	eq
 80061d4:	6819      	ldreq	r1, [r3, #0]
 80061d6:	685b      	ldreq	r3, [r3, #4]
 80061d8:	1809      	addeq	r1, r1, r0
 80061da:	6021      	streq	r1, [r4, #0]
 80061dc:	e7ed      	b.n	80061ba <_free_r+0x1e>
 80061de:	461a      	mov	r2, r3
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b10b      	cbz	r3, 80061e8 <_free_r+0x4c>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d9fa      	bls.n	80061de <_free_r+0x42>
 80061e8:	6811      	ldr	r1, [r2, #0]
 80061ea:	1850      	adds	r0, r2, r1
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d10b      	bne.n	8006208 <_free_r+0x6c>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	4401      	add	r1, r0
 80061f4:	1850      	adds	r0, r2, r1
 80061f6:	4283      	cmp	r3, r0
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	d1e0      	bne.n	80061be <_free_r+0x22>
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	4408      	add	r0, r1
 8006204:	6010      	str	r0, [r2, #0]
 8006206:	e7da      	b.n	80061be <_free_r+0x22>
 8006208:	d902      	bls.n	8006210 <_free_r+0x74>
 800620a:	230c      	movs	r3, #12
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	e7d6      	b.n	80061be <_free_r+0x22>
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	1821      	adds	r1, r4, r0
 8006214:	428b      	cmp	r3, r1
 8006216:	bf04      	itt	eq
 8006218:	6819      	ldreq	r1, [r3, #0]
 800621a:	685b      	ldreq	r3, [r3, #4]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	bf04      	itt	eq
 8006220:	1809      	addeq	r1, r1, r0
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	6054      	str	r4, [r2, #4]
 8006226:	e7ca      	b.n	80061be <_free_r+0x22>
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	bf00      	nop
 800622c:	20001254 	.word	0x20001254

08006230 <__malloc_lock>:
 8006230:	4801      	ldr	r0, [pc, #4]	@ (8006238 <__malloc_lock+0x8>)
 8006232:	f7ff bfa3 	b.w	800617c <__retarget_lock_acquire_recursive>
 8006236:	bf00      	nop
 8006238:	20001250 	.word	0x20001250

0800623c <__malloc_unlock>:
 800623c:	4801      	ldr	r0, [pc, #4]	@ (8006244 <__malloc_unlock+0x8>)
 800623e:	f7ff bf9e 	b.w	800617e <__retarget_lock_release_recursive>
 8006242:	bf00      	nop
 8006244:	20001250 	.word	0x20001250

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
