
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e98  08004e98  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004ea0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  20000060  08004f00  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001248  08004f00  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001607e  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eaa  00000000  00000000  0001c10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0001efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ece  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028041  00000000  00000000  0002118e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f0d  00000000  00000000  000491cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa891  00000000  00000000  0005f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015996d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  001599b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0015ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dd8 	.word	0x08004dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004dd8 	.word	0x08004dd8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fac3 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f835 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8b5 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f883 	bl	8000610 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LEDTask1 */
  osThreadDef(LEDTask1, StartLEDTask1, osPriorityNormal, 0, 128);
 800050a:	4b14      	ldr	r3, [pc, #80]	@ (800055c <main+0x68>)
 800050c:	f107 041c 	add.w	r4, r7, #28
 8000510:	461d      	mov	r5, r3
 8000512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800051a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTask1Handle = osThreadCreate(osThread(LEDTask1), NULL);
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f003 f90d 	bl	8003744 <osThreadCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0c      	ldr	r2, [pc, #48]	@ (8000560 <main+0x6c>)
 800052e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTask2 */
  osThreadDef(LEDTask2, StartLEDTask2, osPriorityAboveNormal, 0, 128);
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <main+0x70>)
 8000532:	463c      	mov	r4, r7
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTask2Handle = osThreadCreate(osThread(LEDTask2), NULL);
 8000542:	463b      	mov	r3, r7
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f8fc 	bl	8003744 <osThreadCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <main+0x74>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f003 f8f0 	bl	8003736 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x62>
 800055a:	bf00      	nop
 800055c:	08004dfc 	.word	0x08004dfc
 8000560:	200003a4 	.word	0x200003a4
 8000564:	08004e24 	.word	0x08004e24
 8000568:	200003a8 	.word	0x200003a8

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fb52 	bl	8004c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f000 fd8d 	bl	80010b0 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f918 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fdc4 	bl	800115c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 f8f9 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f98c 	bl	8001914 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f8e5 	bl	80007d0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	@ 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	@ (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f002 fb36 	bl	8002cc4 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f8b7 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000031c 	.word	0x2000031c
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <MX_GPIO_Init+0xc8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a2b      	ldr	r2, [pc, #172]	@ (8000738 <MX_GPIO_Init+0xc8>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <MX_GPIO_Init+0xc8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a25      	ldr	r2, [pc, #148]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a19      	ldr	r2, [pc, #100]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_GPIO_Init+0xc8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|led2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f000 fcb8 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_GPIO_Init+0xcc>)
 800070c:	f000 fb00 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin led2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|led2_Pin;
 8000710:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f000 faf0 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	@ 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800

08000740 <StartLEDTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLEDTask1 */
void StartLEDTask1(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000750:	f000 fc88 	bl	8001064 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000754:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000758:	f003 f840 	bl	80037dc <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2120      	movs	r1, #32
 8000760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000764:	f000 fc7e 	bl	8001064 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000768:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800076c:	f003 f836 	bl	80037dc <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000770:	bf00      	nop
 8000772:	e7e9      	b.n	8000748 <StartLEDTask1+0x8>

08000774 <StartLEDTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask2 */
void StartLEDTask2(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000786:	f000 fc6d 	bl	8001064 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f000 f9b9 	bl	8000b04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f000 fc62 	bl	8001064 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a4:	f000 f9ae 	bl	8000b04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80007a8:	bf00      	nop
 80007aa:	e7e7      	b.n	800077c <StartLEDTask2+0x8>

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 f981 	bl	8000ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012c00 	.word	0x40012c00

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_MspInit+0x4c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <HAL_MspInit+0x4c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <HAL_MspInit+0x4c>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_MspInit+0x4c>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	@ 0x58
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_MspInit+0x4c>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fa4f 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0ac      	sub	sp, #176	@ 0xb0
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2288      	movs	r2, #136	@ 0x88
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f004 f9e9 	bl	8004c24 <memset>
  if(huart->Instance==USART2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <HAL_UART_MspInit+0xb0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d13b      	bne.n	80008d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000860:	2300      	movs	r3, #0
 8000862:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4618      	mov	r0, r3
 800086a:	f001 faa9 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000874:	f7ff ffac 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087c:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000882:	6593      	str	r3, [r2, #88]	@ 0x58
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_UART_MspInit+0xb4>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a8:	230c      	movs	r3, #12
 80008aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c0:	2307      	movs	r3, #7
 80008c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f000 fa1e 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	37b0      	adds	r7, #176	@ 0xb0
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <HAL_InitTick+0xc8>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <HAL_InitTick+0xc8>)
 80008f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <HAL_InitTick+0xc8>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090a:	f107 020c 	add.w	r2, r7, #12
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f9c1 	bl	8001c9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800091a:	f001 f9a9 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 800091e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000922:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_InitTick+0xcc>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9b      	lsrs	r3, r3, #18
 800092a:	3b01      	subs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_InitTick+0xd0>)
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <HAL_InitTick+0xd4>)
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <HAL_InitTick+0xd0>)
 8000936:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093c:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <HAL_InitTick+0xd0>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_InitTick+0xd0>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_InitTick+0xd0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_InitTick+0xd0>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <HAL_InitTick+0xd0>)
 8000956:	f001 feef 	bl	8002738 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <HAL_InitTick+0xd0>)
 800096a:	f001 ff47 	bl	80027fc <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000978:	2b00      	cmp	r3, #0
 800097a:	d111      	bne.n	80009a0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800097c:	2019      	movs	r0, #25
 800097e:	f000 f9b9 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d808      	bhi.n	800099a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f995 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0xd8>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e002      	b.n	80009a0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3730      	adds	r7, #48	@ 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	200003ac 	.word	0x200003ac
 80009b8:	40012c00 	.word	0x40012c00
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009fe:	f001 ff6d 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200003ac 	.word	0x200003ac

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a34:	f7ff ffea 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f004 f93f 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fd47 	bl	80004f4 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a74:	08004ea0 	.word	0x08004ea0
  ldr r2, =_sbss
 8000a78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a7c:	20001248 	.word	0x20001248

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f903 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f7ff ff1f 	bl	80008e4 <HAL_InitTick>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	e001      	b.n	8000ab6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab2:	f7ff fe93 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200003f8 	.word	0x200003f8

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200003f8 	.word	0x200003f8

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	@ (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e17f      	b.n	8001020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8171 	beq.w	800101a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d118      	bne.n	8000df0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ac 	beq.w	800101a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b5c      	ldr	r3, [pc, #368]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eda:	4a5a      	ldr	r2, [pc, #360]	@ (8001044 <HAL_GPIO_Init+0x334>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x242>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x338>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x33c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x23a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x340>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x236>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x344>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x232>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_GPIO_Init+0x348>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x22e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	@ (800105c <HAL_GPIO_Init+0x34c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x22a>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f52:	2300      	movs	r3, #0
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f64:	4937      	ldr	r1, [pc, #220]	@ (8001044 <HAL_GPIO_Init+0x334>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f96:	4a32      	ldr	r2, [pc, #200]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fea:	4a1d      	ldr	r2, [pc, #116]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae78 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48001000 	.word	0x48001000
 8001058:	48001400 	.word	0x48001400
 800105c:	48001800 	.word	0x48001800
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001080:	e002      	b.n	8001088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <HAL_PWREx_GetVoltageRange+0x18>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40007000 	.word	0x40007000

080010b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010be:	d130      	bne.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010cc:	d038      	beq.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2232      	movs	r2, #50	@ 0x32
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	3301      	adds	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f4:	e002      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001108:	d102      	bne.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x60>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f2      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111c:	d110      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e00f      	b.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800112e:	d007      	beq.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000
 8001154:	20000000 	.word	0x20000000
 8001158:	431bde83 	.word	0x431bde83

0800115c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e3ca      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116e:	4b97      	ldr	r3, [pc, #604]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001178:	4b94      	ldr	r3, [pc, #592]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80e4 	beq.w	8001358 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_RCC_OscConfig+0x4a>
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b0c      	cmp	r3, #12
 800119a:	f040 808b 	bne.w	80012b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 8087 	bne.w	80012b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e3a2      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	4b82      	ldr	r3, [pc, #520]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_RCC_OscConfig+0x7c>
 80011ce:	4b7f      	ldr	r3, [pc, #508]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011d6:	e005      	b.n	80011e4 <HAL_RCC_OscConfig+0x88>
 80011d8:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d223      	bcs.n	8001230 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fd87 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e383      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fc:	4b73      	ldr	r3, [pc, #460]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a72      	ldr	r2, [pc, #456]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b70      	ldr	r3, [pc, #448]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	496d      	ldr	r1, [pc, #436]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121a:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	4968      	ldr	r1, [pc, #416]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
 800122e:	e025      	b.n	800127c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4960      	ldr	r1, [pc, #384]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	495b      	ldr	r1, [pc, #364]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fd47 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e343      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800127c:	f000 fc4a 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001280:	4602      	mov	r2, r0
 8001282:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	4950      	ldr	r1, [pc, #320]	@ (80013d0 <HAL_RCC_OscConfig+0x274>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	4a4e      	ldr	r2, [pc, #312]	@ (80013d4 <HAL_RCC_OscConfig+0x278>)
 800129a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129c:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <HAL_RCC_OscConfig+0x27c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fb1f 	bl	80008e4 <HAL_InitTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d052      	beq.n	8001356 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	e327      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d032      	beq.n	8001322 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012bc:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a42      	ldr	r2, [pc, #264]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc10 	bl	8000aec <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc0c 	bl	8000aec <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e310      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a36      	ldr	r2, [pc, #216]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4931      	ldr	r1, [pc, #196]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	492c      	ldr	r1, [pc, #176]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e01a      	b.n	8001358 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132e:	f7ff fbdd 	bl	8000aec <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001336:	f7ff fbd9 	bl	8000aec <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e2dd      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x1da>
 8001354:	e000      	b.n	8001358 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001356:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d074      	beq.n	800144e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x21a>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d10e      	bne.n	800138e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d10b      	bne.n	800138e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d064      	beq.n	800144c <HAL_RCC_OscConfig+0x2f0>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d160      	bne.n	800144c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e2ba      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x24a>
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e026      	b.n	80013f4 <HAL_RCC_OscConfig+0x298>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ae:	d115      	bne.n	80013dc <HAL_RCC_OscConfig+0x280>
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a02      	ldr	r2, [pc, #8]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x298>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	08004e48 	.word	0x08004e48
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004
 80013dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb76 	bl	8000aec <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb72 	bl	8000aec <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e276      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001416:	4b92      	ldr	r3, [pc, #584]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x2a8>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb62 	bl	8000aec <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb5e 	bl	8000aec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e262      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x2d0>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d060      	beq.n	800151c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d005      	beq.n	800146c <HAL_RCC_OscConfig+0x310>
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d119      	bne.n	800149a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d116      	bne.n	800149a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x328>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e23f      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b76      	ldr	r3, [pc, #472]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4973      	ldr	r1, [pc, #460]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	e040      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d023      	beq.n	80014ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb1d 	bl	8000aec <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fb19 	bl	8000aec <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e21d      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b65      	ldr	r3, [pc, #404]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b62      	ldr	r3, [pc, #392]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	495f      	ldr	r1, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e018      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff faf9 	bl	8000aec <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff faf5 	bl	8000aec <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1f9      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01c      	beq.n	800156a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001536:	4a4a      	ldr	r2, [pc, #296]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff fad4 	bl	8000aec <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fad0 	bl	8000aec <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1d4      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x3ec>
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800156c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001570:	4a3b      	ldr	r2, [pc, #236]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fab7 	bl	8000aec <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff fab3 	bl	8000aec <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1b7      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001594:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80a6 	beq.w	80016fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10d      	bne.n	80015dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a26      	ldr	r2, [pc, #152]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d118      	bne.n	800161a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fa7a 	bl	8000aec <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fc:	f7ff fa76 	bl	8000aec <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e17a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_RCC_OscConfig+0x4d8>
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001632:	e029      	b.n	8001688 <HAL_RCC_OscConfig+0x52c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d115      	bne.n	8001668 <HAL_RCC_OscConfig+0x50c>
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x52c>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40007000 	.word	0x40007000
 8001668:	4b9c      	ldr	r3, [pc, #624]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166e:	4a9b      	ldr	r2, [pc, #620]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001678:	4b98      	ldr	r3, [pc, #608]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a97      	ldr	r2, [pc, #604]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d016      	beq.n	80016be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fa2c 	bl	8000aec <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fa28 	bl	8000aec <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e12a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ae:	4b8b      	ldr	r3, [pc, #556]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ed      	beq.n	8001698 <HAL_RCC_OscConfig+0x53c>
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fa15 	bl	8000aec <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fa11 	bl	8000aec <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e113      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ed      	bne.n	80016c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b7a      	ldr	r3, [pc, #488]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	4a79      	ldr	r2, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80fe 	beq.w	8001902 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	2b02      	cmp	r3, #2
 800170c:	f040 80d0 	bne.w	80018b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001710:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	d130      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	3b01      	subs	r3, #1
 8001730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d127      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11f      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001750:	2a07      	cmp	r2, #7
 8001752:	bf14      	ite	ne
 8001754:	2201      	movne	r2, #1
 8001756:	2200      	moveq	r2, #0
 8001758:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800175a:	4293      	cmp	r3, r2
 800175c:	d113      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d06e      	beq.n	8001864 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d069      	beq.n	8001860 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800178c:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001798:	4b50      	ldr	r3, [pc, #320]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0ad      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a8:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b4:	f7ff f99a 	bl	8000aec <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f996 	bl	8000aec <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e09a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ce:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <HAL_RCC_OscConfig+0x784>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ea:	3a01      	subs	r2, #1
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017f4:	0212      	lsls	r2, r2, #8
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017fc:	0852      	lsrs	r2, r2, #1
 80017fe:	3a01      	subs	r2, #1
 8001800:	0552      	lsls	r2, r2, #21
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001808:	0852      	lsrs	r2, r2, #1
 800180a:	3a01      	subs	r2, #1
 800180c:	0652      	lsls	r2, r2, #25
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001814:	0912      	lsrs	r2, r2, #4
 8001816:	0452      	lsls	r2, r2, #17
 8001818:	430a      	orrs	r2, r1
 800181a:	4930      	ldr	r1, [pc, #192]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001820:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001838:	f7ff f958 	bl	8000aec <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f954 	bl	8000aec <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e058      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185e:	e050      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e04f      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d148      	bne.n	8001902 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001888:	f7ff f930 	bl	8000aec <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f92c 	bl	8000aec <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e030      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x734>
 80018ae:	e028      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d023      	beq.n	80018fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f913 	bl	8000aec <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	e00c      	b.n	80018e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f90f 	bl	8000aec <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d905      	bls.n	80018e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ec      	bne.n	80018ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4905      	ldr	r1, [pc, #20]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x7b4>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e001      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	feeefffc 	.word	0xfeeefffc

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0e7      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4970      	ldr	r1, [pc, #448]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cf      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4960      	ldr	r1, [pc, #384]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0a6      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b54      	ldr	r3, [pc, #336]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e09a      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e086      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4943      	ldr	r1, [pc, #268]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fc:	f7ff f876 	bl	8000aec <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f872 	bl	8000aec <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e06e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d208      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	492b      	ldr	r1, [pc, #172]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d210      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 0207 	bic.w	r2, r3, #7
 8001a70:	4923      	ldr	r1, [pc, #140]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e036      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4918      	ldr	r1, [pc, #96]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac8:	f000 f824 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	490b      	ldr	r1, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1fc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fef9 	bl	80008e4 <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001af6:	7afb      	ldrb	r3, [r7, #11]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08004e48 	.word	0x08004e48
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d121      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d11e      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e005      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e004      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d134      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0xa6>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d003      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bb8:	e005      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbc:	617b      	str	r3, [r7, #20]
      break;
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e002      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0e5b      	lsrs	r3, r3, #25
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08004e60 	.word	0x08004e60
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08004e58 	.word	0x08004e58

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c74:	f7ff ffda 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0adb      	lsrs	r3, r3, #11
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4904      	ldr	r1, [pc, #16]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08004e58 	.word	0x08004e58

08001c9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220f      	movs	r2, #15
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <HAL_RCC_GetClockConfig+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0207 	and.w	r2, r3, #7
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40022000 	.word	0x40022000

08001d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9bc 	bl	8001094 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
 8001d1e:	e014      	b.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a24      	ldr	r2, [pc, #144]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d38:	f7ff f9ac 	bl	8001094 <HAL_PWREx_GetVoltageRange>
 8001d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d50:	d10b      	bne.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b80      	cmp	r3, #128	@ 0x80
 8001d56:	d919      	bls.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d5c:	d902      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e013      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e010      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b80      	cmp	r3, #128	@ 0x80
 8001d6e:	d902      	bls.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d70:	2303      	movs	r3, #3
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e00a      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b80      	cmp	r3, #128	@ 0x80
 8001d7a:	d102      	bne.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e004      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b70      	cmp	r3, #112	@ 0x70
 8001d86:	d101      	bne.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	4909      	ldr	r1, [pc, #36]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d041      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001de4:	d02a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001de6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dea:	d824      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df0:	d008      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001df2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df6:	d81e      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e02:	e018      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e04:	4b86      	ldr	r3, [pc, #536]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a85      	ldr	r2, [pc, #532]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e10:	e015      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fabb 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e22:	e00c      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3320      	adds	r3, #32
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fba6 	bl	800257c <RCCEx_PLLSAI2_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e34:	e003      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3a:	e000      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e44:	4b76      	ldr	r3, [pc, #472]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e52:	4973      	ldr	r1, [pc, #460]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e5a:	e001      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d041      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e74:	d02a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e80:	d008      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e86:	d81e      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e92:	e018      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e94:	4b62      	ldr	r3, [pc, #392]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a61      	ldr	r2, [pc, #388]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea0:	e015      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa73 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb2:	e00c      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fb5e 	bl	800257c <RCCEx_PLLSAI2_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec4:	e003      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eca:	e000      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed4:	4b52      	ldr	r3, [pc, #328]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ee2:	494f      	ldr	r1, [pc, #316]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eea:	e001      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a0 	beq.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f02:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a40      	ldr	r2, [pc, #256]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3a      	ldr	r2, [pc, #232]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fdd4 	bl	8000aec <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f46:	e009      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe fdd0 	bl	8000aec <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	74fb      	strb	r3, [r7, #19]
        break;
 8001f5a:	e005      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5c:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d15c      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01f      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fd8f 	bl	8000aec <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd0:	e00b      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fd8b 	bl	8000aec <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d902      	bls.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fe8:	e006      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ec      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200e:	4904      	ldr	r1, [pc, #16]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002016:	e009      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
 800201c:	e006      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800202c:	7c7b      	ldrb	r3, [r7, #17]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d105      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002032:	4b9e      	ldr	r3, [pc, #632]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a9d      	ldr	r2, [pc, #628]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800204a:	4b98      	ldr	r3, [pc, #608]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f023 0203 	bic.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	4994      	ldr	r1, [pc, #592]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	f023 020c 	bic.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207a:	498c      	ldr	r1, [pc, #560]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208e:	4b87      	ldr	r3, [pc, #540]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4983      	ldr	r1, [pc, #524]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020b0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	497b      	ldr	r1, [pc, #492]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	4972      	ldr	r1, [pc, #456]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f4:	4b6d      	ldr	r3, [pc, #436]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	496a      	ldr	r1, [pc, #424]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002116:	4b65      	ldr	r3, [pc, #404]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	4961      	ldr	r1, [pc, #388]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002138:	4b5c      	ldr	r3, [pc, #368]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002146:	4959      	ldr	r1, [pc, #356]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215a:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002168:	4950      	ldr	r1, [pc, #320]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217c:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	4948      	ldr	r1, [pc, #288]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219e:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	493f      	ldr	r1, [pc, #252]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d028      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c0:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ce:	4937      	ldr	r1, [pc, #220]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021de:	d106      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a31      	ldr	r2, [pc, #196]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	e011      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021f6:	d10c      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f8c8 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800221e:	4b23      	ldr	r3, [pc, #140]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002224:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	491f      	ldr	r1, [pc, #124]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800223c:	d106      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002248:	60d3      	str	r3, [r2, #12]
 800224a:	e011      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002254:	d10c      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f000 f899 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02b      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800229a:	d109      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a02      	ldr	r2, [pc, #8]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
 80022a8:	e014      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f867 	bl	8002394 <RCCEx_PLLSAI1_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022ee:	4928      	ldr	r1, [pc, #160]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fe:	d10d      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f844 	bl	8002394 <RCCEx_PLLSAI1_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	74bb      	strb	r3, [r7, #18]
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3320      	adds	r3, #32
 800232a:	2102      	movs	r1, #2
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f925 	bl	800257c <RCCEx_PLLSAI2_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800237e:	4904      	ldr	r1, [pc, #16]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002386:	7cbb      	ldrb	r3, [r7, #18]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023a2:	4b75      	ldr	r3, [pc, #468]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d018      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ae:	4b72      	ldr	r3, [pc, #456]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
       ||
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
       ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d047      	beq.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e044      	b.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d018      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x86>
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d825      	bhi.n	8002438 <RCCEx_PLLSAI1_Config+0xa4>
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d002      	beq.n	80023f6 <RCCEx_PLLSAI1_Config+0x62>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d009      	beq.n	8002408 <RCCEx_PLLSAI1_Config+0x74>
 80023f4:	e020      	b.n	8002438 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023f6:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002406:	e01a      	b.n	800243e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002408:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d116      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e013      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800241a:	4b57      	ldr	r3, [pc, #348]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002426:	4b54      	ldr	r3, [pc, #336]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002436:	e006      	b.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e004      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243e:	bf00      	nop
 8002440:	e002      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002446:	bf00      	nop
    }

    if(status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	430b      	orrs	r3, r1
 8002464:	4944      	ldr	r1, [pc, #272]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d17d      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002470:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800247a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe fb36 	bl	8000aec <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002482:	e009      	b.n	8002498 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002484:	f7fe fb32 	bl	8000aec <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d902      	bls.n	8002498 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	73fb      	strb	r3, [r7, #15]
        break;
 8002496:	e005      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ef      	bne.n	8002484 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d160      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d111      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b0:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	0211      	lsls	r1, r2, #8
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	0912      	lsrs	r2, r2, #4
 80024c8:	0452      	lsls	r2, r2, #17
 80024ca:	430a      	orrs	r2, r1
 80024cc:	492a      	ldr	r1, [pc, #168]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	610b      	str	r3, [r1, #16]
 80024d2:	e027      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d112      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6892      	ldr	r2, [r2, #8]
 80024ea:	0211      	lsls	r1, r2, #8
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6912      	ldr	r2, [r2, #16]
 80024f0:	0852      	lsrs	r2, r2, #1
 80024f2:	3a01      	subs	r2, #1
 80024f4:	0552      	lsls	r2, r2, #21
 80024f6:	430a      	orrs	r2, r1
 80024f8:	491f      	ldr	r1, [pc, #124]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]
 80024fe:	e011      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002508:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6952      	ldr	r2, [r2, #20]
 8002516:	0852      	lsrs	r2, r2, #1
 8002518:	3a01      	subs	r2, #1
 800251a:	0652      	lsls	r2, r2, #25
 800251c:	430a      	orrs	r2, r1
 800251e:	4916      	ldr	r1, [pc, #88]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800252e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fadc 	bl	8000aec <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002536:	e009      	b.n	800254c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002538:	f7fe fad8 	bl	8000aec <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
          break;
 800254a:	e005      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4904      	ldr	r1, [pc, #16]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800258a:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002596:	4b67      	ldr	r3, [pc, #412]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0203 	and.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d10d      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
       ||
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ae:	4b61      	ldr	r3, [pc, #388]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
       ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d047      	beq.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e044      	b.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d018      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x86>
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d825      	bhi.n	8002620 <RCCEx_PLLSAI2_Config+0xa4>
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d002      	beq.n	80025de <RCCEx_PLLSAI2_Config+0x62>
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d009      	beq.n	80025f0 <RCCEx_PLLSAI2_Config+0x74>
 80025dc:	e020      	b.n	8002620 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025de:	4b55      	ldr	r3, [pc, #340]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11d      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ee:	e01a      	b.n	8002626 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f0:	4b50      	ldr	r3, [pc, #320]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002600:	e013      	b.n	800262a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002602:	4b4c      	ldr	r3, [pc, #304]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260e:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261e:	e006      	b.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e004      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002636:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	430b      	orrs	r3, r1
 800264c:	4939      	ldr	r1, [pc, #228]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d167      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a35      	ldr	r2, [pc, #212]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fa42 	bl	8000aec <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800266a:	e009      	b.n	8002680 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800266c:	f7fe fa3e 	bl	8000aec <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	73fb      	strb	r3, [r7, #15]
        break;
 800267e:	e005      	b.n	800268c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ef      	bne.n	800266c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d14a      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002698:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6892      	ldr	r2, [r2, #8]
 80026a8:	0211      	lsls	r1, r2, #8
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	0912      	lsrs	r2, r2, #4
 80026b0:	0452      	lsls	r2, r2, #17
 80026b2:	430a      	orrs	r2, r1
 80026b4:	491f      	ldr	r1, [pc, #124]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	614b      	str	r3, [r1, #20]
 80026ba:	e011      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6912      	ldr	r2, [r2, #16]
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0652      	lsls	r2, r2, #25
 80026d8:	430a      	orrs	r2, r1
 80026da:	4916      	ldr	r1, [pc, #88]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe f9fe 	bl	8000aec <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f4:	f7fe f9fa 	bl	8000aec <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
          break;
 8002706:	e005      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4904      	ldr	r1, [pc, #16]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e049      	b.n	80027de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f841 	bl	80027e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 f9e0 	bl	8002b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283e:	d018      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <HAL_TIM_Base_Start_IT+0xd0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d115      	bne.n	800289e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d015      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288a:	d011      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	e008      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	00010007 	.word	0x00010007

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8e9 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8db 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8ec 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8c3 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8b5 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f8c6 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0208 	mvn.w	r2, #8
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f89d 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f88f 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8a0 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f877 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f869 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f87a 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd feb2 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f913 	bl	8002c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f90b 	bl	8002cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00c      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f834 	bl	8002b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0220 	mvn.w	r2, #32
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8d3 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a46      	ldr	r2, [pc, #280]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d00f      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a43      	ldr	r2, [pc, #268]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a42      	ldr	r2, [pc, #264]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a41      	ldr	r2, [pc, #260]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a32      	ldr	r2, [pc, #200]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a30      	ldr	r2, [pc, #192]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <TIM_Base_SetConfig+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <TIM_Base_SetConfig+0x144>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <TIM_Base_SetConfig+0x148>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <TIM_Base_SetConfig+0x140>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <TIM_Base_SetConfig+0x144>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <TIM_Base_SetConfig+0x148>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f023 0201 	bic.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e040      	b.n	8002d58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fda0 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	@ 0x24
 8002cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fae0 	bl	80032d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f825 	bl	8002d60 <UART_SetConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e01b      	b.n	8002d58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fb5f 	bl	8003414 <UART_CheckIdleState>
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b08a      	sub	sp, #40	@ 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4ba4      	ldr	r3, [pc, #656]	@ (8003020 <UART_SetConfig+0x2c0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a99      	ldr	r2, [pc, #612]	@ (8003024 <UART_SetConfig+0x2c4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a90      	ldr	r2, [pc, #576]	@ (8003028 <UART_SetConfig+0x2c8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d126      	bne.n	8002e38 <UART_SetConfig+0xd8>
 8002dea:	4b90      	ldr	r3, [pc, #576]	@ (800302c <UART_SetConfig+0x2cc>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d81b      	bhi.n	8002e30 <UART_SetConfig+0xd0>
 8002df8:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <UART_SetConfig+0xa0>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e21 	.word	0x08002e21
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e16:	e116      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1e:	e112      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e20:	2304      	movs	r3, #4
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e10e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e28:	2308      	movs	r3, #8
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e10a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e30:	2310      	movs	r3, #16
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e106      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7c      	ldr	r2, [pc, #496]	@ (8003030 <UART_SetConfig+0x2d0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d138      	bne.n	8002eb4 <UART_SetConfig+0x154>
 8002e42:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <UART_SetConfig+0x2cc>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d82d      	bhi.n	8002eac <UART_SetConfig+0x14c>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <UART_SetConfig+0xf8>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002ead 	.word	0x08002ead
 8002e60:	08002ead 	.word	0x08002ead
 8002e64:	08002ead 	.word	0x08002ead
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002ead 	.word	0x08002ead
 8002e74:	08002ead 	.word	0x08002ead
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002ead 	.word	0x08002ead
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002ea5 	.word	0x08002ea5
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e92:	e0d8      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e0d4      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e0d0      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e0cc      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0c8      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5e      	ldr	r2, [pc, #376]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d125      	bne.n	8002f0a <UART_SetConfig+0x1aa>
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <UART_SetConfig+0x2cc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ec8:	2b30      	cmp	r3, #48	@ 0x30
 8002eca:	d016      	beq.n	8002efa <UART_SetConfig+0x19a>
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d818      	bhi.n	8002f02 <UART_SetConfig+0x1a2>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d00a      	beq.n	8002eea <UART_SetConfig+0x18a>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d814      	bhi.n	8002f02 <UART_SetConfig+0x1a2>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <UART_SetConfig+0x182>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d008      	beq.n	8002ef2 <UART_SetConfig+0x192>
 8002ee0:	e00f      	b.n	8002f02 <UART_SetConfig+0x1a2>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee8:	e0ad      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eea:	2302      	movs	r3, #2
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef0:	e0a9      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef8:	e0a5      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002efa:	2308      	movs	r3, #8
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f00:	e0a1      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f02:	2310      	movs	r3, #16
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e09d      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003038 <UART_SetConfig+0x2d8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d125      	bne.n	8002f60 <UART_SetConfig+0x200>
 8002f14:	4b45      	ldr	r3, [pc, #276]	@ (800302c <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f20:	d016      	beq.n	8002f50 <UART_SetConfig+0x1f0>
 8002f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f24:	d818      	bhi.n	8002f58 <UART_SetConfig+0x1f8>
 8002f26:	2b80      	cmp	r3, #128	@ 0x80
 8002f28:	d00a      	beq.n	8002f40 <UART_SetConfig+0x1e0>
 8002f2a:	2b80      	cmp	r3, #128	@ 0x80
 8002f2c:	d814      	bhi.n	8002f58 <UART_SetConfig+0x1f8>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <UART_SetConfig+0x1d8>
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d008      	beq.n	8002f48 <UART_SetConfig+0x1e8>
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x1f8>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3e:	e082      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e07e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4e:	e07a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f56:	e076      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e072      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a35      	ldr	r2, [pc, #212]	@ (800303c <UART_SetConfig+0x2dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12a      	bne.n	8002fc0 <UART_SetConfig+0x260>
 8002f6a:	4b30      	ldr	r3, [pc, #192]	@ (800302c <UART_SetConfig+0x2cc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f78:	d01a      	beq.n	8002fb0 <UART_SetConfig+0x250>
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0x258>
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	d00c      	beq.n	8002fa0 <UART_SetConfig+0x240>
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8a:	d815      	bhi.n	8002fb8 <UART_SetConfig+0x258>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <UART_SetConfig+0x238>
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f94:	d008      	beq.n	8002fa8 <UART_SetConfig+0x248>
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x258>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e052      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e04e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e04a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e046      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e042      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <UART_SetConfig+0x2c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d13a      	bne.n	8003040 <UART_SetConfig+0x2e0>
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <UART_SetConfig+0x2cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fd8:	d01a      	beq.n	8003010 <UART_SetConfig+0x2b0>
 8002fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fde:	d81b      	bhi.n	8003018 <UART_SetConfig+0x2b8>
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe4:	d00c      	beq.n	8003000 <UART_SetConfig+0x2a0>
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fea:	d815      	bhi.n	8003018 <UART_SetConfig+0x2b8>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0x298>
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff4:	d008      	beq.n	8003008 <UART_SetConfig+0x2a8>
 8002ff6:	e00f      	b.n	8003018 <UART_SetConfig+0x2b8>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e022      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003000:	2302      	movs	r3, #2
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e01e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003008:	2304      	movs	r3, #4
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e01a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003010:	2308      	movs	r3, #8
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e016      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003018:	2310      	movs	r3, #16
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e012      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003020:	efff69f3 	.word	0xefff69f3
 8003024:	40008000 	.word	0x40008000
 8003028:	40013800 	.word	0x40013800
 800302c:	40021000 	.word	0x40021000
 8003030:	40004400 	.word	0x40004400
 8003034:	40004800 	.word	0x40004800
 8003038:	40004c00 	.word	0x40004c00
 800303c:	40005000 	.word	0x40005000
 8003040:	2310      	movs	r3, #16
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a9f      	ldr	r2, [pc, #636]	@ (80032c8 <UART_SetConfig+0x568>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d17a      	bne.n	8003146 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003054:	2b08      	cmp	r3, #8
 8003056:	d824      	bhi.n	80030a2 <UART_SetConfig+0x342>
 8003058:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <UART_SetConfig+0x300>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003085 	.word	0x08003085
 8003064:	080030a3 	.word	0x080030a3
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030a3 	.word	0x080030a3
 8003070:	08003093 	.word	0x08003093
 8003074:	080030a3 	.word	0x080030a3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030a3 	.word	0x080030a3
 8003080:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7fe fdde 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003088:	61f8      	str	r0, [r7, #28]
        break;
 800308a:	e010      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b8f      	ldr	r3, [pc, #572]	@ (80032cc <UART_SetConfig+0x56c>)
 800308e:	61fb      	str	r3, [r7, #28]
        break;
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7fe fd3f 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8003096:	61f8      	str	r0, [r7, #28]
        break;
 8003098:	e009      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309e:	61fb      	str	r3, [r7, #28]
        break;
 80030a0:	e005      	b.n	80030ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80fb 	beq.w	80032ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d305      	bcc.n	80030d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030d8:	e0e8      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2200      	movs	r2, #0
 80030de:	461c      	mov	r4, r3
 80030e0:	4615      	mov	r5, r2
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	022b      	lsls	r3, r5, #8
 80030ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030f0:	0222      	lsls	r2, r4, #8
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	6849      	ldr	r1, [r1, #4]
 80030f6:	0849      	lsrs	r1, r1, #1
 80030f8:	2000      	movs	r0, #0
 80030fa:	4688      	mov	r8, r1
 80030fc:	4681      	mov	r9, r0
 80030fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003102:	eb43 0b09 	adc.w	fp, r3, r9
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f85a 	bl	80001d0 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800312a:	d308      	bcc.n	800313e <UART_SetConfig+0x3de>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003132:	d204      	bcs.n	800313e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e0b6      	b.n	80032ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003144:	e0b2      	b.n	80032ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314e:	d15e      	bne.n	800320e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003154:	2b08      	cmp	r3, #8
 8003156:	d828      	bhi.n	80031aa <UART_SetConfig+0x44a>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <UART_SetConfig+0x400>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003185 	.word	0x08003185
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003195 	.word	0x08003195
 800316c:	080031ab 	.word	0x080031ab
 8003170:	0800319b 	.word	0x0800319b
 8003174:	080031ab 	.word	0x080031ab
 8003178:	080031ab 	.word	0x080031ab
 800317c:	080031ab 	.word	0x080031ab
 8003180:	080031a3 	.word	0x080031a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fd5e 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003188:	61f8      	str	r0, [r7, #28]
        break;
 800318a:	e014      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7fe fd70 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003194:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <UART_SetConfig+0x56c>)
 8003196:	61fb      	str	r3, [r7, #28]
        break;
 8003198:	e00d      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe fcbb 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 800319e:	61f8      	str	r0, [r7, #28]
        break;
 80031a0:	e009      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a6:	61fb      	str	r3, [r7, #28]
        break;
 80031a8:	e005      	b.n	80031b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d077      	beq.n	80032ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005a      	lsls	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d916      	bls.n	8003206 <UART_SetConfig+0x4a6>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031de:	d212      	bcs.n	8003206 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	8afa      	ldrh	r2, [r7, #22]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e052      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800320c:	e04e      	b.n	80032ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003212:	2b08      	cmp	r3, #8
 8003214:	d827      	bhi.n	8003266 <UART_SetConfig+0x506>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <UART_SetConfig+0x4bc>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003267 	.word	0x08003267
 800322c:	08003257 	.word	0x08003257
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fd00 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003244:	61f8      	str	r0, [r7, #28]
        break;
 8003246:	e014      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7fe fd12 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e010      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <UART_SetConfig+0x56c>)
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e00d      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7fe fc5d 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 800325a:	61f8      	str	r0, [r7, #28]
        break;
 800325c:	e009      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
        break;
 8003264:	e005      	b.n	8003272 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003270:	bf00      	nop
    }

    if (pclk != 0U)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d909      	bls.n	80032a6 <UART_SetConfig+0x546>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003298:	d205      	bcs.n	80032a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e002      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40008000 	.word	0x40008000
 80032cc:	00f42400 	.word	0x00f42400

080032d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01a      	beq.n	80033e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d10a      	bne.n	80033e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b098      	sub	sp, #96	@ 0x60
 8003418:	af02      	add	r7, sp, #8
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003424:	f7fd fb62 	bl	8000aec <HAL_GetTick>
 8003428:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d12e      	bne.n	8003496 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f88c 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d021      	beq.n	8003496 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003466:	653b      	str	r3, [r7, #80]	@ 0x50
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003470:	647b      	str	r3, [r7, #68]	@ 0x44
 8003472:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800347e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e6      	bne.n	8003452 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e062      	b.n	800355c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d149      	bne.n	8003538 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f856 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03c      	beq.n	8003538 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	623b      	str	r3, [r7, #32]
   return(result);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e6      	bne.n	80034be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3308      	adds	r3, #8
 80034f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3308      	adds	r3, #8
 800350e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	617b      	str	r3, [r7, #20]
   return(result);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e5      	bne.n	80034f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e011      	b.n	800355c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3758      	adds	r7, #88	@ 0x58
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003574:	e04f      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d04b      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd fab5 	bl	8000aec <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <UART_WaitOnFlagUntilTimeout+0x30>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e04e      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d037      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b80      	cmp	r3, #128	@ 0x80
 80035aa:	d034      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	d031      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d110      	bne.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f838 	bl	800363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2208      	movs	r2, #8
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e029      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f0:	d111      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f81e 	bl	800363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e00f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0a0      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363e:	b480      	push	{r7}
 8003640:	b095      	sub	sp, #84	@ 0x54
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
 8003666:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800366a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e6      	bne.n	8003646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	61fb      	str	r3, [r7, #28]
   return(result);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d118      	bne.n	80036e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0310 	bic.w	r3, r3, #16
 80036c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6979      	ldr	r1, [r7, #20]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	613b      	str	r3, [r7, #16]
   return(result);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e6      	bne.n	80036b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036fa:	bf00      	nop
 80036fc:	3754      	adds	r7, #84	@ 0x54
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003718:	2b84      	cmp	r3, #132	@ 0x84
 800371a:	d005      	beq.n	8003728 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800371c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	3303      	adds	r3, #3
 8003726:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800373a:	f000 fafd 	bl	8003d38 <vTaskStartScheduler>
  
  return osOK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}

08003744 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003746:	b089      	sub	sp, #36	@ 0x24
 8003748:	af04      	add	r7, sp, #16
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <osThreadCreate+0x54>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01c      	beq.n	8003798 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685c      	ldr	r4, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691e      	ldr	r6, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ffc8 	bl	8003706 <makeFreeRtosPriority>
 8003776:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003780:	9202      	str	r2, [sp, #8]
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	9100      	str	r1, [sp, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4632      	mov	r2, r6
 800378a:	4629      	mov	r1, r5
 800378c:	4620      	mov	r0, r4
 800378e:	f000 f8ed 	bl	800396c <xTaskCreateStatic>
 8003792:	4603      	mov	r3, r0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e01c      	b.n	80037d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685c      	ldr	r4, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ffaa 	bl	8003706 <makeFreeRtosPriority>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	9200      	str	r2, [sp, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4632      	mov	r2, r6
 80037c0:	4629      	mov	r1, r5
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 f932 	bl	8003a2c <xTaskCreate>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <osDelay+0x16>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	e000      	b.n	80037f4 <osDelay+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fa69 	bl	8003ccc <vTaskDelay>
  
  return osOK;
 80037fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f103 0208 	add.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f103 0208 	add.w	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0208 	add.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d103      	bne.n	80038c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e00c      	b.n	80038e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3308      	adds	r3, #8
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e002      	b.n	80038d4 <vListInsert+0x2e>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d2f6      	bcs.n	80038ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d103      	bne.n	800394c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	@ 0x38
 8003970:	af04      	add	r7, sp, #16
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	61fb      	str	r3, [r7, #28]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b6:	23a0      	movs	r3, #160	@ 0xa0
 80039b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80039be:	d00b      	beq.n	80039d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61bb      	str	r3, [r7, #24]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01e      	beq.n	8003a1e <xTaskCreateStatic+0xb2>
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01b      	beq.n	8003a1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f8:	2300      	movs	r3, #0
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	9302      	str	r3, [sp, #8]
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f851 	bl	8003ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a18:	f000 f8ee 	bl	8003bf8 <prvAddNewTaskToReadyList>
 8003a1c:	e001      	b.n	8003a22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a22:	697b      	ldr	r3, [r7, #20]
	}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	@ 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af04      	add	r7, sp, #16
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ff01 	bl	8004848 <pvPortMalloc>
 8003a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a4e:	20a0      	movs	r0, #160	@ 0xa0
 8003a50:	f000 fefa 	bl	8004848 <pvPortMalloc>
 8003a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a62:	e005      	b.n	8003a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f000 ffbd 	bl	80049e4 <vPortFree>
 8003a6a:	e001      	b.n	8003a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f80f 	bl	8003ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a9a:	69f8      	ldr	r0, [r7, #28]
 8003a9c:	f000 f8ac 	bl	8003bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e002      	b.n	8003aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aac:	69bb      	ldr	r3, [r7, #24]
	}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	617b      	str	r3, [r7, #20]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01f      	beq.n	8003b48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e012      	b.n	8003b34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	7819      	ldrb	r1, [r3, #0]
 8003b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3334      	adds	r3, #52	@ 0x34
 8003b1e:	460a      	mov	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	d9e9      	bls.n	8003b0e <prvInitialiseNewTask+0x56>
 8003b3a:	e000      	b.n	8003b3e <prvInitialiseNewTask+0x86>
			{
				break;
 8003b3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b46:	e003      	b.n	8003b50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d901      	bls.n	8003b5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b56:	2306      	movs	r3, #6
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fe67 	bl	8003844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	3318      	adds	r3, #24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fe62 	bl	8003844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	f1c3 0207 	rsb	r2, r3, #7
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	334c      	adds	r3, #76	@ 0x4c
 8003baa:	224c      	movs	r2, #76	@ 0x4c
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f838 	bl	8004c24 <memset>
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <prvInitialiseNewTask+0x134>)
 8003bb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <prvInitialiseNewTask+0x138>)
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf4 <prvInitialiseNewTask+0x13c>)
 8003bc4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	69b8      	ldr	r0, [r7, #24]
 8003bcc:	f000 fc2a 	bl	8004424 <pxPortInitialiseStack>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003be2:	bf00      	nop
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20001108 	.word	0x20001108
 8003bf0:	20001170 	.word	0x20001170
 8003bf4:	200011d8 	.word	0x200011d8

08003bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c00:	f000 fd42 	bl	8004688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c04:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <prvAddNewTaskToReadyList+0xb8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	4a29      	ldr	r2, [pc, #164]	@ (8003cb0 <prvAddNewTaskToReadyList+0xb8>)
 8003c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c0e:	4b29      	ldr	r3, [pc, #164]	@ (8003cb4 <prvAddNewTaskToReadyList+0xbc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c16:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <prvAddNewTaskToReadyList+0xbc>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c1c:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <prvAddNewTaskToReadyList+0xb8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d110      	bne.n	8003c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c24:	f000 fad4 	bl	80041d0 <prvInitialiseTaskLists>
 8003c28:	e00d      	b.n	8003c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c2a:	4b23      	ldr	r3, [pc, #140]	@ (8003cb8 <prvAddNewTaskToReadyList+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <prvAddNewTaskToReadyList+0xbc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d802      	bhi.n	8003c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c40:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb4 <prvAddNewTaskToReadyList+0xbc>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c46:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <prvAddNewTaskToReadyList+0xc4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <prvAddNewTaskToReadyList+0xc4>)
 8003c4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	4b19      	ldr	r3, [pc, #100]	@ (8003cc0 <prvAddNewTaskToReadyList+0xc8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <prvAddNewTaskToReadyList+0xc8>)
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <prvAddNewTaskToReadyList+0xcc>)
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7ff fdf0 	bl	800385e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c7e:	f000 fd35 	bl	80046ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <prvAddNewTaskToReadyList+0xc0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <prvAddNewTaskToReadyList+0xbc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <prvAddNewTaskToReadyList+0xd0>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200004fc 	.word	0x200004fc
 8003cb4:	200003fc 	.word	0x200003fc
 8003cb8:	20000508 	.word	0x20000508
 8003cbc:	20000518 	.word	0x20000518
 8003cc0:	20000504 	.word	0x20000504
 8003cc4:	20000400 	.word	0x20000400
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <vTaskDelay+0x64>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <vTaskDelay+0x32>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60bb      	str	r3, [r7, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cfe:	f000 f885 	bl	8003e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb27 	bl	8004358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d0a:	f000 f88d 	bl	8003e28 <xTaskResumeAll>
 8003d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <vTaskDelay+0x68>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000524 	.word	0x20000524
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d46:	463a      	mov	r2, r7
 8003d48:	1d39      	adds	r1, r7, #4
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fbb6 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	9202      	str	r2, [sp, #8]
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	460a      	mov	r2, r1
 8003d66:	4921      	ldr	r1, [pc, #132]	@ (8003dec <vTaskStartScheduler+0xb4>)
 8003d68:	4821      	ldr	r0, [pc, #132]	@ (8003df0 <vTaskStartScheduler+0xb8>)
 8003d6a:	f7ff fdff 	bl	800396c <xTaskCreateStatic>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4a20      	ldr	r2, [pc, #128]	@ (8003df4 <vTaskStartScheduler+0xbc>)
 8003d72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <vTaskStartScheduler+0xbc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e001      	b.n	8003d86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d11b      	bne.n	8003dc4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	613b      	str	r3, [r7, #16]
}
 8003d9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003da0:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <vTaskStartScheduler+0xc0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	334c      	adds	r3, #76	@ 0x4c
 8003da6:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <vTaskStartScheduler+0xc4>)
 8003da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003daa:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <vTaskStartScheduler+0xc8>)
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <vTaskStartScheduler+0xcc>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003db8:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <vTaskStartScheduler+0xd0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dbe:	f000 fbbf 	bl	8004540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dc2:	e00f      	b.n	8003de4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d10b      	bne.n	8003de4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	e7fd      	b.n	8003de0 <vTaskStartScheduler+0xa8>
}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08004e40 	.word	0x08004e40
 8003df0:	080041a1 	.word	0x080041a1
 8003df4:	20000520 	.word	0x20000520
 8003df8:	200003fc 	.word	0x200003fc
 8003dfc:	20000010 	.word	0x20000010
 8003e00:	2000051c 	.word	0x2000051c
 8003e04:	20000508 	.word	0x20000508
 8003e08:	20000500 	.word	0x20000500

08003e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e10:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <vTaskSuspendAll+0x18>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a03      	ldr	r2, [pc, #12]	@ (8003e24 <vTaskSuspendAll+0x18>)
 8003e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000524 	.word	0x20000524

08003e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e36:	4b42      	ldr	r3, [pc, #264]	@ (8003f40 <xTaskResumeAll+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <xTaskResumeAll+0x2e>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	603b      	str	r3, [r7, #0]
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e56:	f000 fc17 	bl	8004688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e5a:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <xTaskResumeAll+0x118>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4a37      	ldr	r2, [pc, #220]	@ (8003f40 <xTaskResumeAll+0x118>)
 8003e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e64:	4b36      	ldr	r3, [pc, #216]	@ (8003f40 <xTaskResumeAll+0x118>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d161      	bne.n	8003f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e6c:	4b35      	ldr	r3, [pc, #212]	@ (8003f44 <xTaskResumeAll+0x11c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05d      	beq.n	8003f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e74:	e02e      	b.n	8003ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e76:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <xTaskResumeAll+0x120>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3318      	adds	r3, #24
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fd48 	bl	8003918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fd43 	bl	8003918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <xTaskResumeAll+0x124>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <xTaskResumeAll+0x124>)
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <xTaskResumeAll+0x128>)
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7ff fccf 	bl	800385e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec4:	4b23      	ldr	r3, [pc, #140]	@ (8003f54 <xTaskResumeAll+0x12c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ece:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <xTaskResumeAll+0x130>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f48 <xTaskResumeAll+0x120>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1cc      	bne.n	8003e76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ee2:	f000 fa19 	bl	8004318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <xTaskResumeAll+0x134>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ef2:	f000 f837 	bl	8003f64 <xTaskIncrementTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003efc:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <xTaskResumeAll+0x130>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f1      	bne.n	8003ef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <xTaskResumeAll+0x134>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f14:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <xTaskResumeAll+0x130>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <xTaskResumeAll+0x138>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f30:	f000 fbdc 	bl	80046ec <vPortExitCritical>

	return xAlreadyYielded;
 8003f34:	68bb      	ldr	r3, [r7, #8]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000524 	.word	0x20000524
 8003f44:	200004fc 	.word	0x200004fc
 8003f48:	200004bc 	.word	0x200004bc
 8003f4c:	20000504 	.word	0x20000504
 8003f50:	20000400 	.word	0x20000400
 8003f54:	200003fc 	.word	0x200003fc
 8003f58:	20000510 	.word	0x20000510
 8003f5c:	2000050c 	.word	0x2000050c
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80040ac <xTaskIncrementTick+0x148>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 808f 	bne.w	8004096 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f78:	4b4d      	ldr	r3, [pc, #308]	@ (80040b0 <xTaskIncrementTick+0x14c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <xTaskIncrementTick+0x14c>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d121      	bne.n	8003fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f8c:	4b49      	ldr	r3, [pc, #292]	@ (80040b4 <xTaskIncrementTick+0x150>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	603b      	str	r3, [r7, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <xTaskIncrementTick+0x46>
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <xTaskIncrementTick+0x150>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	4b40      	ldr	r3, [pc, #256]	@ (80040b8 <xTaskIncrementTick+0x154>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80040b4 <xTaskIncrementTick+0x150>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80040b8 <xTaskIncrementTick+0x154>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <xTaskIncrementTick+0x158>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80040bc <xTaskIncrementTick+0x158>)
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	f000 f9a4 	bl	8004318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80040c0 <xTaskIncrementTick+0x15c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d348      	bcc.n	800406c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fda:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <xTaskIncrementTick+0x150>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe4:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <xTaskIncrementTick+0x15c>)
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fea:	601a      	str	r2, [r3, #0]
					break;
 8003fec:	e03e      	b.n	800406c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fee:	4b31      	ldr	r3, [pc, #196]	@ (80040b4 <xTaskIncrementTick+0x150>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d203      	bcs.n	800400e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004006:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <xTaskIncrementTick+0x15c>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800400c:	e02e      	b.n	800406c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3304      	adds	r3, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fc80 	bl	8003918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3318      	adds	r3, #24
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fc77 	bl	8003918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <xTaskIncrementTick+0x160>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <xTaskIncrementTick+0x160>)
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <xTaskIncrementTick+0x164>)
 800404a:	441a      	add	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f7ff fc03 	bl	800385e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <xTaskIncrementTick+0x168>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	429a      	cmp	r2, r3
 8004064:	d3b9      	bcc.n	8003fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406a:	e7b6      	b.n	8003fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800406c:	4b17      	ldr	r3, [pc, #92]	@ (80040cc <xTaskIncrementTick+0x168>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004072:	4915      	ldr	r1, [pc, #84]	@ (80040c8 <xTaskIncrementTick+0x164>)
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d901      	bls.n	8004088 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <xTaskIncrementTick+0x16c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e004      	b.n	80040a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004096:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <xTaskIncrementTick+0x170>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <xTaskIncrementTick+0x170>)
 800409e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040a0:	697b      	ldr	r3, [r7, #20]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000524 	.word	0x20000524
 80040b0:	20000500 	.word	0x20000500
 80040b4:	200004b4 	.word	0x200004b4
 80040b8:	200004b8 	.word	0x200004b8
 80040bc:	20000514 	.word	0x20000514
 80040c0:	2000051c 	.word	0x2000051c
 80040c4:	20000504 	.word	0x20000504
 80040c8:	20000400 	.word	0x20000400
 80040cc:	200003fc 	.word	0x200003fc
 80040d0:	20000510 	.word	0x20000510
 80040d4:	2000050c 	.word	0x2000050c

080040d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040de:	4b2a      	ldr	r3, [pc, #168]	@ (8004188 <vTaskSwitchContext+0xb0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <vTaskSwitchContext+0xb4>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040ec:	e045      	b.n	800417a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <vTaskSwitchContext+0xb4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f4:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <vTaskSwitchContext+0xb8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004102:	7afb      	ldrb	r3, [r7, #11]
 8004104:	f1c3 031f 	rsb	r3, r3, #31
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	4922      	ldr	r1, [pc, #136]	@ (8004194 <vTaskSwitchContext+0xbc>)
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <vTaskSwitchContext+0x5e>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <vTaskSwitchContext+0x5a>
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <vTaskSwitchContext+0xbc>)
 8004142:	4413      	add	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3308      	adds	r3, #8
 8004158:	429a      	cmp	r2, r3
 800415a:	d104      	bne.n	8004166 <vTaskSwitchContext+0x8e>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <vTaskSwitchContext+0xc0>)
 800416e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <vTaskSwitchContext+0xc0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	334c      	adds	r3, #76	@ 0x4c
 8004176:	4a09      	ldr	r2, [pc, #36]	@ (800419c <vTaskSwitchContext+0xc4>)
 8004178:	6013      	str	r3, [r2, #0]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000524 	.word	0x20000524
 800418c:	20000510 	.word	0x20000510
 8004190:	20000504 	.word	0x20000504
 8004194:	20000400 	.word	0x20000400
 8004198:	200003fc 	.word	0x200003fc
 800419c:	20000010 	.word	0x20000010

080041a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041a8:	f000 f852 	bl	8004250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <prvIdleTask+0x28>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d9f9      	bls.n	80041a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <prvIdleTask+0x2c>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041c4:	e7f0      	b.n	80041a8 <prvIdleTask+0x8>
 80041c6:	bf00      	nop
 80041c8:	20000400 	.word	0x20000400
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	e00c      	b.n	80041f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a12      	ldr	r2, [pc, #72]	@ (8004230 <prvInitialiseTaskLists+0x60>)
 80041e8:	4413      	add	r3, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fb0a 	bl	8003804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d9ef      	bls.n	80041dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041fc:	480d      	ldr	r0, [pc, #52]	@ (8004234 <prvInitialiseTaskLists+0x64>)
 80041fe:	f7ff fb01 	bl	8003804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004202:	480d      	ldr	r0, [pc, #52]	@ (8004238 <prvInitialiseTaskLists+0x68>)
 8004204:	f7ff fafe 	bl	8003804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004208:	480c      	ldr	r0, [pc, #48]	@ (800423c <prvInitialiseTaskLists+0x6c>)
 800420a:	f7ff fafb 	bl	8003804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800420e:	480c      	ldr	r0, [pc, #48]	@ (8004240 <prvInitialiseTaskLists+0x70>)
 8004210:	f7ff faf8 	bl	8003804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004214:	480b      	ldr	r0, [pc, #44]	@ (8004244 <prvInitialiseTaskLists+0x74>)
 8004216:	f7ff faf5 	bl	8003804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <prvInitialiseTaskLists+0x78>)
 800421c:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <prvInitialiseTaskLists+0x64>)
 800421e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <prvInitialiseTaskLists+0x7c>)
 8004222:	4a05      	ldr	r2, [pc, #20]	@ (8004238 <prvInitialiseTaskLists+0x68>)
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000400 	.word	0x20000400
 8004234:	2000048c 	.word	0x2000048c
 8004238:	200004a0 	.word	0x200004a0
 800423c:	200004bc 	.word	0x200004bc
 8004240:	200004d0 	.word	0x200004d0
 8004244:	200004e8 	.word	0x200004e8
 8004248:	200004b4 	.word	0x200004b4
 800424c:	200004b8 	.word	0x200004b8

08004250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004256:	e019      	b.n	800428c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004258:	f000 fa16 	bl	8004688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <prvCheckTasksWaitingTermination+0x50>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb55 	bl	8003918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <prvCheckTasksWaitingTermination+0x54>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	4a0b      	ldr	r2, [pc, #44]	@ (80042a4 <prvCheckTasksWaitingTermination+0x54>)
 8004276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 8004280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004282:	f000 fa33 	bl	80046ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f810 	bl	80042ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e1      	bne.n	8004258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200004d0 	.word	0x200004d0
 80042a4:	200004fc 	.word	0x200004fc
 80042a8:	200004e4 	.word	0x200004e4

080042ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	334c      	adds	r3, #76	@ 0x4c
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fcbb 	bl	8004c34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb89 	bl	80049e4 <vPortFree>
				vPortFree( pxTCB );
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fb86 	bl	80049e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042d8:	e019      	b.n	800430e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d103      	bne.n	80042ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb7d 	bl	80049e4 <vPortFree>
	}
 80042ea:	e010      	b.n	800430e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d00b      	beq.n	800430e <prvDeleteTCB+0x62>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <prvDeleteTCB+0x5e>
	}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <prvResetNextTaskUnblockTime+0x38>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <prvResetNextTaskUnblockTime+0x3c>)
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004330:	e008      	b.n	8004344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <prvResetNextTaskUnblockTime+0x38>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a04      	ldr	r2, [pc, #16]	@ (8004354 <prvResetNextTaskUnblockTime+0x3c>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	200004b4 	.word	0x200004b4
 8004354:	2000051c 	.word	0x2000051c

08004358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004362:	4b29      	ldr	r3, [pc, #164]	@ (8004408 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004368:	4b28      	ldr	r3, [pc, #160]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fad2 	bl	8003918 <uxListRemove>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800437a:	4b24      	ldr	r3, [pc, #144]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	2201      	movs	r2, #1
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	4b21      	ldr	r3, [pc, #132]	@ (8004410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4013      	ands	r3, r2
 800438e:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d10a      	bne.n	80043b0 <prvAddCurrentTaskToDelayedList+0x58>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	481a      	ldr	r0, [pc, #104]	@ (8004414 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043aa:	f7ff fa58 	bl	800385e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043ae:	e026      	b.n	80043fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d209      	bcs.n	80043dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c8:	4b13      	ldr	r3, [pc, #76]	@ (8004418 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7ff fa66 	bl	80038a6 <vListInsert>
}
 80043da:	e010      	b.n	80043fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043dc:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <prvAddCurrentTaskToDelayedList+0xc4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7ff fa5c 	bl	80038a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d202      	bcs.n	80043fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043f8:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000500 	.word	0x20000500
 800440c:	200003fc 	.word	0x200003fc
 8004410:	20000504 	.word	0x20000504
 8004414:	200004e8 	.word	0x200004e8
 8004418:	200004b8 	.word	0x200004b8
 800441c:	200004b4 	.word	0x200004b4
 8004420:	2000051c 	.word	0x2000051c

08004424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3b04      	subs	r3, #4
 8004434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800443c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b04      	subs	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b04      	subs	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004454:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <pxPortInitialiseStack+0x64>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3b14      	subs	r3, #20
 800445e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b04      	subs	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f06f 0202 	mvn.w	r2, #2
 8004472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b20      	subs	r3, #32
 8004478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	0800448d 	.word	0x0800448d

0800448c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004496:	4b13      	ldr	r3, [pc, #76]	@ (80044e4 <prvTaskExitError+0x58>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d00b      	beq.n	80044b8 <prvTaskExitError+0x2c>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <prvTaskExitError+0x28>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60bb      	str	r3, [r7, #8]
}
 80044ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044cc:	bf00      	nop
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0fc      	beq.n	80044ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c
	...

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004518:	4808      	ldr	r0, [pc, #32]	@ (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800453a:	bf00      	nop
 800453c:	e000ed08 	.word	0xe000ed08

08004540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004546:	4b47      	ldr	r3, [pc, #284]	@ (8004664 <xPortStartScheduler+0x124>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <xPortStartScheduler+0x128>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10b      	bne.n	8004568 <xPortStartScheduler+0x28>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004568:	4b3e      	ldr	r3, [pc, #248]	@ (8004664 <xPortStartScheduler+0x124>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3f      	ldr	r2, [pc, #252]	@ (800466c <xPortStartScheduler+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10b      	bne.n	800458a <xPortStartScheduler+0x4a>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60fb      	str	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800458a:	4b39      	ldr	r3, [pc, #228]	@ (8004670 <xPortStartScheduler+0x130>)
 800458c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	22ff      	movs	r2, #255	@ 0xff
 800459a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <xPortStartScheduler+0x134>)
 80045b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <xPortStartScheduler+0x138>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b8:	e009      	b.n	80045ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80045ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <xPortStartScheduler+0x138>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004678 <xPortStartScheduler+0x138>)
 80045c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d6:	2b80      	cmp	r3, #128	@ 0x80
 80045d8:	d0ef      	beq.n	80045ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <xPortStartScheduler+0x138>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d00b      	beq.n	80045fe <xPortStartScheduler+0xbe>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60bb      	str	r3, [r7, #8]
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	e7fd      	b.n	80045fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <xPortStartScheduler+0x138>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <xPortStartScheduler+0x138>)
 8004606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004608:	4b1b      	ldr	r3, [pc, #108]	@ (8004678 <xPortStartScheduler+0x138>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <xPortStartScheduler+0x138>)
 8004612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800461c:	4b17      	ldr	r3, [pc, #92]	@ (800467c <xPortStartScheduler+0x13c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <xPortStartScheduler+0x13c>)
 8004622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <xPortStartScheduler+0x13c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a13      	ldr	r2, [pc, #76]	@ (800467c <xPortStartScheduler+0x13c>)
 800462e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004634:	f000 f8da 	bl	80047ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <xPortStartScheduler+0x140>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800463e:	f000 f8f9 	bl	8004834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004642:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <xPortStartScheduler+0x144>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a0f      	ldr	r2, [pc, #60]	@ (8004684 <xPortStartScheduler+0x144>)
 8004648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800464c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800464e:	f7ff ff63 	bl	8004518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004652:	f7ff fd41 	bl	80040d8 <vTaskSwitchContext>
	prvTaskExitError();
 8004656:	f7ff ff19 	bl	800448c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	410fc271 	.word	0x410fc271
 800466c:	410fc270 	.word	0x410fc270
 8004670:	e000e400 	.word	0xe000e400
 8004674:	20000528 	.word	0x20000528
 8004678:	2000052c 	.word	0x2000052c
 800467c:	e000ed20 	.word	0xe000ed20
 8004680:	2000000c 	.word	0x2000000c
 8004684:	e000ef34 	.word	0xe000ef34

08004688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <vPortEnterCritical+0x5c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <vPortEnterCritical+0x5c>)
 80046aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046ac:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <vPortEnterCritical+0x5c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d110      	bne.n	80046d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <vPortEnterCritical+0x60>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	603b      	str	r3, [r7, #0]
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	e7fd      	b.n	80046d2 <vPortEnterCritical+0x4a>
	}
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046f2:	4b12      	ldr	r3, [pc, #72]	@ (800473c <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <vPortExitCritical+0x26>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <vPortExitCritical+0x50>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3b01      	subs	r3, #1
 8004718:	4a08      	ldr	r2, [pc, #32]	@ (800473c <vPortExitCritical+0x50>)
 800471a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <vPortExitCritical+0x50>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <vPortExitCritical+0x44>
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800472e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	2000000c 	.word	0x2000000c

08004740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004740:	f3ef 8009 	mrs	r0, PSP
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <pxCurrentTCBConst>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f01e 0f10 	tst.w	lr, #16
 8004750:	bf08      	it	eq
 8004752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	6010      	str	r0, [r2, #0]
 800475c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004764:	f380 8811 	msr	BASEPRI, r0
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f7ff fcb2 	bl	80040d8 <vTaskSwitchContext>
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f380 8811 	msr	BASEPRI, r0
 800477c:	bc09      	pop	{r0, r3}
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	6808      	ldr	r0, [r1, #0]
 8004782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004786:	f01e 0f10 	tst.w	lr, #16
 800478a:	bf08      	it	eq
 800478c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004790:	f380 8809 	msr	PSP, r0
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	f3af 8000 	nop.w

080047a0 <pxCurrentTCBConst>:
 80047a0:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop

080047a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f7ff fbcf 	bl	8003f64 <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047cc:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <SysTick_Handler+0x40>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f383 8811 	msr	BASEPRI, r3
}
 80047de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <vPortSetupTimerInterrupt+0x34>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <vPortSetupTimerInterrupt+0x38>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <vPortSetupTimerInterrupt+0x3c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <vPortSetupTimerInterrupt+0x40>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <vPortSetupTimerInterrupt+0x44>)
 800480a:	3b01      	subs	r3, #1
 800480c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800480e:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <vPortSetupTimerInterrupt+0x34>)
 8004810:	2207      	movs	r2, #7
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e010 	.word	0xe000e010
 8004824:	e000e018 	.word	0xe000e018
 8004828:	20000000 	.word	0x20000000
 800482c:	10624dd3 	.word	0x10624dd3
 8004830:	e000e014 	.word	0xe000e014

08004834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004844 <vPortEnableVFP+0x10>
 8004838:	6801      	ldr	r1, [r0, #0]
 800483a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800483e:	6001      	str	r1, [r0, #0]
 8004840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004842:	bf00      	nop
 8004844:	e000ed88 	.word	0xe000ed88

08004848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004854:	f7ff fada 	bl	8003e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004858:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <pvPortMalloc+0x184>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004860:	f000 f924 	bl	8004aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004864:	4b5a      	ldr	r3, [pc, #360]	@ (80049d0 <pvPortMalloc+0x188>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 8095 	bne.w	800499c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01e      	beq.n	80048b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004878:	2208      	movs	r2, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d015      	beq.n	80048b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	3308      	adds	r3, #8
 8004892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <pvPortMalloc+0x6e>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	617b      	str	r3, [r7, #20]
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	e7fd      	b.n	80048b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d06f      	beq.n	800499c <pvPortMalloc+0x154>
 80048bc:	4b45      	ldr	r3, [pc, #276]	@ (80049d4 <pvPortMalloc+0x18c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d86a      	bhi.n	800499c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048c6:	4b44      	ldr	r3, [pc, #272]	@ (80049d8 <pvPortMalloc+0x190>)
 80048c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048ca:	4b43      	ldr	r3, [pc, #268]	@ (80049d8 <pvPortMalloc+0x190>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048d0:	e004      	b.n	80048dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d903      	bls.n	80048ee <pvPortMalloc+0xa6>
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f1      	bne.n	80048d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048ee:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <pvPortMalloc+0x184>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d051      	beq.n	800499c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2208      	movs	r2, #8
 80048fe:	4413      	add	r3, r2
 8004900:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	2308      	movs	r3, #8
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	429a      	cmp	r2, r3
 8004918:	d920      	bls.n	800495c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <pvPortMalloc+0xfc>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	613b      	str	r3, [r7, #16]
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004956:	69b8      	ldr	r0, [r7, #24]
 8004958:	f000 f90a 	bl	8004b70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <pvPortMalloc+0x18c>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	4a1b      	ldr	r2, [pc, #108]	@ (80049d4 <pvPortMalloc+0x18c>)
 8004968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800496a:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <pvPortMalloc+0x18c>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <pvPortMalloc+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d203      	bcs.n	800497e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004976:	4b17      	ldr	r3, [pc, #92]	@ (80049d4 <pvPortMalloc+0x18c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <pvPortMalloc+0x194>)
 800497c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <pvPortMalloc+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	431a      	orrs	r2, r3
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004992:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <pvPortMalloc+0x198>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a11      	ldr	r2, [pc, #68]	@ (80049e0 <pvPortMalloc+0x198>)
 800499a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800499c:	f7ff fa44 	bl	8003e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <pvPortMalloc+0x17a>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60fb      	str	r3, [r7, #12]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <pvPortMalloc+0x176>
	return pvReturn;
 80049c2:	69fb      	ldr	r3, [r7, #28]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	@ 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	200010f0 	.word	0x200010f0
 80049d0:	20001104 	.word	0x20001104
 80049d4:	200010f4 	.word	0x200010f4
 80049d8:	200010e8 	.word	0x200010e8
 80049dc:	200010f8 	.word	0x200010f8
 80049e0:	200010fc 	.word	0x200010fc

080049e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d04f      	beq.n	8004a96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049f6:	2308      	movs	r3, #8
 80049f8:	425b      	negs	r3, r3
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4b25      	ldr	r3, [pc, #148]	@ (8004aa0 <vPortFree+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <vPortFree+0x46>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60fb      	str	r3, [r7, #12]
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	e7fd      	b.n	8004a26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <vPortFree+0x66>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60bb      	str	r3, [r7, #8]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <vPortFree+0xbc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01e      	beq.n	8004a96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11a      	bne.n	8004a96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <vPortFree+0xbc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a70:	f7ff f9cc 	bl	8003e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <vPortFree+0xc0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <vPortFree+0xc0>)
 8004a80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a82:	6938      	ldr	r0, [r7, #16]
 8004a84:	f000 f874 	bl	8004b70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a88:	4b07      	ldr	r3, [pc, #28]	@ (8004aa8 <vPortFree+0xc4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4a06      	ldr	r2, [pc, #24]	@ (8004aa8 <vPortFree+0xc4>)
 8004a90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a92:	f7ff f9c9 	bl	8003e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20001104 	.word	0x20001104
 8004aa4:	200010f4 	.word	0x200010f4
 8004aa8:	20001100 	.word	0x20001100

08004aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ab2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ab8:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <prvHeapInit+0xac>)
 8004aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00c      	beq.n	8004ae0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0307 	bic.w	r3, r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <prvHeapInit+0xac>)
 8004adc:	4413      	add	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <prvHeapInit+0xb0>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aea:	4b1c      	ldr	r3, [pc, #112]	@ (8004b5c <prvHeapInit+0xb0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	4413      	add	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004af8:	2208      	movs	r2, #8
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <prvHeapInit+0xb4>)
 8004b0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <prvHeapInit+0xb4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <prvHeapInit+0xb4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <prvHeapInit+0xb4>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4a0a      	ldr	r2, [pc, #40]	@ (8004b64 <prvHeapInit+0xb8>)
 8004b3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <prvHeapInit+0xbc>)
 8004b42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <prvHeapInit+0xc0>)
 8004b46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b4a:	601a      	str	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000530 	.word	0x20000530
 8004b5c:	200010e8 	.word	0x200010e8
 8004b60:	200010f0 	.word	0x200010f0
 8004b64:	200010f8 	.word	0x200010f8
 8004b68:	200010f4 	.word	0x200010f4
 8004b6c:	20001104 	.word	0x20001104

08004b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b78:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <prvInsertBlockIntoFreeList+0xac>)
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	e002      	b.n	8004b84 <prvInsertBlockIntoFreeList+0x14>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d8f7      	bhi.n	8004b7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	4413      	add	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d108      	bne.n	8004bb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	441a      	add	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d118      	bne.n	8004bf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <prvInsertBlockIntoFreeList+0xb0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d00d      	beq.n	8004bee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e008      	b.n	8004c00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bee:	4b0c      	ldr	r3, [pc, #48]	@ (8004c20 <prvInsertBlockIntoFreeList+0xb0>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e003      	b.n	8004c00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d002      	beq.n	8004c0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200010e8 	.word	0x200010e8
 8004c20:	200010f0 	.word	0x200010f0

08004c24 <memset>:
 8004c24:	4402      	add	r2, r0
 8004c26:	4603      	mov	r3, r0
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <memset+0xa>
 8004c2c:	4770      	bx	lr
 8004c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c32:	e7f9      	b.n	8004c28 <memset+0x4>

08004c34 <_reclaim_reent>:
 8004c34:	4b29      	ldr	r3, [pc, #164]	@ (8004cdc <_reclaim_reent+0xa8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4283      	cmp	r3, r0
 8004c3a:	b570      	push	{r4, r5, r6, lr}
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	d04b      	beq.n	8004cd8 <_reclaim_reent+0xa4>
 8004c40:	69c3      	ldr	r3, [r0, #28]
 8004c42:	b1ab      	cbz	r3, 8004c70 <_reclaim_reent+0x3c>
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	b16b      	cbz	r3, 8004c64 <_reclaim_reent+0x30>
 8004c48:	2500      	movs	r5, #0
 8004c4a:	69e3      	ldr	r3, [r4, #28]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	5959      	ldr	r1, [r3, r5]
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d13b      	bne.n	8004ccc <_reclaim_reent+0x98>
 8004c54:	3504      	adds	r5, #4
 8004c56:	2d80      	cmp	r5, #128	@ 0x80
 8004c58:	d1f7      	bne.n	8004c4a <_reclaim_reent+0x16>
 8004c5a:	69e3      	ldr	r3, [r4, #28]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	68d9      	ldr	r1, [r3, #12]
 8004c60:	f000 f864 	bl	8004d2c <_free_r>
 8004c64:	69e3      	ldr	r3, [r4, #28]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	b111      	cbz	r1, 8004c70 <_reclaim_reent+0x3c>
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f85e 	bl	8004d2c <_free_r>
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	b111      	cbz	r1, 8004c7a <_reclaim_reent+0x46>
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 f859 	bl	8004d2c <_free_r>
 8004c7a:	69e1      	ldr	r1, [r4, #28]
 8004c7c:	b111      	cbz	r1, 8004c84 <_reclaim_reent+0x50>
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 f854 	bl	8004d2c <_free_r>
 8004c84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c86:	b111      	cbz	r1, 8004c8e <_reclaim_reent+0x5a>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 f84f 	bl	8004d2c <_free_r>
 8004c8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c90:	b111      	cbz	r1, 8004c98 <_reclaim_reent+0x64>
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 f84a 	bl	8004d2c <_free_r>
 8004c98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004c9a:	b111      	cbz	r1, 8004ca2 <_reclaim_reent+0x6e>
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 f845 	bl	8004d2c <_free_r>
 8004ca2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ca4:	b111      	cbz	r1, 8004cac <_reclaim_reent+0x78>
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 f840 	bl	8004d2c <_free_r>
 8004cac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004cae:	b111      	cbz	r1, 8004cb6 <_reclaim_reent+0x82>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 f83b 	bl	8004d2c <_free_r>
 8004cb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004cb8:	b111      	cbz	r1, 8004cc0 <_reclaim_reent+0x8c>
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 f836 	bl	8004d2c <_free_r>
 8004cc0:	6a23      	ldr	r3, [r4, #32]
 8004cc2:	b14b      	cbz	r3, 8004cd8 <_reclaim_reent+0xa4>
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cca:	4718      	bx	r3
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f000 f82c 	bl	8004d2c <_free_r>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	e7bb      	b.n	8004c50 <_reclaim_reent+0x1c>
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000010 	.word	0x20000010

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 f870 	bl	8004dd8 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08004e98 	.word	0x08004e98
 8004d1c:	08004e98 	.word	0x08004e98
 8004d20:	08004e98 	.word	0x08004e98
 8004d24:	08004e9c 	.word	0x08004e9c

08004d28 <__retarget_lock_acquire_recursive>:
 8004d28:	4770      	bx	lr

08004d2a <__retarget_lock_release_recursive>:
 8004d2a:	4770      	bx	lr

08004d2c <_free_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4605      	mov	r5, r0
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d041      	beq.n	8004db8 <_free_r+0x8c>
 8004d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d38:	1f0c      	subs	r4, r1, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfb8      	it	lt
 8004d3e:	18e4      	addlt	r4, r4, r3
 8004d40:	f000 f83e 	bl	8004dc0 <__malloc_lock>
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <_free_r+0x90>)
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	b933      	cbnz	r3, 8004d58 <_free_r+0x2c>
 8004d4a:	6063      	str	r3, [r4, #4]
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	4628      	mov	r0, r5
 8004d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d54:	f000 b83a 	b.w	8004dcc <__malloc_unlock>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d908      	bls.n	8004d6e <_free_r+0x42>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1809      	addeq	r1, r1, r0
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	e7ed      	b.n	8004d4a <_free_r+0x1e>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x4c>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x42>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1850      	adds	r0, r2, r1
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x6c>
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	4401      	add	r1, r0
 8004d84:	1850      	adds	r0, r2, r1
 8004d86:	4283      	cmp	r3, r0
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1e0      	bne.n	8004d4e <_free_r+0x22>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	4408      	add	r0, r1
 8004d94:	6010      	str	r0, [r2, #0]
 8004d96:	e7da      	b.n	8004d4e <_free_r+0x22>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x74>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	e7d6      	b.n	8004d4e <_free_r+0x22>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1809      	addeq	r1, r1, r0
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7ca      	b.n	8004d4e <_free_r+0x22>
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	20001244 	.word	0x20001244

08004dc0 <__malloc_lock>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	@ (8004dc8 <__malloc_lock+0x8>)
 8004dc2:	f7ff bfb1 	b.w	8004d28 <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	20001240 	.word	0x20001240

08004dcc <__malloc_unlock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	@ (8004dd4 <__malloc_unlock+0x8>)
 8004dce:	f7ff bfac 	b.w	8004d2a <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20001240 	.word	0x20001240

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
