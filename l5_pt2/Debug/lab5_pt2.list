
lab5_pt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006230  08006230  00007230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080062f8  080062f8  000072f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006300  08006300  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006304  08006304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006308  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000060  08006368  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08006368  00008258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017781  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358d  00000000  00000000  0001f811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00022da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fda  00000000  00000000  00024200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288d9  00000000  00000000  000251da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186e3  00000000  00000000  0004dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb062  00000000  00000000  00066196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001611f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  0016123c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  001669b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006218 	.word	0x08006218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006218 	.word	0x08006218

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000090 	.word	0x20000090
 80004f0:	20000130 	.word	0x20000130

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b09a      	sub	sp, #104	@ 0x68
 80004f8:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80004fa:	2300      	movs	r3, #0
 80004fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80004fe:	2300      	movs	r3, #0
 8000500:	667b      	str	r3, [r7, #100]	@ 0x64
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000502:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f003 fa39 	bl	8003980 <osSemaphoreCreate>
 800050e:	4603      	mov	r3, r0
 8000510:	4a24      	ldr	r2, [pc, #144]	@ (80005a4 <MX_FREERTOS_Init+0xb0>)
 8000512:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000514:	2300      	movs	r3, #0
 8000516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000518:	2300      	movs	r3, #0
 800051a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 800051c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fa2c 	bl	8003980 <osSemaphoreCreate>
 8000528:	4603      	mov	r3, r0
 800052a:	4a1f      	ldr	r2, [pc, #124]	@ (80005a8 <MX_FREERTOS_Init+0xb4>)
 800052c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 800052e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_FREERTOS_Init+0xb8>)
 8000530:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000542:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f003 f9b9 	bl	80038c0 <osThreadCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a17      	ldr	r2, [pc, #92]	@ (80005b0 <MX_FREERTOS_Init+0xbc>)
 8000552:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <MX_FREERTOS_Init+0xc0>)
 8000556:	f107 0420 	add.w	r4, r7, #32
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f9a6 	bl	80038c0 <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <MX_FREERTOS_Init+0xc4>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_FREERTOS_Init+0xc8>)
 800057c:	1d3c      	adds	r4, r7, #4
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f995 	bl	80038c0 <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <MX_FREERTOS_Init+0xcc>)
 800059a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800059c:	bf00      	nop
 800059e:	3768      	adds	r7, #104	@ 0x68
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bdb0      	pop	{r4, r5, r7, pc}
 80005a4:	20000088 	.word	0x20000088
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	0800623c 	.word	0x0800623c
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	08006264 	.word	0x08006264
 80005b8:	20000080 	.word	0x20000080
 80005bc:	0800628c 	.word	0x0800628c
 80005c0:	20000084 	.word	0x20000084

080005c4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <StartTask01+0x54>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fa05 	bl	80039e4 <osSemaphoreWait>
	  for (int i = 0; i < 10; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e017      	b.n	8000610 <StartTask01+0x4c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f000 fdcf 	bl	800118c <HAL_GPIO_WritePin>
	  	  osDelay(250);
 80005ee:	20fa      	movs	r0, #250	@ 0xfa
 80005f0:	f003 f9b2 	bl	8003958 <osDelay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f000 fdc5 	bl	800118c <HAL_GPIO_WritePin>
	  	  osDelay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000606:	f003 f9a7 	bl	8003958 <osDelay>
	  for (int i = 0; i < 10; i++){
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b09      	cmp	r3, #9
 8000614:	dde4      	ble.n	80005e0 <StartTask01+0x1c>
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8000616:	e7d9      	b.n	80005cc <StartTask01+0x8>
 8000618:	20000088 	.word	0x20000088

0800061c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <StartTask02+0x54>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f04f 31ff 	mov.w	r1, #4294967295
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f9d9 	bl	80039e4 <osSemaphoreWait>
	  for (int i = 0; i < 10; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	e016      	b.n	8000666 <StartTask02+0x4a>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f000 fda3 	bl	800118c <HAL_GPIO_WritePin>
	  	osDelay(250);
 8000646:	20fa      	movs	r0, #250	@ 0xfa
 8000648:	f003 f986 	bl	8003958 <osDelay>
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000656:	f000 fd99 	bl	800118c <HAL_GPIO_WritePin>
	  	osDelay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f003 f97c 	bl	8003958 <osDelay>
	  for (int i = 0; i < 10; i++){
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b09      	cmp	r3, #9
 800066a:	dde5      	ble.n	8000638 <StartTask02+0x1c>
	  osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 800066c:	e7da      	b.n	8000624 <StartTask02+0x8>
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c

08000674 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f003 f96b 	bl	8003958 <osDelay>
 8000682:	e7fb      	b.n	800067c <StartTask03+0x8>

08000684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b3a      	ldr	r3, [pc, #232]	@ (8000784 <MX_GPIO_Init+0x100>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a39      	ldr	r2, [pc, #228]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	4b34      	ldr	r3, [pc, #208]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a33      	ldr	r2, [pc, #204]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a27      	ldr	r2, [pc, #156]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <MX_GPIO_Init+0x100>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|led1_Pin|led2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8000700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000704:	f000 fd42 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	481e      	ldr	r0, [pc, #120]	@ (8000788 <MX_GPIO_Init+0x104>)
 800070e:	f000 fd3d 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	4818      	ldr	r0, [pc, #96]	@ (800078c <MX_GPIO_Init+0x108>)
 800072a:	f000 fb85 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|led1_Pin|led2_Pin;
 800072e:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074a:	f000 fb75 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led3_Pin;
 800074e:	2320      	movs	r3, #32
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led3_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <MX_GPIO_Init+0x104>)
 8000766:	f000 fb67 	bl	8000e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2028      	movs	r0, #40	@ 0x28
 8000770:	f000 fb38 	bl	8000de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000774:	2028      	movs	r0, #40	@ 0x28
 8000776:	f000 fb51 	bl	8000e1c <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400
 800078c:	48000800 	.word	0x48000800

08000790 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin){
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a0:	d117      	bne.n	80007d2 <HAL_GPIO_EXTI_Callback+0x42>
		static bool prev_val;
		if (prev_val == false){
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f083 0301 	eor.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d008      	beq.n	80007c2 <HAL_GPIO_EXTI_Callback+0x32>
			osSemaphoreRelease(myBinarySem01Handle);
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0x50>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 f963 	bl	8003a80 <osSemaphoreRelease>
			prev_val = true;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(myBinarySem02Handle);
			prev_val = false;
		}
	}

}
 80007c0:	e007      	b.n	80007d2 <HAL_GPIO_EXTI_Callback+0x42>
			osSemaphoreRelease(myBinarySem02Handle);
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <HAL_GPIO_EXTI_Callback+0x54>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 f95a 	bl	8003a80 <osSemaphoreRelease>
			prev_val = false;
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000330 	.word	0x20000330
 80007e0:	20000088 	.word	0x20000088
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fa02 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f80a 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff ff46 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f8:	f000 f946 	bl	8000a88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007fc:	f7ff fe7a 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000800:	f003 f857 	bl	80038b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <main+0x1c>

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	@ 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f005 fc16 	bl	8006048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800082e:	f000 fceb 	bl	8001208 <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f000 f84a 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000844:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2310      	movs	r3, #16
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000856:	230a      	movs	r3, #10
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085a:	2307      	movs	r3, #7
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd22 	bl	80012b4 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000876:	f000 f82b 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f8ea 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089e:	f000 f817 	bl	80008d0 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3758      	adds	r7, #88	@ 0x58
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008be:	f000 f9b9 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40012c00 	.word	0x40012c00

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fa63 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800093a:	4b2e      	ldr	r3, [pc, #184]	@ (80009f4 <HAL_InitTick+0xc8>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	4a2d      	ldr	r2, [pc, #180]	@ (80009f4 <HAL_InitTick+0xc8>)
 8000940:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000944:	6613      	str	r3, [r2, #96]	@ 0x60
 8000946:	4b2b      	ldr	r3, [pc, #172]	@ (80009f4 <HAL_InitTick+0xc8>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000952:	f107 020c 	add.w	r2, r7, #12
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa49 	bl	8001df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000962:	f001 fa31 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8000966:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800096a:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <HAL_InitTick+0xcc>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	0c9b      	lsrs	r3, r3, #18
 8000972:	3b01      	subs	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000976:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <HAL_InitTick+0xd0>)
 8000978:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <HAL_InitTick+0xd4>)
 800097a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <HAL_InitTick+0xd0>)
 800097e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000984:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <HAL_InitTick+0xd0>)
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_InitTick+0xd0>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <HAL_InitTick+0xd0>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_InitTick+0xd0>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800099c:	4817      	ldr	r0, [pc, #92]	@ (80009fc <HAL_InitTick+0xd0>)
 800099e:	f001 ff77 	bl	8002890 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d11b      	bne.n	80009e8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <HAL_InitTick+0xd0>)
 80009b2:	f001 ffcf 	bl	8002954 <HAL_TIM_Base_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d111      	bne.n	80009e8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009c4:	2019      	movs	r0, #25
 80009c6:	f000 fa29 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d808      	bhi.n	80009e2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2019      	movs	r0, #25
 80009d6:	f000 fa05 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_InitTick+0xd8>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e002      	b.n	80009e8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3730      	adds	r7, #48	@ 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	20000334 	.word	0x20000334
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	20000004 	.word	0x20000004

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a46:	f001 fff5 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000334 	.word	0x20000334

08000a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a5c:	f000 fbae 	bl	80011bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <MX_USART2_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000acc:	f002 f9a6 	bl	8002e1c <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f7ff fefb 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000380 	.word	0x20000380
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ac      	sub	sp, #176	@ 0xb0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2288      	movs	r2, #136	@ 0x88
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fa9d 	bl	8006048 <memset>
  if(uartHandle->Instance==USART2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_UART_MspInit+0xb0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13b      	bne.n	8000b90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f9f7 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff fece 	bl	80008d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b64:	230c      	movs	r3, #12
 8000b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8c:	f000 f954 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	37b0      	adds	r7, #176	@ 0xb0
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ff5e 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f005 fa99 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fe09 	bl	80007e8 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000be4:	08006308 	.word	0x08006308
  ldr r2, =_sbss
 8000be8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bec:	20001258 	.word	0x20001258

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_Init+0x3c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_Init+0x3c>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f8df 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c10:	200f      	movs	r0, #15
 8000c12:	f7ff fe8b 	bl	800092c <HAL_InitTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	e001      	b.n	8000c26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c22:	f7ff fe5b 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000408 	.word	0x20000408

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000408 	.word	0x20000408

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e17f      	b.n	8001148 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8171 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d118      	bne.n	8000f18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ac 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b5f      	ldr	r3, [pc, #380]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	4a5e      	ldr	r2, [pc, #376]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001002:	4a5a      	ldr	r2, [pc, #360]	@ (800116c <HAL_GPIO_Init+0x334>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x242>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4e      	ldr	r2, [pc, #312]	@ (8001174 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4c      	ldr	r2, [pc, #304]	@ (800117c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4b      	ldr	r2, [pc, #300]	@ (8001180 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x22a>
 800105e:	2306      	movs	r3, #6
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001062:	2307      	movs	r3, #7
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x244>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108c:	4937      	ldr	r1, [pc, #220]	@ (800116c <HAL_GPIO_Init+0x334>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109a:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010be:	4a32      	ldr	r2, [pc, #200]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <HAL_GPIO_Init+0x350>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae78 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	48001400 	.word	0x48001400
 8001184:	48001800 	.word	0x48001800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fad8 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001216:	d130      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001224:	d038      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800122e:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2232      	movs	r2, #50	@ 0x32
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124c:	e002      	b.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3b01      	subs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001260:	d102      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f2      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001274:	d110      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e00f      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001286:	d007      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001296:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40007000 	.word	0x40007000
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e3ca      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4b97      	ldr	r3, [pc, #604]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b94      	ldr	r3, [pc, #592]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80e4 	beq.w	80014b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_RCC_OscConfig+0x4a>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	f040 808b 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	f040 8087 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fe:	4b89      	ldr	r3, [pc, #548]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x62>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e3a2      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_RCC_OscConfig+0x7c>
 8001326:	4b7f      	ldr	r3, [pc, #508]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800132e:	e005      	b.n	800133c <HAL_RCC_OscConfig+0x88>
 8001330:	4b7c      	ldr	r3, [pc, #496]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800133c:	4293      	cmp	r3, r2
 800133e:	d223      	bcs.n	8001388 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fd87 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e383      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a72      	ldr	r2, [pc, #456]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	496d      	ldr	r1, [pc, #436]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001372:	4b6c      	ldr	r3, [pc, #432]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4968      	ldr	r1, [pc, #416]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	e025      	b.n	80013d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b63      	ldr	r3, [pc, #396]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4960      	ldr	r1, [pc, #384]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	495b      	ldr	r1, [pc, #364]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fd47 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e343      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d4:	f000 fc4a 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	4950      	ldr	r1, [pc, #320]	@ (8001528 <HAL_RCC_OscConfig+0x274>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a4e      	ldr	r2, [pc, #312]	@ (800152c <HAL_RCC_OscConfig+0x278>)
 80013f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001530 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fa97 	bl	800092c <HAL_InitTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d052      	beq.n	80014ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	e327      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d032      	beq.n	800147a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001414:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a42      	ldr	r2, [pc, #264]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc1c 	bl	8000c5c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001428:	f7ff fc18 	bl	8000c5c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e310      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143a:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a36      	ldr	r2, [pc, #216]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4931      	ldr	r1, [pc, #196]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	492c      	ldr	r1, [pc, #176]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e01a      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001486:	f7ff fbe9 	bl	8000c5c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800148e:	f7ff fbe5 	bl	8000c5c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e2dd      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x1da>
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d074      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x21a>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d064      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d160      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2ba      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x24a>
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e026      	b.n	800154c <HAL_RCC_OscConfig+0x298>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x280>
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800150e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a02      	ldr	r2, [pc, #8]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x298>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	080062b0 	.word	0x080062b0
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	4ba0      	ldr	r3, [pc, #640]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9f      	ldr	r2, [pc, #636]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b9d      	ldr	r3, [pc, #628]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a9c      	ldr	r2, [pc, #624]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb82 	bl	8000c5c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb7e 	bl	8000c5c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	@ 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e276      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4b92      	ldr	r3, [pc, #584]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb6e 	bl	8000c5c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb6a 	bl	8000c5c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e262      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x2d0>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d060      	beq.n	8001674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x310>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	4b7c      	ldr	r3, [pc, #496]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x328>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e23f      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	4973      	ldr	r1, [pc, #460]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	e040      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d023      	beq.n	8001642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fa:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6e      	ldr	r2, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fb29 	bl	8000c5c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fb25 	bl	8000c5c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e21d      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	4b65      	ldr	r3, [pc, #404]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b62      	ldr	r3, [pc, #392]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	495f      	ldr	r1, [pc, #380]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5c      	ldr	r2, [pc, #368]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fb05 	bl	8000c5c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fb01 	bl	8000c5c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1f9      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d03c      	beq.n	80016fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168e:	4a4a      	ldr	r2, [pc, #296]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fae0 	bl	8000c5c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fadc 	bl	8000c5c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1d4      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCC_OscConfig+0x3ec>
 80016c0:	e01b      	b.n	80016fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c8:	4a3b      	ldr	r2, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fac3 	bl	8000c5c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fabf 	bl	8000c5c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1b7      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ef      	bne.n	80016da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80a6 	beq.w	8001854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	4a26      	ldr	r2, [pc, #152]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6593      	str	r3, [r2, #88]	@ 0x58
 8001724:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d118      	bne.n	8001772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001740:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7ff fa86 	bl	8000c5c <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff fa82 	bl	8000c5c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e17a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x4d8>
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178a:	e029      	b.n	80017e0 <HAL_RCC_OscConfig+0x52c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d115      	bne.n	80017c0 <HAL_RCC_OscConfig+0x50c>
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x52c>
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a9b      	ldr	r2, [pc, #620]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d0:	4b98      	ldr	r3, [pc, #608]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	4a97      	ldr	r2, [pc, #604]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d016      	beq.n	8001816 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa38 	bl	8000c5c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa34 	bl	8000c5c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e12a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001806:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ed      	beq.n	80017f0 <HAL_RCC_OscConfig+0x53c>
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fa21 	bl	8000c5c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fa1d 	bl	8000c5c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e113      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001834:	4b7f      	ldr	r3, [pc, #508]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ed      	bne.n	800181e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7ffb      	ldrb	r3, [r7, #31]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	4a79      	ldr	r2, [pc, #484]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001852:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80fe 	beq.w	8001a5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	2b02      	cmp	r3, #2
 8001864:	f040 80d0 	bne.w	8001a08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001868:	4b72      	ldr	r3, [pc, #456]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d130      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	3b01      	subs	r3, #1
 8001888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d127      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11f      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018a8:	2a07      	cmp	r2, #7
 80018aa:	bf14      	ite	ne
 80018ac:	2201      	movne	r2, #1
 80018ae:	2200      	moveq	r2, #0
 80018b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d06e      	beq.n	80019bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d069      	beq.n	80019b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f0:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0ad      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001900:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f9a6 	bl	8000c5c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f9a2 	bl	8000c5c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e09a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001926:	4b43      	ldr	r3, [pc, #268]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001932:	4b40      	ldr	r3, [pc, #256]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x784>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001942:	3a01      	subs	r2, #1
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800194c:	0212      	lsls	r2, r2, #8
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	0552      	lsls	r2, r2, #21
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001960:	0852      	lsrs	r2, r2, #1
 8001962:	3a01      	subs	r2, #1
 8001964:	0652      	lsls	r2, r2, #25
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800196c:	0912      	lsrs	r2, r2, #4
 800196e:	0452      	lsls	r2, r2, #17
 8001970:	430a      	orrs	r2, r1
 8001972:	4930      	ldr	r1, [pc, #192]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a2a      	ldr	r2, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f964 	bl	8000c5c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f960 	bl	8000c5c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	e050      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04f      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d148      	bne.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e0:	f7ff f93c 	bl	8000c5c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f938 	bl	8000c5c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e030      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x734>
 8001a06:	e028      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d023      	beq.n	8001a56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f91f 	bl	8000c5c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e00c      	b.n	8001a3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f91b 	bl	8000c5c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d905      	bls.n	8001a3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e013      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ec      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4905      	ldr	r1, [pc, #20]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x7b4>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e001      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	feeefffc 	.word	0xfeeefffc

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e7      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4970      	ldr	r1, [pc, #448]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cf      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4960      	ldr	r1, [pc, #384]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04c      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	4b4e      	ldr	r3, [pc, #312]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e086      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4943      	ldr	r1, [pc, #268]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7ff f882 	bl	8000c5c <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f87e 	bl	8000c5c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e06e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d208      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	492b      	ldr	r1, [pc, #172]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb2:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d210      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0207 	bic.w	r2, r3, #7
 8001bc8:	4923      	ldr	r1, [pc, #140]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e036      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4918      	ldr	r1, [pc, #96]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4910      	ldr	r1, [pc, #64]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c20:	f000 f824 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	490b      	ldr	r1, [pc, #44]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fe71 	bl	800092c <HAL_InitTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	080062b0 	.word	0x080062b0
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d121      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d11e      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e004      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d134      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e002      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fb03 f202 	mul.w	r2, r3, r2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d64:	69bb      	ldr	r3, [r7, #24]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080062c8 	.word	0x080062c8
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4904      	ldr	r1, [pc, #16]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080062c0 	.word	0x080062c0

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dcc:	f7ff ffda 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	080062c0 	.word	0x080062c0

08001df4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	220f      	movs	r2, #15
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_RCC_GetClockConfig+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40022000 	.word	0x40022000

08001e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e70:	f7ff f9bc 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001e74:	6178      	str	r0, [r7, #20]
 8001e76:	e014      	b.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a24      	ldr	r2, [pc, #144]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f9ac 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea8:	d10b      	bne.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	@ 0x80
 8001eae:	d919      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb4:	d902      	bls.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e013      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e010      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	@ 0x80
 8001ec6:	d902      	bls.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec8:	2303      	movs	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e00a      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	@ 0x80
 8001ed2:	d102      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e004      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b70      	cmp	r3, #112	@ 0x70
 8001ede:	d101      	bne.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 0207 	bic.w	r2, r3, #7
 8001eec:	4909      	ldr	r1, [pc, #36]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d041      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f3c:	d02a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f42:	d824      	bhi.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f48:	d008      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f4e:	d81e      	bhi.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f58:	d010      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f5c:	4b86      	ldr	r3, [pc, #536]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a85      	ldr	r2, [pc, #532]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f68:	e015      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fabb 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8001f76:	4603      	mov	r3, r0
 8001f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7a:	e00c      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3320      	adds	r3, #32
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fba6 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8c:	e003      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	74fb      	strb	r3, [r7, #19]
      break;
 8001f92:	e000      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f9c:	4b76      	ldr	r3, [pc, #472]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001faa:	4973      	ldr	r1, [pc, #460]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fb2:	e001      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d041      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fcc:	d02a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd2:	d824      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fd8:	d008      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fde:	d81e      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe8:	d010      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fea:	e018      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fec:	4b62      	ldr	r3, [pc, #392]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a61      	ldr	r2, [pc, #388]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ff8:	e015      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fa73 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8002006:	4603      	mov	r3, r0
 8002008:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200a:	e00c      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3320      	adds	r3, #32
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fb5e 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201c:	e003      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	74fb      	strb	r3, [r7, #19]
      break;
 8002022:	e000      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800202c:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203a:	494f      	ldr	r1, [pc, #316]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002042:	e001      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a0 	beq.w	8002196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205a:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	4a40      	ldr	r2, [pc, #256]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	@ 0x58
 800207c:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3a      	ldr	r2, [pc, #232]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002098:	f7fe fde0 	bl	8000c5c <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fddc 	bl	8000c5c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d902      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	74fb      	strb	r3, [r7, #19]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ef      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15c      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01f      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d019      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fd9b 	bl	8000c5c <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	e00b      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fd97 	bl	8000c5c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d902      	bls.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	74fb      	strb	r3, [r7, #19]
            break;
 8002140:	e006      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ec      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002166:	4904      	ldr	r1, [pc, #16]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800216e:	e009      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
 8002174:	e006      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002184:	7c7b      	ldrb	r3, [r7, #17]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b9e      	ldr	r3, [pc, #632]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	4a9d      	ldr	r2, [pc, #628]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a2:	4b98      	ldr	r3, [pc, #608]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f023 0203 	bic.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	4994      	ldr	r1, [pc, #592]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 020c 	bic.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d2:	498c      	ldr	r1, [pc, #560]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e6:	4b87      	ldr	r3, [pc, #540]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4983      	ldr	r1, [pc, #524]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002208:	4b7e      	ldr	r3, [pc, #504]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	497b      	ldr	r1, [pc, #492]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222a:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002238:	4972      	ldr	r1, [pc, #456]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224c:	4b6d      	ldr	r3, [pc, #436]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	496a      	ldr	r1, [pc, #424]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226e:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	4961      	ldr	r1, [pc, #388]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229e:	4959      	ldr	r1, [pc, #356]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b2:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c0:	4950      	ldr	r1, [pc, #320]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	4948      	ldr	r1, [pc, #288]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	493f      	ldr	r1, [pc, #252]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d028      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	4937      	ldr	r1, [pc, #220]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002336:	d106      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
 8002344:	e011      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800234e:	d10c      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f8c8 	bl	80024ec <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002384:	491f      	ldr	r1, [pc, #124]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002394:	d106      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002396:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a0:	60d3      	str	r3, [r2, #12]
 80023a2:	e011      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f899 	bl	80024ec <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d02b      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f2:	d109      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a02      	ldr	r2, [pc, #8]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
 8002400:	e014      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f867 	bl	80024ec <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02f      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002446:	4928      	ldr	r1, [pc, #160]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002456:	d10d      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f844 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d014      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	74bb      	strb	r3, [r7, #18]
 8002472:	e011      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3320      	adds	r3, #32
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f925 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b2:	490d      	ldr	r1, [pc, #52]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024d6:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024de:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fa:	4b75      	ldr	r3, [pc, #468]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002506:	4b72      	ldr	r3, [pc, #456]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
       ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800251e:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
       ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d047      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e044      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d018      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0x86>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d825      	bhi.n	8002590 <RCCEx_PLLSAI1_Config+0xa4>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d002      	beq.n	800254e <RCCEx_PLLSAI1_Config+0x62>
 8002548:	2b02      	cmp	r3, #2
 800254a:	d009      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x74>
 800254c:	e020      	b.n	8002590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e01a      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002560:	4b5b      	ldr	r3, [pc, #364]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e013      	b.n	800259a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002572:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800257e:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800258e:	e006      	b.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e004      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025a6:	4b4a      	ldr	r3, [pc, #296]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	430b      	orrs	r3, r1
 80025bc:	4944      	ldr	r1, [pc, #272]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d17d      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025c8:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a40      	ldr	r2, [pc, #256]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fb42 	bl	8000c5c <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025da:	e009      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025dc:	f7fe fb3e 	bl	8000c5c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	73fb      	strb	r3, [r7, #15]
        break;
 80025ee:	e005      	b.n	80025fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f0:	4b37      	ldr	r3, [pc, #220]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ef      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d160      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002608:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	0211      	lsls	r1, r2, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	0912      	lsrs	r2, r2, #4
 8002620:	0452      	lsls	r2, r2, #17
 8002622:	430a      	orrs	r2, r1
 8002624:	492a      	ldr	r1, [pc, #168]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	610b      	str	r3, [r1, #16]
 800262a:	e027      	b.n	800267c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d112      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002632:	4b27      	ldr	r3, [pc, #156]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800263a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	0211      	lsls	r1, r2, #8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6912      	ldr	r2, [r2, #16]
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0552      	lsls	r2, r2, #21
 800264e:	430a      	orrs	r2, r1
 8002650:	491f      	ldr	r1, [pc, #124]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	610b      	str	r3, [r1, #16]
 8002656:	e011      	b.n	800267c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002660:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	0211      	lsls	r1, r2, #8
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6952      	ldr	r2, [r2, #20]
 800266e:	0852      	lsrs	r2, r2, #1
 8002670:	3a01      	subs	r2, #1
 8002672:	0652      	lsls	r2, r2, #25
 8002674:	430a      	orrs	r2, r1
 8002676:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fae8 	bl	8000c5c <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002690:	f7fe fae4 	bl	8000c5c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
          break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ef      	beq.n	8002690 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e2:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ee:	4b67      	ldr	r3, [pc, #412]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10d      	bne.n	800271a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
       ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002706:	4b61      	ldr	r3, [pc, #388]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
       ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d047      	beq.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e044      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d018      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x86>
 8002728:	2b03      	cmp	r3, #3
 800272a:	d825      	bhi.n	8002778 <RCCEx_PLLSAI2_Config+0xa4>
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <RCCEx_PLLSAI2_Config+0x62>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d009      	beq.n	8002748 <RCCEx_PLLSAI2_Config+0x74>
 8002734:	e020      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002736:	4b55      	ldr	r3, [pc, #340]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e01a      	b.n	800277e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002748:	4b50      	ldr	r3, [pc, #320]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d116      	bne.n	8002782 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e013      	b.n	8002782 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275a:	4b4c      	ldr	r3, [pc, #304]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	4b49      	ldr	r3, [pc, #292]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002776:	e006      	b.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e004      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002786:	bf00      	nop
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800278e:	4b3f      	ldr	r3, [pc, #252]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	430b      	orrs	r3, r1
 80027a4:	4939      	ldr	r1, [pc, #228]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d167      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027b0:	4b36      	ldr	r3, [pc, #216]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a35      	ldr	r2, [pc, #212]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7fe fa4e 	bl	8000c5c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c4:	f7fe fa4a 	bl	8000c5c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
        break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d8:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ef      	bne.n	80027c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d14a      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6892      	ldr	r2, [r2, #8]
 8002800:	0211      	lsls	r1, r2, #8
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	0912      	lsrs	r2, r2, #4
 8002808:	0452      	lsls	r2, r2, #17
 800280a:	430a      	orrs	r2, r1
 800280c:	491f      	ldr	r1, [pc, #124]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	614b      	str	r3, [r1, #20]
 8002812:	e011      	b.n	8002838 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002814:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800281c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	0211      	lsls	r1, r2, #8
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6912      	ldr	r2, [r2, #16]
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0652      	lsls	r2, r2, #25
 8002830:	430a      	orrs	r2, r1
 8002832:	4916      	ldr	r1, [pc, #88]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a13      	ldr	r2, [pc, #76]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fa0a 	bl	8000c5c <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284a:	e009      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800284c:	f7fe fa06 	bl	8000c5c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	73fb      	strb	r3, [r7, #15]
          break;
 800285e:	e005      	b.n	800286c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ef      	beq.n	800284c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4904      	ldr	r1, [pc, #16]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e049      	b.n	8002936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f841 	bl	800293e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f9e0 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002996:	d018      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	@ (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d015      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e2:	d011      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	e008      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40013400 	.word	0x40013400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	00010007 	.word	0x00010007

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e9 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8db 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8ec 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c3 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b5 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8c6 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0208 	mvn.w	r2, #8
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89d 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f88f 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8a0 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0210 	mvn.w	r2, #16
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2208      	movs	r2, #8
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f877 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f869 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f87a 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0201 	mvn.w	r2, #1
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fe86 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f913 	bl	8002df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f90b 	bl	8002e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f834 	bl	8002c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0220 	mvn.w	r2, #32
 8002c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8d3 	bl	8002de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a46      	ldr	r2, [pc, #280]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d00f      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a43      	ldr	r2, [pc, #268]	@ (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a42      	ldr	r2, [pc, #264]	@ (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <TIM_Base_SetConfig+0x138>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a35      	ldr	r2, [pc, #212]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a31      	ldr	r2, [pc, #196]	@ (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a30      	ldr	r2, [pc, #192]	@ (8002dcc <TIM_Base_SetConfig+0x138>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd4 <TIM_Base_SetConfig+0x140>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <TIM_Base_SetConfig+0x144>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	@ (8002ddc <TIM_Base_SetConfig+0x148>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <TIM_Base_SetConfig+0x140>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <TIM_Base_SetConfig+0x144>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <TIM_Base_SetConfig+0x148>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]
  }
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800
 8002dcc:	40000c00 	.word	0x40000c00
 8002dd0:	40013400 	.word	0x40013400
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800

08002de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e040      	b.n	8002eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fe52 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fae0 	bl	8003428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f825 	bl	8002eb8 <UART_SetConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e01b      	b.n	8002eb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb5f 	bl	800356c <UART_CheckIdleState>
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b08a      	sub	sp, #40	@ 0x28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4ba4      	ldr	r3, [pc, #656]	@ (8003178 <UART_SetConfig+0x2c0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a99      	ldr	r2, [pc, #612]	@ (800317c <UART_SetConfig+0x2c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	4313      	orrs	r3, r2
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a90      	ldr	r2, [pc, #576]	@ (8003180 <UART_SetConfig+0x2c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d126      	bne.n	8002f90 <UART_SetConfig+0xd8>
 8002f42:	4b90      	ldr	r3, [pc, #576]	@ (8003184 <UART_SetConfig+0x2cc>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d81b      	bhi.n	8002f88 <UART_SetConfig+0xd0>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <UART_SetConfig+0xa0>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f69 	.word	0x08002f69
 8002f5c:	08002f79 	.word	0x08002f79
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f81 	.word	0x08002f81
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6e:	e116      	b.n	800319e <UART_SetConfig+0x2e6>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e112      	b.n	800319e <UART_SetConfig+0x2e6>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e10e      	b.n	800319e <UART_SetConfig+0x2e6>
 8002f80:	2308      	movs	r3, #8
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e10a      	b.n	800319e <UART_SetConfig+0x2e6>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e106      	b.n	800319e <UART_SetConfig+0x2e6>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a7c      	ldr	r2, [pc, #496]	@ (8003188 <UART_SetConfig+0x2d0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d138      	bne.n	800300c <UART_SetConfig+0x154>
 8002f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003184 <UART_SetConfig+0x2cc>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d82d      	bhi.n	8003004 <UART_SetConfig+0x14c>
 8002fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0xf8>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003005 	.word	0x08003005
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08003005 	.word	0x08003005
 8002fcc:	08003005 	.word	0x08003005
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	08003005 	.word	0x08003005
 8002fd8:	08003005 	.word	0x08003005
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	08002ffd 	.word	0x08002ffd
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e0d8      	b.n	800319e <UART_SetConfig+0x2e6>
 8002fec:	2302      	movs	r3, #2
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff2:	e0d4      	b.n	800319e <UART_SetConfig+0x2e6>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffa:	e0d0      	b.n	800319e <UART_SetConfig+0x2e6>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e0cc      	b.n	800319e <UART_SetConfig+0x2e6>
 8003004:	2310      	movs	r3, #16
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e0c8      	b.n	800319e <UART_SetConfig+0x2e6>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5e      	ldr	r2, [pc, #376]	@ (800318c <UART_SetConfig+0x2d4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d125      	bne.n	8003062 <UART_SetConfig+0x1aa>
 8003016:	4b5b      	ldr	r3, [pc, #364]	@ (8003184 <UART_SetConfig+0x2cc>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003020:	2b30      	cmp	r3, #48	@ 0x30
 8003022:	d016      	beq.n	8003052 <UART_SetConfig+0x19a>
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d818      	bhi.n	800305a <UART_SetConfig+0x1a2>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d00a      	beq.n	8003042 <UART_SetConfig+0x18a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d814      	bhi.n	800305a <UART_SetConfig+0x1a2>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <UART_SetConfig+0x182>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d008      	beq.n	800304a <UART_SetConfig+0x192>
 8003038:	e00f      	b.n	800305a <UART_SetConfig+0x1a2>
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003040:	e0ad      	b.n	800319e <UART_SetConfig+0x2e6>
 8003042:	2302      	movs	r3, #2
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003048:	e0a9      	b.n	800319e <UART_SetConfig+0x2e6>
 800304a:	2304      	movs	r3, #4
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003050:	e0a5      	b.n	800319e <UART_SetConfig+0x2e6>
 8003052:	2308      	movs	r3, #8
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003058:	e0a1      	b.n	800319e <UART_SetConfig+0x2e6>
 800305a:	2310      	movs	r3, #16
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003060:	e09d      	b.n	800319e <UART_SetConfig+0x2e6>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4a      	ldr	r2, [pc, #296]	@ (8003190 <UART_SetConfig+0x2d8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d125      	bne.n	80030b8 <UART_SetConfig+0x200>
 800306c:	4b45      	ldr	r3, [pc, #276]	@ (8003184 <UART_SetConfig+0x2cc>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003076:	2bc0      	cmp	r3, #192	@ 0xc0
 8003078:	d016      	beq.n	80030a8 <UART_SetConfig+0x1f0>
 800307a:	2bc0      	cmp	r3, #192	@ 0xc0
 800307c:	d818      	bhi.n	80030b0 <UART_SetConfig+0x1f8>
 800307e:	2b80      	cmp	r3, #128	@ 0x80
 8003080:	d00a      	beq.n	8003098 <UART_SetConfig+0x1e0>
 8003082:	2b80      	cmp	r3, #128	@ 0x80
 8003084:	d814      	bhi.n	80030b0 <UART_SetConfig+0x1f8>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <UART_SetConfig+0x1d8>
 800308a:	2b40      	cmp	r3, #64	@ 0x40
 800308c:	d008      	beq.n	80030a0 <UART_SetConfig+0x1e8>
 800308e:	e00f      	b.n	80030b0 <UART_SetConfig+0x1f8>
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e082      	b.n	800319e <UART_SetConfig+0x2e6>
 8003098:	2302      	movs	r3, #2
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e07e      	b.n	800319e <UART_SetConfig+0x2e6>
 80030a0:	2304      	movs	r3, #4
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e07a      	b.n	800319e <UART_SetConfig+0x2e6>
 80030a8:	2308      	movs	r3, #8
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e076      	b.n	800319e <UART_SetConfig+0x2e6>
 80030b0:	2310      	movs	r3, #16
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e072      	b.n	800319e <UART_SetConfig+0x2e6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	@ (8003194 <UART_SetConfig+0x2dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12a      	bne.n	8003118 <UART_SetConfig+0x260>
 80030c2:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <UART_SetConfig+0x2cc>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d0:	d01a      	beq.n	8003108 <UART_SetConfig+0x250>
 80030d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d6:	d81b      	bhi.n	8003110 <UART_SetConfig+0x258>
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030dc:	d00c      	beq.n	80030f8 <UART_SetConfig+0x240>
 80030de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e2:	d815      	bhi.n	8003110 <UART_SetConfig+0x258>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <UART_SetConfig+0x238>
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ec:	d008      	beq.n	8003100 <UART_SetConfig+0x248>
 80030ee:	e00f      	b.n	8003110 <UART_SetConfig+0x258>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e052      	b.n	800319e <UART_SetConfig+0x2e6>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e04e      	b.n	800319e <UART_SetConfig+0x2e6>
 8003100:	2304      	movs	r3, #4
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e04a      	b.n	800319e <UART_SetConfig+0x2e6>
 8003108:	2308      	movs	r3, #8
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e046      	b.n	800319e <UART_SetConfig+0x2e6>
 8003110:	2310      	movs	r3, #16
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e042      	b.n	800319e <UART_SetConfig+0x2e6>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a17      	ldr	r2, [pc, #92]	@ (800317c <UART_SetConfig+0x2c4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d13a      	bne.n	8003198 <UART_SetConfig+0x2e0>
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <UART_SetConfig+0x2cc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800312c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003130:	d01a      	beq.n	8003168 <UART_SetConfig+0x2b0>
 8003132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003136:	d81b      	bhi.n	8003170 <UART_SetConfig+0x2b8>
 8003138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313c:	d00c      	beq.n	8003158 <UART_SetConfig+0x2a0>
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003142:	d815      	bhi.n	8003170 <UART_SetConfig+0x2b8>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <UART_SetConfig+0x298>
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314c:	d008      	beq.n	8003160 <UART_SetConfig+0x2a8>
 800314e:	e00f      	b.n	8003170 <UART_SetConfig+0x2b8>
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003156:	e022      	b.n	800319e <UART_SetConfig+0x2e6>
 8003158:	2302      	movs	r3, #2
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e01e      	b.n	800319e <UART_SetConfig+0x2e6>
 8003160:	2304      	movs	r3, #4
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e01a      	b.n	800319e <UART_SetConfig+0x2e6>
 8003168:	2308      	movs	r3, #8
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e016      	b.n	800319e <UART_SetConfig+0x2e6>
 8003170:	2310      	movs	r3, #16
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e012      	b.n	800319e <UART_SetConfig+0x2e6>
 8003178:	efff69f3 	.word	0xefff69f3
 800317c:	40008000 	.word	0x40008000
 8003180:	40013800 	.word	0x40013800
 8003184:	40021000 	.word	0x40021000
 8003188:	40004400 	.word	0x40004400
 800318c:	40004800 	.word	0x40004800
 8003190:	40004c00 	.word	0x40004c00
 8003194:	40005000 	.word	0x40005000
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a9f      	ldr	r2, [pc, #636]	@ (8003420 <UART_SetConfig+0x568>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d17a      	bne.n	800329e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d824      	bhi.n	80031fa <UART_SetConfig+0x342>
 80031b0:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <UART_SetConfig+0x300>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031dd 	.word	0x080031dd
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	080031eb 	.word	0x080031eb
 80031cc:	080031fb 	.word	0x080031fb
 80031d0:	080031fb 	.word	0x080031fb
 80031d4:	080031fb 	.word	0x080031fb
 80031d8:	080031f3 	.word	0x080031f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7fe fdde 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80031e0:	61f8      	str	r0, [r7, #28]
        break;
 80031e2:	e010      	b.n	8003206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003424 <UART_SetConfig+0x56c>)
 80031e6:	61fb      	str	r3, [r7, #28]
        break;
 80031e8:	e00d      	b.n	8003206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7fe fd3f 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80031ee:	61f8      	str	r0, [r7, #28]
        break;
 80031f0:	e009      	b.n	8003206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f6:	61fb      	str	r3, [r7, #28]
        break;
 80031f8:	e005      	b.n	8003206 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80fb 	beq.w	8003404 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	429a      	cmp	r2, r3
 800321c:	d305      	bcc.n	800322a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	429a      	cmp	r2, r3
 8003228:	d903      	bls.n	8003232 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003230:	e0e8      	b.n	8003404 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2200      	movs	r2, #0
 8003236:	461c      	mov	r4, r3
 8003238:	4615      	mov	r5, r2
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	022b      	lsls	r3, r5, #8
 8003244:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003248:	0222      	lsls	r2, r4, #8
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	6849      	ldr	r1, [r1, #4]
 800324e:	0849      	lsrs	r1, r1, #1
 8003250:	2000      	movs	r0, #0
 8003252:	4688      	mov	r8, r1
 8003254:	4681      	mov	r9, r0
 8003256:	eb12 0a08 	adds.w	sl, r2, r8
 800325a:	eb43 0b09 	adc.w	fp, r3, r9
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800326c:	4650      	mov	r0, sl
 800326e:	4659      	mov	r1, fp
 8003270:	f7fc ffae 	bl	80001d0 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003282:	d308      	bcc.n	8003296 <UART_SetConfig+0x3de>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328a:	d204      	bcs.n	8003296 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e0b6      	b.n	8003404 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800329c:	e0b2      	b.n	8003404 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a6:	d15e      	bne.n	8003366 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d828      	bhi.n	8003302 <UART_SetConfig+0x44a>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <UART_SetConfig+0x400>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	08003303 	.word	0x08003303
 80032c8:	080032f3 	.word	0x080032f3
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003303 	.word	0x08003303
 80032d4:	08003303 	.word	0x08003303
 80032d8:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fd5e 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80032e0:	61f8      	str	r0, [r7, #28]
        break;
 80032e2:	e014      	b.n	800330e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7fe fd70 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80032e8:	61f8      	str	r0, [r7, #28]
        break;
 80032ea:	e010      	b.n	800330e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003424 <UART_SetConfig+0x56c>)
 80032ee:	61fb      	str	r3, [r7, #28]
        break;
 80032f0:	e00d      	b.n	800330e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7fe fcbb 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80032f6:	61f8      	str	r0, [r7, #28]
        break;
 80032f8:	e009      	b.n	800330e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fe:	61fb      	str	r3, [r7, #28]
        break;
 8003300:	e005      	b.n	800330e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800330c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d077      	beq.n	8003404 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005a      	lsls	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d916      	bls.n	800335e <UART_SetConfig+0x4a6>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d212      	bcs.n	800335e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f023 030f 	bic.w	r3, r3, #15
 8003340:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	b29a      	uxth	r2, r3
 800334e:	8afb      	ldrh	r3, [r7, #22]
 8003350:	4313      	orrs	r3, r2
 8003352:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	8afa      	ldrh	r2, [r7, #22]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e052      	b.n	8003404 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003364:	e04e      	b.n	8003404 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003366:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800336a:	2b08      	cmp	r3, #8
 800336c:	d827      	bhi.n	80033be <UART_SetConfig+0x506>
 800336e:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <UART_SetConfig+0x4bc>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003399 	.word	0x08003399
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a9 	.word	0x080033a9
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033af 	.word	0x080033af
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033bf 	.word	0x080033bf
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe fd00 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 800339c:	61f8      	str	r0, [r7, #28]
        break;
 800339e:	e014      	b.n	80033ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fd12 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80033a4:	61f8      	str	r0, [r7, #28]
        break;
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003424 <UART_SetConfig+0x56c>)
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e00d      	b.n	80033ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fc5d 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80033b2:	61f8      	str	r0, [r7, #28]
        break;
 80033b4:	e009      	b.n	80033ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e005      	b.n	80033ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033c8:	bf00      	nop
    }

    if (pclk != 0U)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d019      	beq.n	8003404 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	085a      	lsrs	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d909      	bls.n	80033fe <UART_SetConfig+0x546>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d205      	bcs.n	80033fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e002      	b.n	8003404 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003410:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003414:	4618      	mov	r0, r3
 8003416:	3728      	adds	r7, #40	@ 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40008000 	.word	0x40008000
 8003424:	00f42400 	.word	0x00f42400

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003526:	d10a      	bne.n	800353e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b098      	sub	sp, #96	@ 0x60
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800357c:	f7fd fb6e 	bl	8000c5c <HAL_GetTick>
 8003580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d12e      	bne.n	80035ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f88c 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d021      	beq.n	80035ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035be:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e6      	bne.n	80035aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e062      	b.n	80036b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d149      	bne.n	8003690 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	2200      	movs	r2, #0
 8003606:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f856 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03c      	beq.n	8003690 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	623b      	str	r3, [r7, #32]
   return(result);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e6      	bne.n	8003616 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	60fb      	str	r3, [r7, #12]
   return(result);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	617b      	str	r3, [r7, #20]
   return(result);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e011      	b.n	80036b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3758      	adds	r7, #88	@ 0x58
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	e04f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d04b      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fac1 	bl	8000c5c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e04e      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d037      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b80      	cmp	r3, #128	@ 0x80
 8003702:	d034      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d031      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d110      	bne.n	800373a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f838 	bl	8003796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2208      	movs	r2, #8
 800372a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e029      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003748:	d111      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f81e 	bl	8003796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e00f      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0a0      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b095      	sub	sp, #84	@ 0x54
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e6      	bne.n	800379e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003808:	2b01      	cmp	r3, #1
 800380a:	d118      	bne.n	800383e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	60bb      	str	r3, [r7, #8]
   return(result);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	613b      	str	r3, [r7, #16]
   return(result);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e6      	bne.n	800380c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	@ 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800386c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003870:	2b84      	cmp	r3, #132	@ 0x84
 8003872:	d005      	beq.n	8003880 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003874:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	3303      	adds	r3, #3
 800387e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003880:	68fb      	ldr	r3, [r7, #12]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003894:	f3ef 8305 	mrs	r3, IPSR
 8003898:	607b      	str	r3, [r7, #4]
  return(result);
 800389a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038b6:	f001 f941 	bl	8004b3c <vTaskStartScheduler>
  
  return osOK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}

080038c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d020      	beq.n	8003914 <osThreadCreate+0x54>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01c      	beq.n	8003914 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685c      	ldr	r4, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691e      	ldr	r6, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ffb6 	bl	800385e <makeFreeRtosPriority>
 80038f2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	9100      	str	r1, [sp, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	4632      	mov	r2, r6
 8003906:	4629      	mov	r1, r5
 8003908:	4620      	mov	r0, r4
 800390a:	f000 ff31 	bl	8004770 <xTaskCreateStatic>
 800390e:	4603      	mov	r3, r0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e01c      	b.n	800394e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685c      	ldr	r4, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003920:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff98 	bl	800385e <makeFreeRtosPriority>
 800392e:	4602      	mov	r2, r0
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	9200      	str	r2, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4632      	mov	r2, r6
 800393c:	4629      	mov	r1, r5
 800393e:	4620      	mov	r0, r4
 8003940:	f000 ff76 	bl	8004830 <xTaskCreate>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003958 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <osDelay+0x16>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	e000      	b.n	8003970 <osDelay+0x18>
 800396e:	2301      	movs	r3, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f8ad 	bl	8004ad0 <vTaskDelay>
  
  return osOK;
 8003976:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00f      	beq.n	80039b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10a      	bne.n	80039ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2203      	movs	r2, #3
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	2001      	movs	r0, #1
 80039a6:	f000 f9bf 	bl	8003d28 <xQueueGenericCreateStatic>
 80039aa:	4603      	mov	r3, r0
 80039ac:	e016      	b.n	80039dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e014      	b.n	80039dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d110      	bne.n	80039da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80039b8:	2203      	movs	r2, #3
 80039ba:	2100      	movs	r1, #0
 80039bc:	2001      	movs	r0, #1
 80039be:	f000 fa30 	bl	8003e22 <xQueueGenericCreate>
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <osSemaphoreCreate+0x56>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2200      	movs	r2, #0
 80039ce:	2100      	movs	r1, #0
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fa81 	bl	8003ed8 <xQueueGenericSend>
      return sema;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	e000      	b.n	80039dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80039da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	e03a      	b.n	8003a72 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d103      	bne.n	8003a10 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e009      	b.n	8003a24 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <osSemaphoreWait+0x40>
      ticks = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a24:	f7ff ff33 	bl	800388e <inHandlerMode>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	461a      	mov	r2, r3
 8003a34:	2100      	movs	r1, #0
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fcf0 	bl	800441c <xQueueReceiveFromISR>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003a42:	23ff      	movs	r3, #255	@ 0xff
 8003a44:	e015      	b.n	8003a72 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <osSemaphoreWait+0x8c>
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <osSemaphoreWait+0x98>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	e008      	b.n	8003a70 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fbcb 	bl	80041fc <xQueueSemaphoreTake>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003a6c:	23ff      	movs	r3, #255	@ 0xff
 8003a6e:	e000      	b.n	8003a72 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003a90:	f7ff fefd 	bl	800388e <inHandlerMode>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fb1b 	bl	80040dc <xQueueGiveFromISR>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003aac:	23ff      	movs	r3, #255	@ 0xff
 8003aae:	e017      	b.n	8003ae0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <osSemaphoreRelease+0x5e>
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <osSemaphoreRelease+0x68>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e00a      	b.n	8003ade <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa02 	bl	8003ed8 <xQueueGenericSend>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003ada:	23ff      	movs	r3, #255	@ 0xff
 8003adc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f103 0208 	add.w	r2, r3, #8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 0208 	add.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e00c      	b.n	8003bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e002      	b.n	8003bbc <vListInsert+0x2e>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d2f6      	bcs.n	8003bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6892      	ldr	r2, [r2, #8]
 8003c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d103      	bne.n	8003c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c80:	f001 fed2 	bl	8005a28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	441a      	add	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	441a      	add	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	@ 0xff
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	22ff      	movs	r2, #255	@ 0xff
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d114      	bne.n	8003d00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f984 	bl	8004ff0 <xTaskRemoveFromEventList>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d012      	beq.n	8003d14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <xQueueGenericReset+0xd0>)
 8003cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	e009      	b.n	8003d14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3310      	adds	r3, #16
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fef1 	bl	8003aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3324      	adds	r3, #36	@ 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff feec 	bl	8003aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d14:	f001 feba 	bl	8005a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d18:	2301      	movs	r3, #1
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08e      	sub	sp, #56	@ 0x38
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <xQueueGenericCreateStatic+0x56>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <xQueueGenericCreateStatic+0x5a>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <xQueueGenericCreateStatic+0x5c>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	623b      	str	r3, [r7, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <xQueueGenericCreateStatic+0x84>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <xQueueGenericCreateStatic+0x88>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <xQueueGenericCreateStatic+0x8a>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	61fb      	str	r3, [r7, #28]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dce:	2348      	movs	r3, #72	@ 0x48
 8003dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b48      	cmp	r3, #72	@ 0x48
 8003dd6:	d00b      	beq.n	8003df0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	e7fd      	b.n	8003dec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003df0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f840 	bl	8003e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3730      	adds	r7, #48	@ 0x30
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08a      	sub	sp, #40	@ 0x28
 8003e26:	af02      	add	r7, sp, #8
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	613b      	str	r3, [r7, #16]
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3348      	adds	r3, #72	@ 0x48
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 ff05 	bl	8005c6c <pvPortMalloc>
 8003e62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3348      	adds	r3, #72	@ 0x48
 8003e72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e7c:	79fa      	ldrb	r2, [r7, #7]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f805 	bl	8003e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	69b8      	ldr	r0, [r7, #24]
 8003eca:	f7ff fec3 	bl	8003c54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	@ 0x38
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <xQueueGenericSend+0x34>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x42>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <xQueueGenericSend+0x46>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueGenericSend+0x48>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <xQueueGenericSend+0x64>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d103      	bne.n	8003f4a <xQueueGenericSend+0x72>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <xQueueGenericSend+0x76>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueGenericSend+0x78>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <xQueueGenericSend+0x94>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	623b      	str	r3, [r7, #32]
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f6c:	f001 fa06 	bl	800537c <xTaskGetSchedulerState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <xQueueGenericSend+0xa4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <xQueueGenericSend+0xa8>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <xQueueGenericSend+0xaa>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xQueueGenericSend+0xc6>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	61fb      	str	r3, [r7, #28]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f9e:	f001 fd43 	bl	8005a28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <xQueueGenericSend+0xdc>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d129      	bne.n	8004008 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fba:	f000 fac9 	bl	8004550 <prvCopyDataToQueue>
 8003fbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	3324      	adds	r3, #36	@ 0x24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f80f 	bl	8004ff0 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80040d8 <xQueueGenericSend+0x200>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e00a      	b.n	8004000 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <xQueueGenericSend+0x200>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004000:	f001 fd44 	bl	8005a8c <vPortExitCritical>
				return pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	e063      	b.n	80040d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400e:	f001 fd3d 	bl	8005a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
 8004014:	e05c      	b.n	80040d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f849 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402a:	f001 fd2f 	bl	8005a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402e:	f000 fdef 	bl	8004c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004032:	f001 fcf9 	bl	8005a28 <vPortEnterCritical>
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403c:	b25b      	sxtb	r3, r3
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d103      	bne.n	800404c <xQueueGenericSend+0x174>
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004052:	b25b      	sxtb	r3, r3
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <xQueueGenericSend+0x18a>
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004062:	f001 fd13 	bl	8005a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004066:	1d3a      	adds	r2, r7, #4
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f838 	bl	80050e4 <xTaskCheckForTimeOut>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d124      	bne.n	80040c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800407a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800407c:	f000 fb60 	bl	8004740 <prvIsQueueFull>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	3310      	adds	r3, #16
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff88 	bl	8004fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004096:	f000 faeb 	bl	8004670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800409a:	f000 fdc7 	bl	8004c2c <xTaskResumeAll>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f47f af7c 	bne.w	8003f9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040a6:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <xQueueGenericSend+0x200>)
 80040a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	e772      	b.n	8003f9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ba:	f000 fad9 	bl	8004670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040be:	f000 fdb5 	bl	8004c2c <xTaskResumeAll>
 80040c2:	e76c      	b.n	8003f9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c6:	f000 fad3 	bl	8004670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ca:	f000 fdaf 	bl	8004c2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3738      	adds	r7, #56	@ 0x38
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08e      	sub	sp, #56	@ 0x38
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	623b      	str	r3, [r7, #32]
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61fb      	str	r3, [r7, #28]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <xQueueGiveFromISR+0x5c>
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueGiveFromISR+0x60>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <xQueueGiveFromISR+0x62>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	61bb      	str	r3, [r7, #24]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800415a:	f001 fd45 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800415e:	f3ef 8211 	mrs	r2, BASEPRI
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	617a      	str	r2, [r7, #20]
 8004174:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004176:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004186:	429a      	cmp	r2, r3
 8004188:	d22b      	bcs.n	80041e2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800419c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d112      	bne.n	80041cc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	3324      	adds	r3, #36	@ 0x24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff1c 	bl	8004ff0 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e007      	b.n	80041dc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d0:	3301      	adds	r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	b25a      	sxtb	r2, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041dc:	2301      	movs	r3, #1
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e0:	e001      	b.n	80041e6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3738      	adds	r7, #56	@ 0x38
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	@ 0x38
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004206:	2300      	movs	r3, #0
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	623b      	str	r3, [r7, #32]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	61fb      	str	r3, [r7, #28]
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004250:	f001 f894 	bl	800537c <xTaskGetSchedulerState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <xQueueSemaphoreTake+0x64>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <xQueueSemaphoreTake+0x68>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <xQueueSemaphoreTake+0x6a>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	61bb      	str	r3, [r7, #24]
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	e7fd      	b.n	800427e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004282:	f001 fbd1 	bl	8005a28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004298:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042a2:	f001 fa17 	bl	80056d4 <pvTaskIncrementMutexHeldCount>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b6:	3310      	adds	r3, #16
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fe99 	bl	8004ff0 <xTaskRemoveFromEventList>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042c4:	4b54      	ldr	r3, [pc, #336]	@ (8004418 <xQueueSemaphoreTake+0x21c>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042d4:	f001 fbda 	bl	8005a8c <vPortExitCritical>
				return pdPASS;
 80042d8:	2301      	movs	r3, #1
 80042da:	e098      	b.n	800440e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d112      	bne.n	8004308 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	617b      	str	r3, [r7, #20]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004300:	f001 fbc4 	bl	8005a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004304:	2300      	movs	r3, #0
 8004306:	e082      	b.n	800440e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fed0 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004318:	2301      	movs	r3, #1
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800431c:	f001 fbb6 	bl	8005a8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004320:	f000 fc76 	bl	8004c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004324:	f001 fb80 	bl	8005a28 <vPortEnterCritical>
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d103      	bne.n	800433e <xQueueSemaphoreTake+0x142>
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004344:	b25b      	sxtb	r3, r3
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d103      	bne.n	8004354 <xQueueSemaphoreTake+0x158>
 800434c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004354:	f001 fb9a 	bl	8005a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004358:	463a      	mov	r2, r7
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 febf 	bl	80050e4 <xTaskCheckForTimeOut>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d132      	bne.n	80043d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800436c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800436e:	f000 f9d1 	bl	8004714 <prvIsQueueEmpty>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d026      	beq.n	80043c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004380:	f001 fb52 	bl	8005a28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f815 	bl	80053b8 <xTaskPriorityInherit>
 800438e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004390:	f001 fb7c 	bl	8005a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	3324      	adds	r3, #36	@ 0x24
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fe01 	bl	8004fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043a4:	f000 f964 	bl	8004670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043a8:	f000 fc40 	bl	8004c2c <xTaskResumeAll>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f47f af67 	bne.w	8004282 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80043b4:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <xQueueSemaphoreTake+0x21c>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	e75d      	b.n	8004282 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043c8:	f000 f952 	bl	8004670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043cc:	f000 fc2e 	bl	8004c2c <xTaskResumeAll>
 80043d0:	e757      	b.n	8004282 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043d4:	f000 f94c 	bl	8004670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043d8:	f000 fc28 	bl	8004c2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043de:	f000 f999 	bl	8004714 <prvIsQueueEmpty>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f43f af4c 	beq.w	8004282 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80043f0:	f001 fb1a 	bl	8005a28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043f6:	f000 f893 	bl	8004520 <prvGetDisinheritPriorityAfterTimeout>
 80043fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f8d6 	bl	80055b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004408:	f001 fb40 	bl	8005a8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800440c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800440e:	4618      	mov	r0, r3
 8004410:	3738      	adds	r7, #56	@ 0x38
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	@ 0x38
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	623b      	str	r3, [r7, #32]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <xQueueReceiveFromISR+0x3c>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <xQueueReceiveFromISR+0x40>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <xQueueReceiveFromISR+0x42>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	61fb      	str	r3, [r7, #28]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800447a:	f001 fbb5 	bl	8005be8 <vPortValidateInterruptPriority>
	__asm volatile
 800447e:	f3ef 8211 	mrs	r2, BASEPRI
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	61ba      	str	r2, [r7, #24]
 8004494:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004496:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d02f      	beq.n	8004506 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044b4:	f000 f8b6 	bl	8004624 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d112      	bne.n	80044f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	3310      	adds	r3, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fd8a 	bl	8004ff0 <xTaskRemoveFromEventList>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e007      	b.n	8004500 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044f4:	3301      	adds	r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	b25a      	sxtb	r2, r3
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004500:	2301      	movs	r3, #1
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
 8004504:	e001      	b.n	800450a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f383 8811 	msr	BASEPRI, r3
}
 8004514:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004518:	4618      	mov	r0, r3
 800451a:	3738      	adds	r7, #56	@ 0x38
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d006      	beq.n	800453e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1c3 0307 	rsb	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e001      	b.n	8004542 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004542:	68fb      	ldr	r3, [r7, #12]
	}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d14d      	bne.n	8004612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 ff92 	bl	80054a4 <xTaskPriorityDisinherit>
 8004580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	e043      	b.n	8004612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d119      	bne.n	80045c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6858      	ldr	r0, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	f001 fdd8 	bl	8006150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	441a      	add	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d32b      	bcc.n	8004612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e026      	b.n	8004612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68d8      	ldr	r0, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	461a      	mov	r2, r3
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	f001 fdbe 	bl	8006150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	425b      	negs	r3, r3
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d207      	bcs.n	8004600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	425b      	negs	r3, r3
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d105      	bne.n	8004612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800461a:	697b      	ldr	r3, [r7, #20]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d303      	bcc.n	8004658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	461a      	mov	r2, r3
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f001 fd74 	bl	8006150 <memcpy>
	}
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004678:	f001 f9d6 	bl	8005a28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004684:	e011      	b.n	80046aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d012      	beq.n	80046b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3324      	adds	r3, #36	@ 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fcac 	bl	8004ff0 <xTaskRemoveFromEventList>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800469e:	f000 fd85 	bl	80051ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	dce9      	bgt.n	8004686 <prvUnlockQueue+0x16>
 80046b2:	e000      	b.n	80046b6 <prvUnlockQueue+0x46>
					break;
 80046b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	22ff      	movs	r2, #255	@ 0xff
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046be:	f001 f9e5 	bl	8005a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046c2:	f001 f9b1 	bl	8005a28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ce:	e011      	b.n	80046f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d012      	beq.n	80046fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3310      	adds	r3, #16
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fc87 	bl	8004ff0 <xTaskRemoveFromEventList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046e8:	f000 fd60 	bl	80051ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dce9      	bgt.n	80046d0 <prvUnlockQueue+0x60>
 80046fc:	e000      	b.n	8004700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	22ff      	movs	r2, #255	@ 0xff
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004708:	f001 f9c0 	bl	8005a8c <vPortExitCritical>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800471c:	f001 f984 	bl	8005a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e001      	b.n	8004732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004732:	f001 f9ab 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004748:	f001 f96e 	bl	8005a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	429a      	cmp	r2, r3
 8004756:	d102      	bne.n	800475e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e001      	b.n	8004762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004762:	f001 f993 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	@ 0x38
 8004774:	af04      	add	r7, sp, #16
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800477e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	623b      	str	r3, [r7, #32]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10b      	bne.n	80047ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	61fb      	str	r3, [r7, #28]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ba:	23a0      	movs	r3, #160	@ 0xa0
 80047bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80047c2:	d00b      	beq.n	80047dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61bb      	str	r3, [r7, #24]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01e      	beq.n	8004822 <xTaskCreateStatic+0xb2>
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01b      	beq.n	8004822 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047fc:	2300      	movs	r3, #0
 80047fe:	9303      	str	r3, [sp, #12]
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f851 	bl	80048bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800481c:	f000 f8ee 	bl	80049fc <prvAddNewTaskToReadyList>
 8004820:	e001      	b.n	8004826 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004826:	697b      	ldr	r3, [r7, #20]
	}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	@ 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	@ 0x30
 8004834:	af04      	add	r7, sp, #16
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fa11 	bl	8005c6c <pvPortMalloc>
 800484a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00e      	beq.n	8004870 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004852:	20a0      	movs	r0, #160	@ 0xa0
 8004854:	f001 fa0a 	bl	8005c6c <pvPortMalloc>
 8004858:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
 8004866:	e005      	b.n	8004874 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004868:	6978      	ldr	r0, [r7, #20]
 800486a:	f001 facd 	bl	8005e08 <vPortFree>
 800486e:	e001      	b.n	8004874 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	2300      	movs	r3, #0
 8004886:	9303      	str	r3, [sp, #12]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	9302      	str	r3, [sp, #8]
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f80f 	bl	80048bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800489e:	69f8      	ldr	r0, [r7, #28]
 80048a0:	f000 f8ac 	bl	80049fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048a4:	2301      	movs	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e002      	b.n	80048b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048b0:	69bb      	ldr	r3, [r7, #24]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048d4:	3b01      	subs	r3, #1
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01f      	beq.n	800494c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e012      	b.n	8004938 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	7819      	ldrb	r1, [r3, #0]
 800491a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	3334      	adds	r3, #52	@ 0x34
 8004922:	460a      	mov	r2, r1
 8004924:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d9e9      	bls.n	8004912 <prvInitialiseNewTask+0x56>
 800493e:	e000      	b.n	8004942 <prvInitialiseNewTask+0x86>
			{
				break;
 8004940:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800494a:	e003      	b.n	8004954 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	2b06      	cmp	r3, #6
 8004958:	d901      	bls.n	800495e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800495a:	2306      	movs	r3, #6
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004962:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2200      	movs	r2, #0
 800496e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	3304      	adds	r3, #4
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff f8d9 	bl	8003b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	3318      	adds	r3, #24
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f8d4 	bl	8003b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004988:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f1c3 0207 	rsb	r2, r3, #7
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004998:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	334c      	adds	r3, #76	@ 0x4c
 80049ae:	224c      	movs	r2, #76	@ 0x4c
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fb48 	bl	8006048 <memset>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <prvInitialiseNewTask+0x134>)
 80049bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <prvInitialiseNewTask+0x138>)
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <prvInitialiseNewTask+0x13c>)
 80049c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	69b8      	ldr	r0, [r7, #24]
 80049d0:	f000 fefa 	bl	80057c8 <pxPortInitialiseStack>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049e6:	bf00      	nop
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20001118 	.word	0x20001118
 80049f4:	20001180 	.word	0x20001180
 80049f8:	200011e8 	.word	0x200011e8

080049fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a04:	f001 f810 	bl	8005a28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a08:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <prvAddNewTaskToReadyList+0xb8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a29      	ldr	r2, [pc, #164]	@ (8004ab4 <prvAddNewTaskToReadyList+0xb8>)
 8004a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a12:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <prvAddNewTaskToReadyList+0xbc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a1a:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <prvAddNewTaskToReadyList+0xbc>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <prvAddNewTaskToReadyList+0xb8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d110      	bne.n	8004a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a28:	f000 fbe4 	bl	80051f4 <prvInitialiseTaskLists>
 8004a2c:	e00d      	b.n	8004a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a2e:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <prvAddNewTaskToReadyList+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a36:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <prvAddNewTaskToReadyList+0xbc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d802      	bhi.n	8004a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <prvAddNewTaskToReadyList+0xbc>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc4>)
 8004a52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <prvAddNewTaskToReadyList+0xc8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <prvAddNewTaskToReadyList+0xc8>)
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <prvAddNewTaskToReadyList+0xcc>)
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7ff f862 	bl	8003b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a82:	f001 f803 	bl	8005a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <prvAddNewTaskToReadyList+0xc0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00e      	beq.n	8004aac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <prvAddNewTaskToReadyList+0xbc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <prvAddNewTaskToReadyList+0xd0>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2000050c 	.word	0x2000050c
 8004ab8:	2000040c 	.word	0x2000040c
 8004abc:	20000518 	.word	0x20000518
 8004ac0:	20000528 	.word	0x20000528
 8004ac4:	20000514 	.word	0x20000514
 8004ac8:	20000410 	.word	0x20000410
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ae2:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <vTaskDelay+0x64>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <vTaskDelay+0x32>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b02:	f000 f885 	bl	8004c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fdf7 	bl	80056fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b0e:	f000 f88d 	bl	8004c2c <xTaskResumeAll>
 8004b12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b1a:	4b07      	ldr	r3, [pc, #28]	@ (8004b38 <vTaskDelay+0x68>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000534 	.word	0x20000534
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	@ 0x28
 8004b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b4a:	463a      	mov	r2, r7
 8004b4c:	1d39      	adds	r1, r7, #4
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fcb4 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	9202      	str	r2, [sp, #8]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	2300      	movs	r3, #0
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2300      	movs	r3, #0
 8004b68:	460a      	mov	r2, r1
 8004b6a:	4921      	ldr	r1, [pc, #132]	@ (8004bf0 <vTaskStartScheduler+0xb4>)
 8004b6c:	4821      	ldr	r0, [pc, #132]	@ (8004bf4 <vTaskStartScheduler+0xb8>)
 8004b6e:	f7ff fdff 	bl	8004770 <xTaskCreateStatic>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a20      	ldr	r2, [pc, #128]	@ (8004bf8 <vTaskStartScheduler+0xbc>)
 8004b76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b78:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <vTaskStartScheduler+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e001      	b.n	8004b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d11b      	bne.n	8004bc8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	613b      	str	r3, [r7, #16]
}
 8004ba2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ba4:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <vTaskStartScheduler+0xc0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	334c      	adds	r3, #76	@ 0x4c
 8004baa:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <vTaskStartScheduler+0xc4>)
 8004bac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bae:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <vTaskStartScheduler+0xc8>)
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bb6:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <vTaskStartScheduler+0xcc>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bbc:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <vTaskStartScheduler+0xd0>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bc2:	f000 fe8d 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bc6:	e00f      	b.n	8004be8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d10b      	bne.n	8004be8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <vTaskStartScheduler+0xa8>
}
 8004be8:	bf00      	nop
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	080062a8 	.word	0x080062a8
 8004bf4:	080051c5 	.word	0x080051c5
 8004bf8:	20000530 	.word	0x20000530
 8004bfc:	2000040c 	.word	0x2000040c
 8004c00:	20000010 	.word	0x20000010
 8004c04:	2000052c 	.word	0x2000052c
 8004c08:	20000518 	.word	0x20000518
 8004c0c:	20000510 	.word	0x20000510

08004c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c14:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <vTaskSuspendAll+0x18>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	4a03      	ldr	r2, [pc, #12]	@ (8004c28 <vTaskSuspendAll+0x18>)
 8004c1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	20000534 	.word	0x20000534

08004c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c3a:	4b42      	ldr	r3, [pc, #264]	@ (8004d44 <xTaskResumeAll+0x118>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <xTaskResumeAll+0x2e>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	603b      	str	r3, [r7, #0]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c5a:	f000 fee5 	bl	8005a28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c5e:	4b39      	ldr	r3, [pc, #228]	@ (8004d44 <xTaskResumeAll+0x118>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <xTaskResumeAll+0x118>)
 8004c66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c68:	4b36      	ldr	r3, [pc, #216]	@ (8004d44 <xTaskResumeAll+0x118>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d161      	bne.n	8004d34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c70:	4b35      	ldr	r3, [pc, #212]	@ (8004d48 <xTaskResumeAll+0x11c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05d      	beq.n	8004d34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c78:	e02e      	b.n	8004cd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7a:	4b34      	ldr	r3, [pc, #208]	@ (8004d4c <xTaskResumeAll+0x120>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3318      	adds	r3, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe ffba 	bl	8003c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe ffb5 	bl	8003c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <xTaskResumeAll+0x124>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d50 <xTaskResumeAll+0x124>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4a27      	ldr	r2, [pc, #156]	@ (8004d54 <xTaskResumeAll+0x128>)
 8004cb6:	441a      	add	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f7fe ff41 	bl	8003b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc8:	4b23      	ldr	r3, [pc, #140]	@ (8004d58 <xTaskResumeAll+0x12c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cd2:	4b22      	ldr	r3, [pc, #136]	@ (8004d5c <xTaskResumeAll+0x130>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <xTaskResumeAll+0x120>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1cc      	bne.n	8004c7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ce6:	f000 fb29 	bl	800533c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <xTaskResumeAll+0x134>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cf6:	f000 f837 	bl	8004d68 <xTaskIncrementTick>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d00:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <xTaskResumeAll+0x130>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f1      	bne.n	8004cf6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d12:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <xTaskResumeAll+0x134>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d18:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <xTaskResumeAll+0x130>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d24:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <xTaskResumeAll+0x138>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d34:	f000 feaa 	bl	8005a8c <vPortExitCritical>

	return xAlreadyYielded;
 8004d38:	68bb      	ldr	r3, [r7, #8]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000534 	.word	0x20000534
 8004d48:	2000050c 	.word	0x2000050c
 8004d4c:	200004cc 	.word	0x200004cc
 8004d50:	20000514 	.word	0x20000514
 8004d54:	20000410 	.word	0x20000410
 8004d58:	2000040c 	.word	0x2000040c
 8004d5c:	20000520 	.word	0x20000520
 8004d60:	2000051c 	.word	0x2000051c
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d72:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb0 <xTaskIncrementTick+0x148>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 808f 	bne.w	8004e9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb4 <xTaskIncrementTick+0x14c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d84:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb4 <xTaskIncrementTick+0x14c>)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d121      	bne.n	8004dd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d90:	4b49      	ldr	r3, [pc, #292]	@ (8004eb8 <xTaskIncrementTick+0x150>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <xTaskIncrementTick+0x46>
 8004db2:	4b41      	ldr	r3, [pc, #260]	@ (8004eb8 <xTaskIncrementTick+0x150>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <xTaskIncrementTick+0x154>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb8 <xTaskIncrementTick+0x150>)
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004ebc <xTaskIncrementTick+0x154>)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec0 <xTaskIncrementTick+0x158>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec0 <xTaskIncrementTick+0x158>)
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	f000 fab4 	bl	800533c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <xTaskIncrementTick+0x15c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d348      	bcc.n	8004e70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dde:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <xTaskIncrementTick+0x150>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de8:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <xTaskIncrementTick+0x15c>)
 8004dea:	f04f 32ff 	mov.w	r2, #4294967295
 8004dee:	601a      	str	r2, [r3, #0]
					break;
 8004df0:	e03e      	b.n	8004e70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <xTaskIncrementTick+0x150>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d203      	bcs.n	8004e12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec4 <xTaskIncrementTick+0x15c>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e10:	e02e      	b.n	8004e70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fef2 	bl	8003c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fee9 	bl	8003c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	2201      	movs	r2, #1
 8004e34:	409a      	lsls	r2, r3
 8004e36:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <xTaskIncrementTick+0x160>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <xTaskIncrementTick+0x160>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ecc <xTaskIncrementTick+0x164>)
 8004e4e:	441a      	add	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7fe fe75 	bl	8003b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <xTaskIncrementTick+0x168>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3b9      	bcc.n	8004dde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e6e:	e7b6      	b.n	8004dde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e70:	4b17      	ldr	r3, [pc, #92]	@ (8004ed0 <xTaskIncrementTick+0x168>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	4915      	ldr	r1, [pc, #84]	@ (8004ecc <xTaskIncrementTick+0x164>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d901      	bls.n	8004e8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <xTaskIncrementTick+0x16c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e94:	2301      	movs	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e004      	b.n	8004ea4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed8 <xTaskIncrementTick+0x170>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <xTaskIncrementTick+0x170>)
 8004ea2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ea4:	697b      	ldr	r3, [r7, #20]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000534 	.word	0x20000534
 8004eb4:	20000510 	.word	0x20000510
 8004eb8:	200004c4 	.word	0x200004c4
 8004ebc:	200004c8 	.word	0x200004c8
 8004ec0:	20000524 	.word	0x20000524
 8004ec4:	2000052c 	.word	0x2000052c
 8004ec8:	20000514 	.word	0x20000514
 8004ecc:	20000410 	.word	0x20000410
 8004ed0:	2000040c 	.word	0x2000040c
 8004ed4:	20000520 	.word	0x20000520
 8004ed8:	2000051c 	.word	0x2000051c

08004edc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <vTaskSwitchContext+0xb0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eea:	4b29      	ldr	r3, [pc, #164]	@ (8004f90 <vTaskSwitchContext+0xb4>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ef0:	e045      	b.n	8004f7e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004ef2:	4b27      	ldr	r3, [pc, #156]	@ (8004f90 <vTaskSwitchContext+0xb4>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	4b26      	ldr	r3, [pc, #152]	@ (8004f94 <vTaskSwitchContext+0xb8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	fab3 f383 	clz	r3, r3
 8004f04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f06:	7afb      	ldrb	r3, [r7, #11]
 8004f08:	f1c3 031f 	rsb	r3, r3, #31
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	4922      	ldr	r1, [pc, #136]	@ (8004f98 <vTaskSwitchContext+0xbc>)
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	607b      	str	r3, [r7, #4]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <vTaskSwitchContext+0x5a>
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <vTaskSwitchContext+0xbc>)
 8004f46:	4413      	add	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d104      	bne.n	8004f6a <vTaskSwitchContext+0x8e>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <vTaskSwitchContext+0xc0>)
 8004f72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f74:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <vTaskSwitchContext+0xc0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <vTaskSwitchContext+0xc4>)
 8004f7c:	6013      	str	r3, [r2, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000534 	.word	0x20000534
 8004f90:	20000520 	.word	0x20000520
 8004f94:	20000514 	.word	0x20000514
 8004f98:	20000410 	.word	0x20000410
 8004f9c:	2000040c 	.word	0x2000040c
 8004fa0:	20000010 	.word	0x20000010

08004fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vTaskPlaceOnEventList+0x48>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fe fdda 	bl	8003b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fda:	2101      	movs	r1, #1
 8004fdc:	6838      	ldr	r0, [r7, #0]
 8004fde:	f000 fb8d 	bl	80056fc <prvAddCurrentTaskToDelayedList>
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000040c 	.word	0x2000040c

08004ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3318      	adds	r3, #24
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fdec 	bl	8003c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005028:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <xTaskRemoveFromEventList+0xb0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11c      	bne.n	800506a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fde3 	bl	8003c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	2201      	movs	r2, #1
 8005040:	409a      	lsls	r2, r3
 8005042:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <xTaskRemoveFromEventList+0xb4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	4a16      	ldr	r2, [pc, #88]	@ (80050a4 <xTaskRemoveFromEventList+0xb4>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a13      	ldr	r2, [pc, #76]	@ (80050a8 <xTaskRemoveFromEventList+0xb8>)
 800505a:	441a      	add	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe fd6f 	bl	8003b46 <vListInsertEnd>
 8005068:	e005      	b.n	8005076 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3318      	adds	r3, #24
 800506e:	4619      	mov	r1, r3
 8005070:	480e      	ldr	r0, [pc, #56]	@ (80050ac <xTaskRemoveFromEventList+0xbc>)
 8005072:	f7fe fd68 	bl	8003b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <xTaskRemoveFromEventList+0xc0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d905      	bls.n	8005090 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005088:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <xTaskRemoveFromEventList+0xc4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e001      	b.n	8005094 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000534 	.word	0x20000534
 80050a4:	20000514 	.word	0x20000514
 80050a8:	20000410 	.word	0x20000410
 80050ac:	200004cc 	.word	0x200004cc
 80050b0:	2000040c 	.word	0x2000040c
 80050b4:	20000520 	.word	0x20000520

080050b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <vTaskInternalSetTimeOutState+0x24>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <vTaskInternalSetTimeOutState+0x28>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000524 	.word	0x20000524
 80050e0:	20000510 	.word	0x20000510

080050e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	613b      	str	r3, [r7, #16]
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60fb      	str	r3, [r7, #12]
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	e7fd      	b.n	8005126 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800512a:	f000 fc7d 	bl	8005a28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800512e:	4b1d      	ldr	r3, [pc, #116]	@ (80051a4 <xTaskCheckForTimeOut+0xc0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d102      	bne.n	800514e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e023      	b.n	8005196 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <xTaskCheckForTimeOut+0xc4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d007      	beq.n	800516a <xTaskCheckForTimeOut+0x86>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005164:	2301      	movs	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e015      	b.n	8005196 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d20b      	bcs.n	800518c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff99 	bl	80050b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	e004      	b.n	8005196 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f000 fc79 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 800519a:	69fb      	ldr	r3, [r7, #28]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000510 	.word	0x20000510
 80051a8:	20000524 	.word	0x20000524

080051ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051b0:	4b03      	ldr	r3, [pc, #12]	@ (80051c0 <vTaskMissedYield+0x14>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000520 	.word	0x20000520

080051c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051cc:	f000 f852 	bl	8005274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051d0:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <prvIdleTask+0x28>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d9f9      	bls.n	80051cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80051d8:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <prvIdleTask+0x2c>)
 80051da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051e8:	e7f0      	b.n	80051cc <prvIdleTask+0x8>
 80051ea:	bf00      	nop
 80051ec:	20000410 	.word	0x20000410
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e00c      	b.n	800521a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a12      	ldr	r2, [pc, #72]	@ (8005254 <prvInitialiseTaskLists+0x60>)
 800520c:	4413      	add	r3, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fc6c 	bl	8003aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3301      	adds	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d9ef      	bls.n	8005200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005220:	480d      	ldr	r0, [pc, #52]	@ (8005258 <prvInitialiseTaskLists+0x64>)
 8005222:	f7fe fc63 	bl	8003aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005226:	480d      	ldr	r0, [pc, #52]	@ (800525c <prvInitialiseTaskLists+0x68>)
 8005228:	f7fe fc60 	bl	8003aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800522c:	480c      	ldr	r0, [pc, #48]	@ (8005260 <prvInitialiseTaskLists+0x6c>)
 800522e:	f7fe fc5d 	bl	8003aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005232:	480c      	ldr	r0, [pc, #48]	@ (8005264 <prvInitialiseTaskLists+0x70>)
 8005234:	f7fe fc5a 	bl	8003aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005238:	480b      	ldr	r0, [pc, #44]	@ (8005268 <prvInitialiseTaskLists+0x74>)
 800523a:	f7fe fc57 	bl	8003aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800523e:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <prvInitialiseTaskLists+0x78>)
 8005240:	4a05      	ldr	r2, [pc, #20]	@ (8005258 <prvInitialiseTaskLists+0x64>)
 8005242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <prvInitialiseTaskLists+0x7c>)
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <prvInitialiseTaskLists+0x68>)
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000410 	.word	0x20000410
 8005258:	2000049c 	.word	0x2000049c
 800525c:	200004b0 	.word	0x200004b0
 8005260:	200004cc 	.word	0x200004cc
 8005264:	200004e0 	.word	0x200004e0
 8005268:	200004f8 	.word	0x200004f8
 800526c:	200004c4 	.word	0x200004c4
 8005270:	200004c8 	.word	0x200004c8

08005274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800527a:	e019      	b.n	80052b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800527c:	f000 fbd4 	bl	8005a28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005280:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <prvCheckTasksWaitingTermination+0x50>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fcb7 	bl	8003c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a0b      	ldr	r2, [pc, #44]	@ (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 800529a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800529c:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <prvCheckTasksWaitingTermination+0x58>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	4a0a      	ldr	r2, [pc, #40]	@ (80052cc <prvCheckTasksWaitingTermination+0x58>)
 80052a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052a6:	f000 fbf1 	bl	8005a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f810 	bl	80052d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052b0:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <prvCheckTasksWaitingTermination+0x58>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e1      	bne.n	800527c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200004e0 	.word	0x200004e0
 80052c8:	2000050c 	.word	0x2000050c
 80052cc:	200004f4 	.word	0x200004f4

080052d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	334c      	adds	r3, #76	@ 0x4c
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 febb 	bl	8006058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d108      	bne.n	80052fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fd89 	bl	8005e08 <vPortFree>
				vPortFree( pxTCB );
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd86 	bl	8005e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052fc:	e019      	b.n	8005332 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005304:	2b01      	cmp	r3, #1
 8005306:	d103      	bne.n	8005310 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fd7d 	bl	8005e08 <vPortFree>
	}
 800530e:	e010      	b.n	8005332 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005316:	2b02      	cmp	r3, #2
 8005318:	d00b      	beq.n	8005332 <prvDeleteTCB+0x62>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60fb      	str	r3, [r7, #12]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <prvDeleteTCB+0x5e>
	}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005342:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <prvResetNextTaskUnblockTime+0x38>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <prvResetNextTaskUnblockTime+0x3c>)
 800534e:	f04f 32ff 	mov.w	r2, #4294967295
 8005352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005354:	e008      	b.n	8005368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b07      	ldr	r3, [pc, #28]	@ (8005374 <prvResetNextTaskUnblockTime+0x38>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <prvResetNextTaskUnblockTime+0x3c>)
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	200004c4 	.word	0x200004c4
 8005378:	2000052c 	.word	0x2000052c

0800537c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <xTaskGetSchedulerState+0x34>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800538a:	2301      	movs	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	e008      	b.n	80053a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005390:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <xTaskGetSchedulerState+0x38>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005398:	2302      	movs	r3, #2
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e001      	b.n	80053a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053a2:	687b      	ldr	r3, [r7, #4]
	}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000518 	.word	0x20000518
 80053b4:	20000534 	.word	0x20000534

080053b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d05e      	beq.n	800548c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d2:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <xTaskPriorityInherit+0xe0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	429a      	cmp	r2, r3
 80053da:	d24e      	bcs.n	800547a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	db06      	blt.n	80053f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005498 <xTaskPriorityInherit+0xe0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	f1c3 0207 	rsb	r2, r3, #7
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4a26      	ldr	r2, [pc, #152]	@ (800549c <xTaskPriorityInherit+0xe4>)
 8005404:	4413      	add	r3, r2
 8005406:	4299      	cmp	r1, r3
 8005408:	d12f      	bne.n	800546a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	3304      	adds	r3, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fbf6 	bl	8003c00 <uxListRemove>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	2201      	movs	r2, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	43da      	mvns	r2, r3
 8005426:	4b1e      	ldr	r3, [pc, #120]	@ (80054a0 <xTaskPriorityInherit+0xe8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4013      	ands	r3, r2
 800542c:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <xTaskPriorityInherit+0xe8>)
 800542e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <xTaskPriorityInherit+0xe0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	2201      	movs	r2, #1
 8005440:	409a      	lsls	r2, r3
 8005442:	4b17      	ldr	r3, [pc, #92]	@ (80054a0 <xTaskPriorityInherit+0xe8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <xTaskPriorityInherit+0xe8>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a10      	ldr	r2, [pc, #64]	@ (800549c <xTaskPriorityInherit+0xe4>)
 800545a:	441a      	add	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe fb6f 	bl	8003b46 <vListInsertEnd>
 8005468:	e004      	b.n	8005474 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800546a:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <xTaskPriorityInherit+0xe0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e008      	b.n	800548c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <xTaskPriorityInherit+0xe0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d201      	bcs.n	800548c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800548c:	68fb      	ldr	r3, [r7, #12]
	}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2000040c 	.word	0x2000040c
 800549c:	20000410 	.word	0x20000410
 80054a0:	20000514 	.word	0x20000514

080054a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d070      	beq.n	800559c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ba:	4b3b      	ldr	r3, [pc, #236]	@ (80055a8 <xTaskPriorityDisinherit+0x104>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d00b      	beq.n	80054dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60bb      	str	r3, [r7, #8]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	429a      	cmp	r2, r3
 8005510:	d044      	beq.n	800559c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	2b00      	cmp	r3, #0
 8005518:	d140      	bne.n	800559c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fb6e 	bl	8003c00 <uxListRemove>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d115      	bne.n	8005556 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	491f      	ldr	r1, [pc, #124]	@ (80055ac <xTaskPriorityDisinherit+0x108>)
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xTaskPriorityDisinherit+0xb2>
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	2201      	movs	r2, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	4b18      	ldr	r3, [pc, #96]	@ (80055b0 <xTaskPriorityDisinherit+0x10c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4013      	ands	r3, r2
 8005552:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <xTaskPriorityDisinherit+0x10c>)
 8005554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	f1c3 0207 	rsb	r2, r3, #7
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	2201      	movs	r2, #1
 8005570:	409a      	lsls	r2, r3
 8005572:	4b0f      	ldr	r3, [pc, #60]	@ (80055b0 <xTaskPriorityDisinherit+0x10c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	4a0d      	ldr	r2, [pc, #52]	@ (80055b0 <xTaskPriorityDisinherit+0x10c>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <xTaskPriorityDisinherit+0x108>)
 800558a:	441a      	add	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fe fad7 	bl	8003b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800559c:	697b      	ldr	r3, [r7, #20]
	}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	2000040c 	.word	0x2000040c
 80055ac:	20000410 	.word	0x20000410
 80055b0:	20000514 	.word	0x20000514

080055b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d079      	beq.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d902      	bls.n	80055fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	e002      	b.n	8005602 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005600:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	429a      	cmp	r2, r3
 800560a:	d059      	beq.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	429a      	cmp	r2, r3
 8005614:	d154      	bne.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005616:	4b2c      	ldr	r3, [pc, #176]	@ (80056c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	429a      	cmp	r2, r3
 800561e:	d10b      	bne.n	8005638 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60bb      	str	r3, [r7, #8]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	db04      	blt.n	8005656 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f1c3 0207 	rsb	r2, r3, #7
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a19      	ldr	r2, [pc, #100]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005666:	4413      	add	r3, r2
 8005668:	4299      	cmp	r1, r3
 800566a:	d129      	bne.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fac5 	bl	8003c00 <uxListRemove>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	2201      	movs	r2, #1
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43da      	mvns	r2, r3
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4013      	ands	r3, r2
 800568e:	4a10      	ldr	r2, [pc, #64]	@ (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005690:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	2201      	movs	r2, #1
 8005698:	409a      	lsls	r2, r3
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4313      	orrs	r3, r2
 80056a0:	4a0b      	ldr	r2, [pc, #44]	@ (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a06      	ldr	r2, [pc, #24]	@ (80056cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056b2:	441a      	add	r2, r3
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe fa43 	bl	8003b46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c0:	bf00      	nop
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000040c 	.word	0x2000040c
 80056cc:	20000410 	.word	0x20000410
 80056d0:	20000514 	.word	0x20000514

080056d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056d8:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056e6:	3201      	adds	r2, #1
 80056e8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80056ea:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80056ec:	681b      	ldr	r3, [r3, #0]
	}
 80056ee:	4618      	mov	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	2000040c 	.word	0x2000040c

080056fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005706:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800570c:	4b28      	ldr	r3, [pc, #160]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fa74 	bl	8003c00 <uxListRemove>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800571e:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	2201      	movs	r2, #1
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43da      	mvns	r2, r3
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4013      	ands	r3, r2
 8005732:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005734:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d10a      	bne.n	8005754 <prvAddCurrentTaskToDelayedList+0x58>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005744:	4b1a      	ldr	r3, [pc, #104]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	481a      	ldr	r0, [pc, #104]	@ (80057b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800574e:	f7fe f9fa 	bl	8003b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005752:	e026      	b.n	80057a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	429a      	cmp	r2, r3
 800576a:	d209      	bcs.n	8005780 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fe fa08 	bl	8003b8e <vListInsert>
}
 800577e:	e010      	b.n	80057a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005780:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fe f9fe 	bl	8003b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	d202      	bcs.n	80057a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800579c:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6013      	str	r3, [r2, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000510 	.word	0x20000510
 80057b0:	2000040c 	.word	0x2000040c
 80057b4:	20000514 	.word	0x20000514
 80057b8:	200004f8 	.word	0x200004f8
 80057bc:	200004c8 	.word	0x200004c8
 80057c0:	200004c4 	.word	0x200004c4
 80057c4:	2000052c 	.word	0x2000052c

080057c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b04      	subs	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057f8:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <pxPortInitialiseStack+0x64>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b14      	subs	r3, #20
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b04      	subs	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f06f 0202 	mvn.w	r2, #2
 8005816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b20      	subs	r3, #32
 800581c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	08005831 	.word	0x08005831

08005830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800583a:	4b13      	ldr	r3, [pc, #76]	@ (8005888 <prvTaskExitError+0x58>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d00b      	beq.n	800585c <prvTaskExitError+0x2c>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <prvTaskExitError+0x28>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60bb      	str	r3, [r7, #8]
}
 800586e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005870:	bf00      	nop
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0fc      	beq.n	8005872 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c
 800588c:	00000000 	.word	0x00000000

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	2000040c 	.word	0x2000040c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	@ (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b47      	ldr	r3, [pc, #284]	@ (8005a04 <xPortStartScheduler+0x124>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a47      	ldr	r2, [pc, #284]	@ (8005a08 <xPortStartScheduler+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10b      	bne.n	8005908 <xPortStartScheduler+0x28>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005908:	4b3e      	ldr	r3, [pc, #248]	@ (8005a04 <xPortStartScheduler+0x124>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a0c <xPortStartScheduler+0x12c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10b      	bne.n	800592a <xPortStartScheduler+0x4a>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	60fb      	str	r3, [r7, #12]
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800592a:	4b39      	ldr	r3, [pc, #228]	@ (8005a10 <xPortStartScheduler+0x130>)
 800592c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	22ff      	movs	r2, #255	@ 0xff
 800593a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4b31      	ldr	r3, [pc, #196]	@ (8005a14 <xPortStartScheduler+0x134>)
 8005950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <xPortStartScheduler+0x138>)
 8005954:	2207      	movs	r2, #7
 8005956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005958:	e009      	b.n	800596e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800595a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <xPortStartScheduler+0x138>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a2d      	ldr	r2, [pc, #180]	@ (8005a18 <xPortStartScheduler+0x138>)
 8005962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005976:	2b80      	cmp	r3, #128	@ 0x80
 8005978:	d0ef      	beq.n	800595a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800597a:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <xPortStartScheduler+0x138>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1c3 0307 	rsb	r3, r3, #7
 8005982:	2b04      	cmp	r3, #4
 8005984:	d00b      	beq.n	800599e <xPortStartScheduler+0xbe>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60bb      	str	r3, [r7, #8]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800599e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a18 <xPortStartScheduler+0x138>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <xPortStartScheduler+0x138>)
 80059a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a18 <xPortStartScheduler+0x138>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059b0:	4a19      	ldr	r2, [pc, #100]	@ (8005a18 <xPortStartScheduler+0x138>)
 80059b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059bc:	4b17      	ldr	r3, [pc, #92]	@ (8005a1c <xPortStartScheduler+0x13c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <xPortStartScheduler+0x13c>)
 80059c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c8:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <xPortStartScheduler+0x13c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <xPortStartScheduler+0x13c>)
 80059ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059d4:	f000 f8da 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d8:	4b11      	ldr	r3, [pc, #68]	@ (8005a20 <xPortStartScheduler+0x140>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059de:	f000 f8f9 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059e2:	4b10      	ldr	r3, [pc, #64]	@ (8005a24 <xPortStartScheduler+0x144>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a24 <xPortStartScheduler+0x144>)
 80059e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059ee:	f7ff ff63 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059f2:	f7ff fa73 	bl	8004edc <vTaskSwitchContext>
	prvTaskExitError();
 80059f6:	f7ff ff1b 	bl	8005830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	e000ed00 	.word	0xe000ed00
 8005a08:	410fc271 	.word	0x410fc271
 8005a0c:	410fc270 	.word	0x410fc270
 8005a10:	e000e400 	.word	0xe000e400
 8005a14:	20000538 	.word	0x20000538
 8005a18:	2000053c 	.word	0x2000053c
 8005a1c:	e000ed20 	.word	0xe000ed20
 8005a20:	2000000c 	.word	0x2000000c
 8005a24:	e000ef34 	.word	0xe000ef34

08005a28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a42:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <vPortEnterCritical+0x5c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	4a0e      	ldr	r2, [pc, #56]	@ (8005a84 <vPortEnterCritical+0x5c>)
 8005a4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <vPortEnterCritical+0x5c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d110      	bne.n	8005a76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a54:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <vPortEnterCritical+0x60>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	603b      	str	r3, [r7, #0]
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	e7fd      	b.n	8005a72 <vPortEnterCritical+0x4a>
	}
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	2000000c 	.word	0x2000000c
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a92:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <vPortExitCritical+0x26>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	607b      	str	r3, [r7, #4]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	4a08      	ldr	r2, [pc, #32]	@ (8005adc <vPortExitCritical+0x50>)
 8005aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005abc:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <vPortExitCritical+0x50>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <vPortExitCritical+0x44>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f383 8811 	msr	BASEPRI, r3
}
 8005ace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7ff f9e4 	bl	8004edc <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	2000040c 	.word	0x2000040c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7ff f901 	bl	8004d68 <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <SysTick_Handler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d915      	bls.n	8005c26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b16      	ldr	r3, [pc, #88]	@ (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20b      	bcs.n	8005c26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c26:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <vPortValidateInterruptPriority+0x80>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d90b      	bls.n	8005c4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	603b      	str	r3, [r7, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <vPortValidateInterruptPriority+0x62>
	}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	e000e3f0 	.word	0xe000e3f0
 8005c60:	20000538 	.word	0x20000538
 8005c64:	e000ed0c 	.word	0xe000ed0c
 8005c68:	2000053c 	.word	0x2000053c

08005c6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	@ 0x28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c78:	f7fe ffca 	bl	8004c10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005df0 <pvPortMalloc+0x184>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c84:	f000 f924 	bl	8005ed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c88:	4b5a      	ldr	r3, [pc, #360]	@ (8005df4 <pvPortMalloc+0x188>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8095 	bne.w	8005dc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01e      	beq.n	8005cda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d015      	beq.n	8005cda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <pvPortMalloc+0x6e>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	617b      	str	r3, [r7, #20]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d06f      	beq.n	8005dc0 <pvPortMalloc+0x154>
 8005ce0:	4b45      	ldr	r3, [pc, #276]	@ (8005df8 <pvPortMalloc+0x18c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d86a      	bhi.n	8005dc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cea:	4b44      	ldr	r3, [pc, #272]	@ (8005dfc <pvPortMalloc+0x190>)
 8005cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cee:	4b43      	ldr	r3, [pc, #268]	@ (8005dfc <pvPortMalloc+0x190>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cf4:	e004      	b.n	8005d00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d903      	bls.n	8005d12 <pvPortMalloc+0xa6>
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f1      	bne.n	8005cf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d12:	4b37      	ldr	r3, [pc, #220]	@ (8005df0 <pvPortMalloc+0x184>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d051      	beq.n	8005dc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	4413      	add	r3, r2
 8005d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	2308      	movs	r3, #8
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d920      	bls.n	8005d80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <pvPortMalloc+0xfc>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	613b      	str	r3, [r7, #16]
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d7a:	69b8      	ldr	r0, [r7, #24]
 8005d7c:	f000 f90a 	bl	8005f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <pvPortMalloc+0x18c>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <pvPortMalloc+0x18c>)
 8005d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005df8 <pvPortMalloc+0x18c>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <pvPortMalloc+0x194>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d203      	bcs.n	8005da2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d9a:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <pvPortMalloc+0x18c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	@ (8005e00 <pvPortMalloc+0x194>)
 8005da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <pvPortMalloc+0x188>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005db6:	4b13      	ldr	r3, [pc, #76]	@ (8005e04 <pvPortMalloc+0x198>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	4a11      	ldr	r2, [pc, #68]	@ (8005e04 <pvPortMalloc+0x198>)
 8005dbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dc0:	f7fe ff34 	bl	8004c2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <pvPortMalloc+0x17a>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60fb      	str	r3, [r7, #12]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <pvPortMalloc+0x176>
	return pvReturn;
 8005de6:	69fb      	ldr	r3, [r7, #28]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3728      	adds	r7, #40	@ 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20001100 	.word	0x20001100
 8005df4:	20001114 	.word	0x20001114
 8005df8:	20001104 	.word	0x20001104
 8005dfc:	200010f8 	.word	0x200010f8
 8005e00:	20001108 	.word	0x20001108
 8005e04:	2000110c 	.word	0x2000110c

08005e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04f      	beq.n	8005eba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	425b      	negs	r3, r3
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4413      	add	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ec4 <vPortFree+0xbc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <vPortFree+0x46>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60fb      	str	r3, [r7, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00b      	beq.n	8005e6e <vPortFree+0x66>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60bb      	str	r3, [r7, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	4b14      	ldr	r3, [pc, #80]	@ (8005ec4 <vPortFree+0xbc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01e      	beq.n	8005eba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d11a      	bne.n	8005eba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec4 <vPortFree+0xbc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e94:	f7fe febc 	bl	8004c10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <vPortFree+0xc0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4a09      	ldr	r2, [pc, #36]	@ (8005ec8 <vPortFree+0xc0>)
 8005ea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ea6:	6938      	ldr	r0, [r7, #16]
 8005ea8:	f000 f874 	bl	8005f94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005eac:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <vPortFree+0xc4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a06      	ldr	r2, [pc, #24]	@ (8005ecc <vPortFree+0xc4>)
 8005eb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eb6:	f7fe feb9 	bl	8004c2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20001114 	.word	0x20001114
 8005ec8:	20001104 	.word	0x20001104
 8005ecc:	20001110 	.word	0x20001110

08005ed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ed6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005eda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005edc:	4b27      	ldr	r3, [pc, #156]	@ (8005f7c <prvHeapInit+0xac>)
 8005ede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3307      	adds	r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <prvHeapInit+0xac>)
 8005f00:	4413      	add	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f08:	4a1d      	ldr	r2, [pc, #116]	@ (8005f80 <prvHeapInit+0xb0>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f80 <prvHeapInit+0xb0>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	4413      	add	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	@ (8005f84 <prvHeapInit+0xb4>)
 8005f30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <prvHeapInit+0xb4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f3a:	4b12      	ldr	r3, [pc, #72]	@ (8005f84 <prvHeapInit+0xb4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f50:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <prvHeapInit+0xb4>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f88 <prvHeapInit+0xb8>)
 8005f5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a09      	ldr	r2, [pc, #36]	@ (8005f8c <prvHeapInit+0xbc>)
 8005f66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f68:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <prvHeapInit+0xc0>)
 8005f6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f6e:	601a      	str	r2, [r3, #0]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000540 	.word	0x20000540
 8005f80:	200010f8 	.word	0x200010f8
 8005f84:	20001100 	.word	0x20001100
 8005f88:	20001108 	.word	0x20001108
 8005f8c:	20001104 	.word	0x20001104
 8005f90:	20001114 	.word	0x20001114

08005f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f9c:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <prvInsertBlockIntoFreeList+0xac>)
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e002      	b.n	8005fa8 <prvInsertBlockIntoFreeList+0x14>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d8f7      	bhi.n	8005fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d108      	bne.n	8005fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d118      	bne.n	800601c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b15      	ldr	r3, [pc, #84]	@ (8006044 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d00d      	beq.n	8006012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	441a      	add	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e008      	b.n	8006024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006012:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <prvInsertBlockIntoFreeList+0xb0>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e003      	b.n	8006024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d002      	beq.n	8006032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	200010f8 	.word	0x200010f8
 8006044:	20001100 	.word	0x20001100

08006048 <memset>:
 8006048:	4402      	add	r2, r0
 800604a:	4603      	mov	r3, r0
 800604c:	4293      	cmp	r3, r2
 800604e:	d100      	bne.n	8006052 <memset+0xa>
 8006050:	4770      	bx	lr
 8006052:	f803 1b01 	strb.w	r1, [r3], #1
 8006056:	e7f9      	b.n	800604c <memset+0x4>

08006058 <_reclaim_reent>:
 8006058:	4b29      	ldr	r3, [pc, #164]	@ (8006100 <_reclaim_reent+0xa8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4283      	cmp	r3, r0
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	4604      	mov	r4, r0
 8006062:	d04b      	beq.n	80060fc <_reclaim_reent+0xa4>
 8006064:	69c3      	ldr	r3, [r0, #28]
 8006066:	b1ab      	cbz	r3, 8006094 <_reclaim_reent+0x3c>
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	b16b      	cbz	r3, 8006088 <_reclaim_reent+0x30>
 800606c:	2500      	movs	r5, #0
 800606e:	69e3      	ldr	r3, [r4, #28]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	5959      	ldr	r1, [r3, r5]
 8006074:	2900      	cmp	r1, #0
 8006076:	d13b      	bne.n	80060f0 <_reclaim_reent+0x98>
 8006078:	3504      	adds	r5, #4
 800607a:	2d80      	cmp	r5, #128	@ 0x80
 800607c:	d1f7      	bne.n	800606e <_reclaim_reent+0x16>
 800607e:	69e3      	ldr	r3, [r4, #28]
 8006080:	4620      	mov	r0, r4
 8006082:	68d9      	ldr	r1, [r3, #12]
 8006084:	f000 f872 	bl	800616c <_free_r>
 8006088:	69e3      	ldr	r3, [r4, #28]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	b111      	cbz	r1, 8006094 <_reclaim_reent+0x3c>
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f86c 	bl	800616c <_free_r>
 8006094:	6961      	ldr	r1, [r4, #20]
 8006096:	b111      	cbz	r1, 800609e <_reclaim_reent+0x46>
 8006098:	4620      	mov	r0, r4
 800609a:	f000 f867 	bl	800616c <_free_r>
 800609e:	69e1      	ldr	r1, [r4, #28]
 80060a0:	b111      	cbz	r1, 80060a8 <_reclaim_reent+0x50>
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 f862 	bl	800616c <_free_r>
 80060a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060aa:	b111      	cbz	r1, 80060b2 <_reclaim_reent+0x5a>
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 f85d 	bl	800616c <_free_r>
 80060b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060b4:	b111      	cbz	r1, 80060bc <_reclaim_reent+0x64>
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f858 	bl	800616c <_free_r>
 80060bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060be:	b111      	cbz	r1, 80060c6 <_reclaim_reent+0x6e>
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 f853 	bl	800616c <_free_r>
 80060c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060c8:	b111      	cbz	r1, 80060d0 <_reclaim_reent+0x78>
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f84e 	bl	800616c <_free_r>
 80060d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060d2:	b111      	cbz	r1, 80060da <_reclaim_reent+0x82>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f849 	bl	800616c <_free_r>
 80060da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060dc:	b111      	cbz	r1, 80060e4 <_reclaim_reent+0x8c>
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 f844 	bl	800616c <_free_r>
 80060e4:	6a23      	ldr	r3, [r4, #32]
 80060e6:	b14b      	cbz	r3, 80060fc <_reclaim_reent+0xa4>
 80060e8:	4620      	mov	r0, r4
 80060ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060ee:	4718      	bx	r3
 80060f0:	680e      	ldr	r6, [r1, #0]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 f83a 	bl	800616c <_free_r>
 80060f8:	4631      	mov	r1, r6
 80060fa:	e7bb      	b.n	8006074 <_reclaim_reent+0x1c>
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	bf00      	nop
 8006100:	20000010 	.word	0x20000010

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4d0d      	ldr	r5, [pc, #52]	@ (800613c <__libc_init_array+0x38>)
 8006108:	4c0d      	ldr	r4, [pc, #52]	@ (8006140 <__libc_init_array+0x3c>)
 800610a:	1b64      	subs	r4, r4, r5
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	2600      	movs	r6, #0
 8006110:	42a6      	cmp	r6, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	4d0b      	ldr	r5, [pc, #44]	@ (8006144 <__libc_init_array+0x40>)
 8006116:	4c0c      	ldr	r4, [pc, #48]	@ (8006148 <__libc_init_array+0x44>)
 8006118:	f000 f87e 	bl	8006218 <_init>
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	2600      	movs	r6, #0
 8006122:	42a6      	cmp	r6, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f855 3b04 	ldr.w	r3, [r5], #4
 800612c:	4798      	blx	r3
 800612e:	3601      	adds	r6, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f855 3b04 	ldr.w	r3, [r5], #4
 8006136:	4798      	blx	r3
 8006138:	3601      	adds	r6, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	08006300 	.word	0x08006300
 8006140:	08006300 	.word	0x08006300
 8006144:	08006300 	.word	0x08006300
 8006148:	08006304 	.word	0x08006304

0800614c <__retarget_lock_acquire_recursive>:
 800614c:	4770      	bx	lr

0800614e <__retarget_lock_release_recursive>:
 800614e:	4770      	bx	lr

08006150 <memcpy>:
 8006150:	440a      	add	r2, r1
 8006152:	4291      	cmp	r1, r2
 8006154:	f100 33ff 	add.w	r3, r0, #4294967295
 8006158:	d100      	bne.n	800615c <memcpy+0xc>
 800615a:	4770      	bx	lr
 800615c:	b510      	push	{r4, lr}
 800615e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006166:	4291      	cmp	r1, r2
 8006168:	d1f9      	bne.n	800615e <memcpy+0xe>
 800616a:	bd10      	pop	{r4, pc}

0800616c <_free_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4605      	mov	r5, r0
 8006170:	2900      	cmp	r1, #0
 8006172:	d041      	beq.n	80061f8 <_free_r+0x8c>
 8006174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006178:	1f0c      	subs	r4, r1, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfb8      	it	lt
 800617e:	18e4      	addlt	r4, r4, r3
 8006180:	f000 f83e 	bl	8006200 <__malloc_lock>
 8006184:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <_free_r+0x90>)
 8006186:	6813      	ldr	r3, [r2, #0]
 8006188:	b933      	cbnz	r3, 8006198 <_free_r+0x2c>
 800618a:	6063      	str	r3, [r4, #4]
 800618c:	6014      	str	r4, [r2, #0]
 800618e:	4628      	mov	r0, r5
 8006190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006194:	f000 b83a 	b.w	800620c <__malloc_unlock>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d908      	bls.n	80061ae <_free_r+0x42>
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	1821      	adds	r1, r4, r0
 80061a0:	428b      	cmp	r3, r1
 80061a2:	bf01      	itttt	eq
 80061a4:	6819      	ldreq	r1, [r3, #0]
 80061a6:	685b      	ldreq	r3, [r3, #4]
 80061a8:	1809      	addeq	r1, r1, r0
 80061aa:	6021      	streq	r1, [r4, #0]
 80061ac:	e7ed      	b.n	800618a <_free_r+0x1e>
 80061ae:	461a      	mov	r2, r3
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	b10b      	cbz	r3, 80061b8 <_free_r+0x4c>
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d9fa      	bls.n	80061ae <_free_r+0x42>
 80061b8:	6811      	ldr	r1, [r2, #0]
 80061ba:	1850      	adds	r0, r2, r1
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d10b      	bne.n	80061d8 <_free_r+0x6c>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	4401      	add	r1, r0
 80061c4:	1850      	adds	r0, r2, r1
 80061c6:	4283      	cmp	r3, r0
 80061c8:	6011      	str	r1, [r2, #0]
 80061ca:	d1e0      	bne.n	800618e <_free_r+0x22>
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	6053      	str	r3, [r2, #4]
 80061d2:	4408      	add	r0, r1
 80061d4:	6010      	str	r0, [r2, #0]
 80061d6:	e7da      	b.n	800618e <_free_r+0x22>
 80061d8:	d902      	bls.n	80061e0 <_free_r+0x74>
 80061da:	230c      	movs	r3, #12
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	e7d6      	b.n	800618e <_free_r+0x22>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	1821      	adds	r1, r4, r0
 80061e4:	428b      	cmp	r3, r1
 80061e6:	bf04      	itt	eq
 80061e8:	6819      	ldreq	r1, [r3, #0]
 80061ea:	685b      	ldreq	r3, [r3, #4]
 80061ec:	6063      	str	r3, [r4, #4]
 80061ee:	bf04      	itt	eq
 80061f0:	1809      	addeq	r1, r1, r0
 80061f2:	6021      	streq	r1, [r4, #0]
 80061f4:	6054      	str	r4, [r2, #4]
 80061f6:	e7ca      	b.n	800618e <_free_r+0x22>
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop
 80061fc:	20001254 	.word	0x20001254

08006200 <__malloc_lock>:
 8006200:	4801      	ldr	r0, [pc, #4]	@ (8006208 <__malloc_lock+0x8>)
 8006202:	f7ff bfa3 	b.w	800614c <__retarget_lock_acquire_recursive>
 8006206:	bf00      	nop
 8006208:	20001250 	.word	0x20001250

0800620c <__malloc_unlock>:
 800620c:	4801      	ldr	r0, [pc, #4]	@ (8006214 <__malloc_unlock+0x8>)
 800620e:	f7ff bf9e 	b.w	800614e <__retarget_lock_release_recursive>
 8006212:	bf00      	nop
 8006214:	20001250 	.word	0x20001250

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
